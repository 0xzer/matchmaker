// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: tinder.proto

package binary

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEvent1Type int32

const (
	TestEvent1Type_TEST_EVENT1_TYPE_INVALID TestEvent1Type = 0
	TestEvent1Type_TEST_EVENT1_TYPE_TYPE1   TestEvent1Type = 1
	TestEvent1Type_TEST_EVENT1_TYPE_TYPE2   TestEvent1Type = 2
)

// Enum value maps for TestEvent1Type.
var (
	TestEvent1Type_name = map[int32]string{
		0: "TEST_EVENT1_TYPE_INVALID",
		1: "TEST_EVENT1_TYPE_TYPE1",
		2: "TEST_EVENT1_TYPE_TYPE2",
	}
	TestEvent1Type_value = map[string]int32{
		"TEST_EVENT1_TYPE_INVALID": 0,
		"TEST_EVENT1_TYPE_TYPE1":   1,
		"TEST_EVENT1_TYPE_TYPE2":   2,
	}
)

func (x TestEvent1Type) Enum() *TestEvent1Type {
	p := new(TestEvent1Type)
	*p = x
	return p
}

func (x TestEvent1Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEvent1Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[0].Descriptor()
}

func (TestEvent1Type) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[0]
}

func (x TestEvent1Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEvent1Type.Descriptor instead.
func (TestEvent1Type) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{0}
}

type HubbleInstrumentType int32

const (
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_INVALID         HubbleInstrumentType = 0
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_IMPRESSION      HubbleInstrumentType = 1
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_TAP             HubbleInstrumentType = 2
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_SWIPE           HubbleInstrumentType = 3
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_CUSTOM          HubbleInstrumentType = 4
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_SWIPE_UP        HubbleInstrumentType = 5
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_SWIPE_DOWN      HubbleInstrumentType = 6
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_SWIPE_LEFT      HubbleInstrumentType = 7
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_SWIPE_RIGHT     HubbleInstrumentType = 8
	HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_NETWORK_REQUEST HubbleInstrumentType = 9
)

// Enum value maps for HubbleInstrumentType.
var (
	HubbleInstrumentType_name = map[int32]string{
		0: "HUBBLE_INSTRUMENT_TYPE_INVALID",
		1: "HUBBLE_INSTRUMENT_TYPE_IMPRESSION",
		2: "HUBBLE_INSTRUMENT_TYPE_TAP",
		3: "HUBBLE_INSTRUMENT_TYPE_SWIPE",
		4: "HUBBLE_INSTRUMENT_TYPE_CUSTOM",
		5: "HUBBLE_INSTRUMENT_TYPE_SWIPE_UP",
		6: "HUBBLE_INSTRUMENT_TYPE_SWIPE_DOWN",
		7: "HUBBLE_INSTRUMENT_TYPE_SWIPE_LEFT",
		8: "HUBBLE_INSTRUMENT_TYPE_SWIPE_RIGHT",
		9: "HUBBLE_INSTRUMENT_TYPE_NETWORK_REQUEST",
	}
	HubbleInstrumentType_value = map[string]int32{
		"HUBBLE_INSTRUMENT_TYPE_INVALID":         0,
		"HUBBLE_INSTRUMENT_TYPE_IMPRESSION":      1,
		"HUBBLE_INSTRUMENT_TYPE_TAP":             2,
		"HUBBLE_INSTRUMENT_TYPE_SWIPE":           3,
		"HUBBLE_INSTRUMENT_TYPE_CUSTOM":          4,
		"HUBBLE_INSTRUMENT_TYPE_SWIPE_UP":        5,
		"HUBBLE_INSTRUMENT_TYPE_SWIPE_DOWN":      6,
		"HUBBLE_INSTRUMENT_TYPE_SWIPE_LEFT":      7,
		"HUBBLE_INSTRUMENT_TYPE_SWIPE_RIGHT":     8,
		"HUBBLE_INSTRUMENT_TYPE_NETWORK_REQUEST": 9,
	}
)

func (x HubbleInstrumentType) Enum() *HubbleInstrumentType {
	p := new(HubbleInstrumentType)
	*p = x
	return p
}

func (x HubbleInstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HubbleInstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[1].Descriptor()
}

func (HubbleInstrumentType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[1]
}

func (x HubbleInstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HubbleInstrumentType.Descriptor instead.
func (HubbleInstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{1}
}

type EventType int32

const (
	EventType_EVENT_TYPE_INVALID    EventType = 0
	EventType_EVENT_TYPE_EXPERIENCE EventType = 1
	EventType_EVENT_TYPE_FLOW       EventType = 2
	EventType_EVENT_TYPE_OUTCOME    EventType = 3
	EventType_EVENT_TYPE_INTERACT   EventType = 4
	EventType_EVENT_TYPE_OTHER      EventType = 5
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_INVALID",
		1: "EVENT_TYPE_EXPERIENCE",
		2: "EVENT_TYPE_FLOW",
		3: "EVENT_TYPE_OUTCOME",
		4: "EVENT_TYPE_INTERACT",
		5: "EVENT_TYPE_OTHER",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_INVALID":    0,
		"EVENT_TYPE_EXPERIENCE": 1,
		"EVENT_TYPE_FLOW":       2,
		"EVENT_TYPE_OUTCOME":    3,
		"EVENT_TYPE_INTERACT":   4,
		"EVENT_TYPE_OTHER":      5,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{2}
}

type StatusCode int32

const (
	StatusCode_STATUS_CODE_INVALID StatusCode = 0
	StatusCode_STATUS_CODE_SUCCESS StatusCode = 1
	StatusCode_STATUS_CODE_FAILURE StatusCode = 2
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "STATUS_CODE_INVALID",
		1: "STATUS_CODE_SUCCESS",
		2: "STATUS_CODE_FAILURE",
	}
	StatusCode_value = map[string]int32{
		"STATUS_CODE_INVALID": 0,
		"STATUS_CODE_SUCCESS": 1,
		"STATUS_CODE_FAILURE": 2,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[3].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[3]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{3}
}

type UiElement int32

const (
	UiElement_UI_ELEMENT_INVALID             UiElement = 0
	UiElement_UI_ELEMENT_BUTTON              UiElement = 1
	UiElement_UI_ELEMENT_CARD                UiElement = 2
	UiElement_UI_ELEMENT_SCREEN              UiElement = 3
	UiElement_UI_ELEMENT_PUSH_NOTIFICATION   UiElement = 4
	UiElement_UI_ELEMENT_IN_APP_NOTIFICATION UiElement = 5
	UiElement_UI_ELEMENT_FORCE_TOUCH         UiElement = 6
	UiElement_UI_ELEMENT_SWITCH              UiElement = 7
	UiElement_UI_ELEMENT_GENERIC_VIEW        UiElement = 256
)

// Enum value maps for UiElement.
var (
	UiElement_name = map[int32]string{
		0:   "UI_ELEMENT_INVALID",
		1:   "UI_ELEMENT_BUTTON",
		2:   "UI_ELEMENT_CARD",
		3:   "UI_ELEMENT_SCREEN",
		4:   "UI_ELEMENT_PUSH_NOTIFICATION",
		5:   "UI_ELEMENT_IN_APP_NOTIFICATION",
		6:   "UI_ELEMENT_FORCE_TOUCH",
		7:   "UI_ELEMENT_SWITCH",
		256: "UI_ELEMENT_GENERIC_VIEW",
	}
	UiElement_value = map[string]int32{
		"UI_ELEMENT_INVALID":             0,
		"UI_ELEMENT_BUTTON":              1,
		"UI_ELEMENT_CARD":                2,
		"UI_ELEMENT_SCREEN":              3,
		"UI_ELEMENT_PUSH_NOTIFICATION":   4,
		"UI_ELEMENT_IN_APP_NOTIFICATION": 5,
		"UI_ELEMENT_FORCE_TOUCH":         6,
		"UI_ELEMENT_SWITCH":              7,
		"UI_ELEMENT_GENERIC_VIEW":        256,
	}
)

func (x UiElement) Enum() *UiElement {
	p := new(UiElement)
	*p = x
	return p
}

func (x UiElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UiElement) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[4].Descriptor()
}

func (UiElement) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[4]
}

func (x UiElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UiElement.Descriptor instead.
func (UiElement) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{4}
}

type FeatureType int32

const (
	FeatureType_FEATURE_TYPE_INVALID            FeatureType = 0
	FeatureType_FEATURE_TYPE_BOOST              FeatureType = 1
	FeatureType_FEATURE_TYPE_GOLD               FeatureType = 2
	FeatureType_FEATURE_TYPE_PLATINUM           FeatureType = 3
	FeatureType_FEATURE_TYPE_REWIND             FeatureType = 4
	FeatureType_FEATURE_TYPE_SUPER_BOOST        FeatureType = 5
	FeatureType_FEATURE_TYPE_SUPER_LIKE         FeatureType = 6
	FeatureType_FEATURE_TYPE_READ_RECEIPTS      FeatureType = 7
	FeatureType_FEATURE_TYPE_PLUS               FeatureType = 8
	FeatureType_FEATURE_TYPE_BOOST_SUBSCRIPTION FeatureType = 9
	FeatureType_FEATURE_TYPE_SUB_MERCHANDISING  FeatureType = 10
	FeatureType_FEATURE_TYPE_CONSUMABLE         FeatureType = 11
	FeatureType_FEATURE_TYPE_PRIMETIME_BOOST    FeatureType = 12
)

// Enum value maps for FeatureType.
var (
	FeatureType_name = map[int32]string{
		0:  "FEATURE_TYPE_INVALID",
		1:  "FEATURE_TYPE_BOOST",
		2:  "FEATURE_TYPE_GOLD",
		3:  "FEATURE_TYPE_PLATINUM",
		4:  "FEATURE_TYPE_REWIND",
		5:  "FEATURE_TYPE_SUPER_BOOST",
		6:  "FEATURE_TYPE_SUPER_LIKE",
		7:  "FEATURE_TYPE_READ_RECEIPTS",
		8:  "FEATURE_TYPE_PLUS",
		9:  "FEATURE_TYPE_BOOST_SUBSCRIPTION",
		10: "FEATURE_TYPE_SUB_MERCHANDISING",
		11: "FEATURE_TYPE_CONSUMABLE",
		12: "FEATURE_TYPE_PRIMETIME_BOOST",
	}
	FeatureType_value = map[string]int32{
		"FEATURE_TYPE_INVALID":            0,
		"FEATURE_TYPE_BOOST":              1,
		"FEATURE_TYPE_GOLD":               2,
		"FEATURE_TYPE_PLATINUM":           3,
		"FEATURE_TYPE_REWIND":             4,
		"FEATURE_TYPE_SUPER_BOOST":        5,
		"FEATURE_TYPE_SUPER_LIKE":         6,
		"FEATURE_TYPE_READ_RECEIPTS":      7,
		"FEATURE_TYPE_PLUS":               8,
		"FEATURE_TYPE_BOOST_SUBSCRIPTION": 9,
		"FEATURE_TYPE_SUB_MERCHANDISING":  10,
		"FEATURE_TYPE_CONSUMABLE":         11,
		"FEATURE_TYPE_PRIMETIME_BOOST":    12,
	}
)

func (x FeatureType) Enum() *FeatureType {
	p := new(FeatureType)
	*p = x
	return p
}

func (x FeatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[5].Descriptor()
}

func (FeatureType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[5]
}

func (x FeatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureType.Descriptor instead.
func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{5}
}

type SourceAction int32

const (
	SourceAction_SOURCE_ACTION_INVALID         SourceAction = 0
	SourceAction_SOURCE_ACTION_ELEMENT_VIEWED  SourceAction = 1
	SourceAction_SOURCE_ACTION_ELEMENT_TAPPED  SourceAction = 2
	SourceAction_SOURCE_ACTION_ELEMENT_TOGGLED SourceAction = 3
)

// Enum value maps for SourceAction.
var (
	SourceAction_name = map[int32]string{
		0: "SOURCE_ACTION_INVALID",
		1: "SOURCE_ACTION_ELEMENT_VIEWED",
		2: "SOURCE_ACTION_ELEMENT_TAPPED",
		3: "SOURCE_ACTION_ELEMENT_TOGGLED",
	}
	SourceAction_value = map[string]int32{
		"SOURCE_ACTION_INVALID":         0,
		"SOURCE_ACTION_ELEMENT_VIEWED":  1,
		"SOURCE_ACTION_ELEMENT_TAPPED":  2,
		"SOURCE_ACTION_ELEMENT_TOGGLED": 3,
	}
)

func (x SourceAction) Enum() *SourceAction {
	p := new(SourceAction)
	*p = x
	return p
}

func (x SourceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[6].Descriptor()
}

func (SourceAction) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[6]
}

func (x SourceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceAction.Descriptor instead.
func (SourceAction) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{6}
}

type EntityType int32

const (
	EntityType_ENTITY_TYPE_INVALID         EntityType = 0
	EntityType_ENTITY_TYPE_USER            EntityType = 4
	EntityType_ENTITY_TYPE_SKU             EntityType = 5
	EntityType_ENTITY_TYPE_NETWORK_REQUEST EntityType = 20
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0:  "ENTITY_TYPE_INVALID",
		4:  "ENTITY_TYPE_USER",
		5:  "ENTITY_TYPE_SKU",
		20: "ENTITY_TYPE_NETWORK_REQUEST",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_INVALID":         0,
		"ENTITY_TYPE_USER":            4,
		"ENTITY_TYPE_SKU":             5,
		"ENTITY_TYPE_NETWORK_REQUEST": 20,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[7].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[7]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{7}
}

type SourceComponent int32

const (
	SourceComponent_SOURCE_COMPONENT_INVALID                               SourceComponent = 0
	SourceComponent_SOURCE_COMPONENT_BACK_BUTTON                           SourceComponent = 18
	SourceComponent_SOURCE_COMPONENT_BOTTOM_TAB_BAR                        SourceComponent = 19
	SourceComponent_SOURCE_COMPONENT_READ_RECEIPTS                         SourceComponent = 20
	SourceComponent_SOURCE_COMPONENT_TINDER_PLUS_BTN                       SourceComponent = 21
	SourceComponent_SOURCE_COMPONENT_PAYWALL_CONTINUE                      SourceComponent = 22
	SourceComponent_SOURCE_COMPONENT_PAYMENT_CANCEL                        SourceComponent = 23
	SourceComponent_SOURCE_COMPONENT_PAYMENT_SUBSCRIBE                     SourceComponent = 24
	SourceComponent_SOURCE_COMPONENT_PAYMENT_MODAL_OK                      SourceComponent = 25
	SourceComponent_SOURCE_COMPONENT_MERCHANDISING_MODAL                   SourceComponent = 26
	SourceComponent_SOURCE_COMPONENT_PROFILE_UPSELL_ADVERTISEMENT          SourceComponent = 27
	SourceComponent_SOURCE_COMPONENT_SETTINGS_BUTTON                       SourceComponent = 28
	SourceComponent_SOURCE_COMPONENT_NO_THANKS_BUTTON                      SourceComponent = 29
	SourceComponent_SOURCE_COMPONENT_READ_RECEIPTS_EMPTY_CHAT_BUTTON       SourceComponent = 30
	SourceComponent_SOURCE_COMPONENT_GAMEPAD_UNDO                          SourceComponent = 31
	SourceComponent_SOURCE_COMPONENT_PASSPORT_ADD_LOCATION                 SourceComponent = 32
	SourceComponent_SOURCE_COMPONENT_PASSPORT_RECENT_LOCATION              SourceComponent = 33
	SourceComponent_SOURCE_COMPONENT_GAMEPAD_LIKE                          SourceComponent = 34
	SourceComponent_SOURCE_COMPONENT_GAMEPAD_SUPERLIKE                     SourceComponent = 35
	SourceComponent_SOURCE_COMPONENT_BLENDS_ACTIVITY                       SourceComponent = 36
	SourceComponent_SOURCE_COMPONENT_SETTINGS_PLUS_BUTTON                  SourceComponent = 37
	SourceComponent_SOURCE_COMPONENT_EDIT_PROFILE_ACTIVITY                 SourceComponent = 38
	SourceComponent_SOURCE_COMPONENT_CONTROL_UNDO                          SourceComponent = 39
	SourceComponent_SOURCE_COMPONENT_CONTROL_UNLIMITED_SWIPES              SourceComponent = 40
	SourceComponent_SOURCE_COMPONENT_CONTROL_HIDE_ADS                      SourceComponent = 41
	SourceComponent_SOURCE_COMPONENT_CONTROL_SUPERLIKE_FEATURE             SourceComponent = 42
	SourceComponent_SOURCE_COMPONENT_CONTROL_BOOST_FEATURE                 SourceComponent = 43
	SourceComponent_SOURCE_COMPONENT_CONTROL_WHO_SEES_YOU                  SourceComponent = 44
	SourceComponent_SOURCE_COMPONENT_CONTROL_YOUR_PROFILE                  SourceComponent = 45
	SourceComponent_SOURCE_COMPONENT_CONTROL_OTHER_FEATURE                 SourceComponent = 46
	SourceComponent_SOURCE_COMPONENT_CONTROL_PASSPORT                      SourceComponent = 47
	SourceComponent_SOURCE_COMPONENT_CONTROL_PLUS_BUTTON                   SourceComponent = 48
	SourceComponent_SOURCE_COMPONENT_DISCOUNT_AVAILABLE                    SourceComponent = 49
	SourceComponent_SOURCE_COMPONENT_DISCOUNT_REMINDER                     SourceComponent = 50
	SourceComponent_SOURCE_COMPONENT_DISCOUNT_NOTIFICATION                 SourceComponent = 51
	SourceComponent_SOURCE_COMPONENT_BOOST_DIALOG_SUMMARY                  SourceComponent = 52
	SourceComponent_SOURCE_COMPONENT_DEEPLINK_PLUS                         SourceComponent = 53
	SourceComponent_SOURCE_COMPONENT_BOOST_DIALOG_UPSELL_BUTTON            SourceComponent = 54
	SourceComponent_SOURCE_COMPONENT_BOOST_DIALOG_UPDATE                   SourceComponent = 55
	SourceComponent_SOURCE_COMPONENT_SUPERLIKE_DIALOG_UPSELL               SourceComponent = 56
	SourceComponent_SOURCE_COMPONENT_PROFILE_TAB                           SourceComponent = 57
	SourceComponent_SOURCE_COMPONENT_PROFILE_TAB_UNLIMITED_LIKES           SourceComponent = 58
	SourceComponent_SOURCE_COMPONENT_RECS_EXHAUSTED_SETTINGS               SourceComponent = 59
	SourceComponent_SOURCE_COMPONENT_PLUS_NATIVE_DFP_AD                    SourceComponent = 60
	SourceComponent_SOURCE_COMPONENT_LAST_HOUR_AUTO_OPEN                   SourceComponent = 61
	SourceComponent_SOURCE_COMPONENT_MISSED_MATCH_REWIND_PROMO             SourceComponent = 62
	SourceComponent_SOURCE_COMPONENT_LIKES_SENT                            SourceComponent = 63
	SourceComponent_SOURCE_COMPONENT_BOUNCER_BYPASS                        SourceComponent = 64
	SourceComponent_SOURCE_COMPONENT_SUB_MERCHANDISING_PLUS_BUTTON         SourceComponent = 65
	SourceComponent_SOURCE_COMPONENT_STORE_PLUS_BUTTON                     SourceComponent = 66
	SourceComponent_SOURCE_COMPONENT_SUPERLIKE_EXHAUSTED                   SourceComponent = 67
	SourceComponent_SOURCE_COMPONENT_SETTINGS_SUPERLIKE_BUTTON             SourceComponent = 68
	SourceComponent_SOURCE_COMPONENT_PLUS_CONTROL_SUPERLIKE_BUTTON         SourceComponent = 69
	SourceComponent_SOURCE_COMPONENT_DEEPLINK_SUPERLIKE                    SourceComponent = 70
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS                             SourceComponent = 71
	SourceComponent_SOURCE_COMPONENT_PROFILE_TAB_SUPERLIKE                 SourceComponent = 72
	SourceComponent_SOURCE_COMPONENT_UPSELL_SUPERLIKE_COMMON_INTERESTS     SourceComponent = 74
	SourceComponent_SOURCE_COMPONENT_FASTMATCH_MATCHLIST_PREVIEW           SourceComponent = 75
	SourceComponent_SOURCE_COMPONENT_SETTINGS_GOLD_BUTTON                  SourceComponent = 76
	SourceComponent_SOURCE_COMPONENT_FASTMATCH_INTRO                       SourceComponent = 77
	SourceComponent_SOURCE_COMPONENT_DEEPLINK                              SourceComponent = 78
	SourceComponent_SOURCE_COMPONENT_CONTROLLA_GOLD_FEATURE                SourceComponent = 79
	SourceComponent_SOURCE_COMPONENT_CONTROLLA_TOP_PICKS                   SourceComponent = 80
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS_FOOTER_BUTTON               SourceComponent = 81
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS_SCROLL_TO_BOTTOM            SourceComponent = 82
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS_SWIPE_LEFT_ON_REC           SourceComponent = 83
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS_SWIPE_RIGHT_ON_REC          SourceComponent = 84
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS_VIEWING_PROFILE             SourceComponent = 85
	SourceComponent_SOURCE_COMPONENT_LIKES_BOUNCER                         SourceComponent = 86
	SourceComponent_SOURCE_COMPONENT_REWIND                                SourceComponent = 87
	SourceComponent_SOURCE_COMPONENT_TOP_PICKS_DEEPLINK                    SourceComponent = 88
	SourceComponent_SOURCE_COMPONENT_GOLD_NATIVE_DFP_AD                    SourceComponent = 89
	SourceComponent_SOURCE_COMPONENT_SUPERLIKE                             SourceComponent = 90
	SourceComponent_SOURCE_COMPONENT_TEASER_SWIPE_LEFT                     SourceComponent = 91
	SourceComponent_SOURCE_COMPONENT_TEASER_SWIPE_RIGHT                    SourceComponent = 92
	SourceComponent_SOURCE_COMPONENT_TEASER_PROFILE                        SourceComponent = 93
	SourceComponent_SOURCE_COMPONENT_LIKES_YOU_ENTRY_POINT                 SourceComponent = 94
	SourceComponent_SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_TEASER_TAP       SourceComponent = 95
	SourceComponent_SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_TEASER_SWIPE     SourceComponent = 96
	SourceComponent_SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_SCROLL_TO_BOTTOM SourceComponent = 97
	SourceComponent_SOURCE_COMPONENT_GOLD_HOME_CTA_BUTTON                  SourceComponent = 98
	SourceComponent_SOURCE_COMPONENT_MISSED_MATCH_DEEPLINK                 SourceComponent = 99
	SourceComponent_SOURCE_COMPONENT_SPLASH_FAN_CARD                       SourceComponent = 100
	SourceComponent_SOURCE_COMPONENT_SPLASH_PROFILE_CARD                   SourceComponent = 101
	SourceComponent_SOURCE_COMPONENT_SPLASH_CTA_BUTTON                     SourceComponent = 102
	SourceComponent_SOURCE_COMPONENT_SECRET_ADMIRER_UPSELL                 SourceComponent = 103
	SourceComponent_SOURCE_COMPONENT_GOLD_INTRO_CELEBRATION                SourceComponent = 104
	SourceComponent_SOURCE_COMPONENT_BOOST_DIALOG_SUMMARY_GOLD_BUTTON      SourceComponent = 105
	SourceComponent_SOURCE_COMPONENT_RECENTLY_ACTIVE_MATCH_LIST            SourceComponent = 106
	SourceComponent_SOURCE_COMPONENT_CATEGORIES_TEASER_INTERACTION         SourceComponent = 107
	SourceComponent_SOURCE_COMPONENT_CATEGORIES_SWIPE_ON_ALL_TOP_PICKS     SourceComponent = 108
	SourceComponent_SOURCE_COMPONENT_BOOST_UPSELL                          SourceComponent = 109
	SourceComponent_SOURCE_COMPONENT_GOLD_HOME_FILTERS                     SourceComponent = 110
	SourceComponent_SOURCE_COMPONENT_SUB_MERCHANDISING_GOLD_BUTTON         SourceComponent = 111
	SourceComponent_SOURCE_COMPONENT_BOOST_REDESIGN_UPSELL                 SourceComponent = 112
	SourceComponent_SOURCE_COMPONENT_STORE_GOLD_BUTTON                     SourceComponent = 113
	SourceComponent_SOURCE_COMPONENT_CONTROLLA_PLAT                        SourceComponent = 114
	SourceComponent_SOURCE_COMPONENT_SETTINGS_PLAT_BUTTON                  SourceComponent = 115
	SourceComponent_SOURCE_COMPONENT_PLAT_DEEPLINK                         SourceComponent = 116
	SourceComponent_SOURCE_COMPONENT_PLAT_SWIPENOTE                        SourceComponent = 117
	SourceComponent_SOURCE_COMPONENT_PLAT_UPGRADE_MODAL                    SourceComponent = 118
	SourceComponent_SOURCE_COMPONENT_PLAT_PLUS_BOUNCER                     SourceComponent = 119
	SourceComponent_SOURCE_COMPONENT_PRIORITY_MESSAGES_UPSELL              SourceComponent = 120
	SourceComponent_SOURCE_COMPONENT_MY_LIKES_CTA                          SourceComponent = 121
	SourceComponent_SOURCE_COMPONENT_MY_LIKES_INITIAL_ENTRY_UPSELL         SourceComponent = 122
	SourceComponent_SOURCE_COMPONENT_MY_LIKES_BOTTOM_SCROLL_UPSELL         SourceComponent = 123
	SourceComponent_SOURCE_COMPONENT_MATCHLIST_PLAT_UPSELL                 SourceComponent = 124
	SourceComponent_SOURCE_COMPONENT_MY_LIKES_ATTACH_MESSAGE_UPSELL        SourceComponent = 125
	SourceComponent_SOURCE_COMPONENT_MATCHLIST_RECENTLY_ACTIVE_UPSELL      SourceComponent = 126
	SourceComponent_SOURCE_COMPONENT_SUB_MERCHANDISING_PLAT_BUTTON         SourceComponent = 127
	SourceComponent_SOURCE_COMPONENT_BOOST_REDESIGN_PLAT_UPSELL            SourceComponent = 128
	SourceComponent_SOURCE_COMPONENT_STORE                                 SourceComponent = 129
	SourceComponent_SOURCE_COMPONENT_GAMEPAD_BOOST                         SourceComponent = 130
	SourceComponent_SOURCE_COMPONENT_BOOST_END                             SourceComponent = 131
	SourceComponent_SOURCE_COMPONENT_PLUS_CONTROL_BOOST_BUTTON             SourceComponent = 132
	SourceComponent_SOURCE_COMPONENT_SETTINGS_BOOST_BUTTON                 SourceComponent = 133
	SourceComponent_SOURCE_COMPONENT_DEEPLINK_BOOST                        SourceComponent = 134
	SourceComponent_SOURCE_COMPONENT_BOOST_DIALOG_INTRO                    SourceComponent = 135
	SourceComponent_SOURCE_COMPONENT_FAST_MATCH_BOOST                      SourceComponent = 136
	SourceComponent_SOURCE_COMPONENT_PROFILE_TAB_BOOST                     SourceComponent = 137
	SourceComponent_SOURCE_COMPONENT_GOLD_HOME_BOOST                       SourceComponent = 138
	SourceComponent_SOURCE_COMPONENT_MERCHANDISING_DEEPLINK_BOOST          SourceComponent = 139
	SourceComponent_SOURCE_COMPONENT_BOOST_UPSELL_MODAL                    SourceComponent = 140
	SourceComponent_SOURCE_COMPONENT_PAYWALL_DIALOG_SCREEN                 SourceComponent = 141
	SourceComponent_SOURCE_COMPONENT_PAYWALL_DIALOG_BACK_BUTTON            SourceComponent = 142
	SourceComponent_SOURCE_COMPONENT_OFFER_PACKAGE_TILE                    SourceComponent = 143
	SourceComponent_SOURCE_COMPONENT_SELECT_PACKAGE_CONTINUE_BUTTON        SourceComponent = 144
	SourceComponent_SOURCE_COMPONENT_MAKE_PURCHASE_STEP_SCREEN             SourceComponent = 145
	SourceComponent_SOURCE_COMPONENT_MAKE_PURCHASE_STEP_BACK_BUTTON        SourceComponent = 146
	SourceComponent_SOURCE_COMPONENT_CREDIT_CARD_BUY_NOW_BUTTON            SourceComponent = 147
	SourceComponent_SOURCE_COMPONENT_GOOGLE_BUY_NOW_BUTTON                 SourceComponent = 148
)

// Enum value maps for SourceComponent.
var (
	SourceComponent_name = map[int32]string{
		0:   "SOURCE_COMPONENT_INVALID",
		18:  "SOURCE_COMPONENT_BACK_BUTTON",
		19:  "SOURCE_COMPONENT_BOTTOM_TAB_BAR",
		20:  "SOURCE_COMPONENT_READ_RECEIPTS",
		21:  "SOURCE_COMPONENT_TINDER_PLUS_BTN",
		22:  "SOURCE_COMPONENT_PAYWALL_CONTINUE",
		23:  "SOURCE_COMPONENT_PAYMENT_CANCEL",
		24:  "SOURCE_COMPONENT_PAYMENT_SUBSCRIBE",
		25:  "SOURCE_COMPONENT_PAYMENT_MODAL_OK",
		26:  "SOURCE_COMPONENT_MERCHANDISING_MODAL",
		27:  "SOURCE_COMPONENT_PROFILE_UPSELL_ADVERTISEMENT",
		28:  "SOURCE_COMPONENT_SETTINGS_BUTTON",
		29:  "SOURCE_COMPONENT_NO_THANKS_BUTTON",
		30:  "SOURCE_COMPONENT_READ_RECEIPTS_EMPTY_CHAT_BUTTON",
		31:  "SOURCE_COMPONENT_GAMEPAD_UNDO",
		32:  "SOURCE_COMPONENT_PASSPORT_ADD_LOCATION",
		33:  "SOURCE_COMPONENT_PASSPORT_RECENT_LOCATION",
		34:  "SOURCE_COMPONENT_GAMEPAD_LIKE",
		35:  "SOURCE_COMPONENT_GAMEPAD_SUPERLIKE",
		36:  "SOURCE_COMPONENT_BLENDS_ACTIVITY",
		37:  "SOURCE_COMPONENT_SETTINGS_PLUS_BUTTON",
		38:  "SOURCE_COMPONENT_EDIT_PROFILE_ACTIVITY",
		39:  "SOURCE_COMPONENT_CONTROL_UNDO",
		40:  "SOURCE_COMPONENT_CONTROL_UNLIMITED_SWIPES",
		41:  "SOURCE_COMPONENT_CONTROL_HIDE_ADS",
		42:  "SOURCE_COMPONENT_CONTROL_SUPERLIKE_FEATURE",
		43:  "SOURCE_COMPONENT_CONTROL_BOOST_FEATURE",
		44:  "SOURCE_COMPONENT_CONTROL_WHO_SEES_YOU",
		45:  "SOURCE_COMPONENT_CONTROL_YOUR_PROFILE",
		46:  "SOURCE_COMPONENT_CONTROL_OTHER_FEATURE",
		47:  "SOURCE_COMPONENT_CONTROL_PASSPORT",
		48:  "SOURCE_COMPONENT_CONTROL_PLUS_BUTTON",
		49:  "SOURCE_COMPONENT_DISCOUNT_AVAILABLE",
		50:  "SOURCE_COMPONENT_DISCOUNT_REMINDER",
		51:  "SOURCE_COMPONENT_DISCOUNT_NOTIFICATION",
		52:  "SOURCE_COMPONENT_BOOST_DIALOG_SUMMARY",
		53:  "SOURCE_COMPONENT_DEEPLINK_PLUS",
		54:  "SOURCE_COMPONENT_BOOST_DIALOG_UPSELL_BUTTON",
		55:  "SOURCE_COMPONENT_BOOST_DIALOG_UPDATE",
		56:  "SOURCE_COMPONENT_SUPERLIKE_DIALOG_UPSELL",
		57:  "SOURCE_COMPONENT_PROFILE_TAB",
		58:  "SOURCE_COMPONENT_PROFILE_TAB_UNLIMITED_LIKES",
		59:  "SOURCE_COMPONENT_RECS_EXHAUSTED_SETTINGS",
		60:  "SOURCE_COMPONENT_PLUS_NATIVE_DFP_AD",
		61:  "SOURCE_COMPONENT_LAST_HOUR_AUTO_OPEN",
		62:  "SOURCE_COMPONENT_MISSED_MATCH_REWIND_PROMO",
		63:  "SOURCE_COMPONENT_LIKES_SENT",
		64:  "SOURCE_COMPONENT_BOUNCER_BYPASS",
		65:  "SOURCE_COMPONENT_SUB_MERCHANDISING_PLUS_BUTTON",
		66:  "SOURCE_COMPONENT_STORE_PLUS_BUTTON",
		67:  "SOURCE_COMPONENT_SUPERLIKE_EXHAUSTED",
		68:  "SOURCE_COMPONENT_SETTINGS_SUPERLIKE_BUTTON",
		69:  "SOURCE_COMPONENT_PLUS_CONTROL_SUPERLIKE_BUTTON",
		70:  "SOURCE_COMPONENT_DEEPLINK_SUPERLIKE",
		71:  "SOURCE_COMPONENT_TOP_PICKS",
		72:  "SOURCE_COMPONENT_PROFILE_TAB_SUPERLIKE",
		74:  "SOURCE_COMPONENT_UPSELL_SUPERLIKE_COMMON_INTERESTS",
		75:  "SOURCE_COMPONENT_FASTMATCH_MATCHLIST_PREVIEW",
		76:  "SOURCE_COMPONENT_SETTINGS_GOLD_BUTTON",
		77:  "SOURCE_COMPONENT_FASTMATCH_INTRO",
		78:  "SOURCE_COMPONENT_DEEPLINK",
		79:  "SOURCE_COMPONENT_CONTROLLA_GOLD_FEATURE",
		80:  "SOURCE_COMPONENT_CONTROLLA_TOP_PICKS",
		81:  "SOURCE_COMPONENT_TOP_PICKS_FOOTER_BUTTON",
		82:  "SOURCE_COMPONENT_TOP_PICKS_SCROLL_TO_BOTTOM",
		83:  "SOURCE_COMPONENT_TOP_PICKS_SWIPE_LEFT_ON_REC",
		84:  "SOURCE_COMPONENT_TOP_PICKS_SWIPE_RIGHT_ON_REC",
		85:  "SOURCE_COMPONENT_TOP_PICKS_VIEWING_PROFILE",
		86:  "SOURCE_COMPONENT_LIKES_BOUNCER",
		87:  "SOURCE_COMPONENT_REWIND",
		88:  "SOURCE_COMPONENT_TOP_PICKS_DEEPLINK",
		89:  "SOURCE_COMPONENT_GOLD_NATIVE_DFP_AD",
		90:  "SOURCE_COMPONENT_SUPERLIKE",
		91:  "SOURCE_COMPONENT_TEASER_SWIPE_LEFT",
		92:  "SOURCE_COMPONENT_TEASER_SWIPE_RIGHT",
		93:  "SOURCE_COMPONENT_TEASER_PROFILE",
		94:  "SOURCE_COMPONENT_LIKES_YOU_ENTRY_POINT",
		95:  "SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_TEASER_TAP",
		96:  "SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_TEASER_SWIPE",
		97:  "SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_SCROLL_TO_BOTTOM",
		98:  "SOURCE_COMPONENT_GOLD_HOME_CTA_BUTTON",
		99:  "SOURCE_COMPONENT_MISSED_MATCH_DEEPLINK",
		100: "SOURCE_COMPONENT_SPLASH_FAN_CARD",
		101: "SOURCE_COMPONENT_SPLASH_PROFILE_CARD",
		102: "SOURCE_COMPONENT_SPLASH_CTA_BUTTON",
		103: "SOURCE_COMPONENT_SECRET_ADMIRER_UPSELL",
		104: "SOURCE_COMPONENT_GOLD_INTRO_CELEBRATION",
		105: "SOURCE_COMPONENT_BOOST_DIALOG_SUMMARY_GOLD_BUTTON",
		106: "SOURCE_COMPONENT_RECENTLY_ACTIVE_MATCH_LIST",
		107: "SOURCE_COMPONENT_CATEGORIES_TEASER_INTERACTION",
		108: "SOURCE_COMPONENT_CATEGORIES_SWIPE_ON_ALL_TOP_PICKS",
		109: "SOURCE_COMPONENT_BOOST_UPSELL",
		110: "SOURCE_COMPONENT_GOLD_HOME_FILTERS",
		111: "SOURCE_COMPONENT_SUB_MERCHANDISING_GOLD_BUTTON",
		112: "SOURCE_COMPONENT_BOOST_REDESIGN_UPSELL",
		113: "SOURCE_COMPONENT_STORE_GOLD_BUTTON",
		114: "SOURCE_COMPONENT_CONTROLLA_PLAT",
		115: "SOURCE_COMPONENT_SETTINGS_PLAT_BUTTON",
		116: "SOURCE_COMPONENT_PLAT_DEEPLINK",
		117: "SOURCE_COMPONENT_PLAT_SWIPENOTE",
		118: "SOURCE_COMPONENT_PLAT_UPGRADE_MODAL",
		119: "SOURCE_COMPONENT_PLAT_PLUS_BOUNCER",
		120: "SOURCE_COMPONENT_PRIORITY_MESSAGES_UPSELL",
		121: "SOURCE_COMPONENT_MY_LIKES_CTA",
		122: "SOURCE_COMPONENT_MY_LIKES_INITIAL_ENTRY_UPSELL",
		123: "SOURCE_COMPONENT_MY_LIKES_BOTTOM_SCROLL_UPSELL",
		124: "SOURCE_COMPONENT_MATCHLIST_PLAT_UPSELL",
		125: "SOURCE_COMPONENT_MY_LIKES_ATTACH_MESSAGE_UPSELL",
		126: "SOURCE_COMPONENT_MATCHLIST_RECENTLY_ACTIVE_UPSELL",
		127: "SOURCE_COMPONENT_SUB_MERCHANDISING_PLAT_BUTTON",
		128: "SOURCE_COMPONENT_BOOST_REDESIGN_PLAT_UPSELL",
		129: "SOURCE_COMPONENT_STORE",
		130: "SOURCE_COMPONENT_GAMEPAD_BOOST",
		131: "SOURCE_COMPONENT_BOOST_END",
		132: "SOURCE_COMPONENT_PLUS_CONTROL_BOOST_BUTTON",
		133: "SOURCE_COMPONENT_SETTINGS_BOOST_BUTTON",
		134: "SOURCE_COMPONENT_DEEPLINK_BOOST",
		135: "SOURCE_COMPONENT_BOOST_DIALOG_INTRO",
		136: "SOURCE_COMPONENT_FAST_MATCH_BOOST",
		137: "SOURCE_COMPONENT_PROFILE_TAB_BOOST",
		138: "SOURCE_COMPONENT_GOLD_HOME_BOOST",
		139: "SOURCE_COMPONENT_MERCHANDISING_DEEPLINK_BOOST",
		140: "SOURCE_COMPONENT_BOOST_UPSELL_MODAL",
		141: "SOURCE_COMPONENT_PAYWALL_DIALOG_SCREEN",
		142: "SOURCE_COMPONENT_PAYWALL_DIALOG_BACK_BUTTON",
		143: "SOURCE_COMPONENT_OFFER_PACKAGE_TILE",
		144: "SOURCE_COMPONENT_SELECT_PACKAGE_CONTINUE_BUTTON",
		145: "SOURCE_COMPONENT_MAKE_PURCHASE_STEP_SCREEN",
		146: "SOURCE_COMPONENT_MAKE_PURCHASE_STEP_BACK_BUTTON",
		147: "SOURCE_COMPONENT_CREDIT_CARD_BUY_NOW_BUTTON",
		148: "SOURCE_COMPONENT_GOOGLE_BUY_NOW_BUTTON",
	}
	SourceComponent_value = map[string]int32{
		"SOURCE_COMPONENT_INVALID":                               0,
		"SOURCE_COMPONENT_BACK_BUTTON":                           18,
		"SOURCE_COMPONENT_BOTTOM_TAB_BAR":                        19,
		"SOURCE_COMPONENT_READ_RECEIPTS":                         20,
		"SOURCE_COMPONENT_TINDER_PLUS_BTN":                       21,
		"SOURCE_COMPONENT_PAYWALL_CONTINUE":                      22,
		"SOURCE_COMPONENT_PAYMENT_CANCEL":                        23,
		"SOURCE_COMPONENT_PAYMENT_SUBSCRIBE":                     24,
		"SOURCE_COMPONENT_PAYMENT_MODAL_OK":                      25,
		"SOURCE_COMPONENT_MERCHANDISING_MODAL":                   26,
		"SOURCE_COMPONENT_PROFILE_UPSELL_ADVERTISEMENT":          27,
		"SOURCE_COMPONENT_SETTINGS_BUTTON":                       28,
		"SOURCE_COMPONENT_NO_THANKS_BUTTON":                      29,
		"SOURCE_COMPONENT_READ_RECEIPTS_EMPTY_CHAT_BUTTON":       30,
		"SOURCE_COMPONENT_GAMEPAD_UNDO":                          31,
		"SOURCE_COMPONENT_PASSPORT_ADD_LOCATION":                 32,
		"SOURCE_COMPONENT_PASSPORT_RECENT_LOCATION":              33,
		"SOURCE_COMPONENT_GAMEPAD_LIKE":                          34,
		"SOURCE_COMPONENT_GAMEPAD_SUPERLIKE":                     35,
		"SOURCE_COMPONENT_BLENDS_ACTIVITY":                       36,
		"SOURCE_COMPONENT_SETTINGS_PLUS_BUTTON":                  37,
		"SOURCE_COMPONENT_EDIT_PROFILE_ACTIVITY":                 38,
		"SOURCE_COMPONENT_CONTROL_UNDO":                          39,
		"SOURCE_COMPONENT_CONTROL_UNLIMITED_SWIPES":              40,
		"SOURCE_COMPONENT_CONTROL_HIDE_ADS":                      41,
		"SOURCE_COMPONENT_CONTROL_SUPERLIKE_FEATURE":             42,
		"SOURCE_COMPONENT_CONTROL_BOOST_FEATURE":                 43,
		"SOURCE_COMPONENT_CONTROL_WHO_SEES_YOU":                  44,
		"SOURCE_COMPONENT_CONTROL_YOUR_PROFILE":                  45,
		"SOURCE_COMPONENT_CONTROL_OTHER_FEATURE":                 46,
		"SOURCE_COMPONENT_CONTROL_PASSPORT":                      47,
		"SOURCE_COMPONENT_CONTROL_PLUS_BUTTON":                   48,
		"SOURCE_COMPONENT_DISCOUNT_AVAILABLE":                    49,
		"SOURCE_COMPONENT_DISCOUNT_REMINDER":                     50,
		"SOURCE_COMPONENT_DISCOUNT_NOTIFICATION":                 51,
		"SOURCE_COMPONENT_BOOST_DIALOG_SUMMARY":                  52,
		"SOURCE_COMPONENT_DEEPLINK_PLUS":                         53,
		"SOURCE_COMPONENT_BOOST_DIALOG_UPSELL_BUTTON":            54,
		"SOURCE_COMPONENT_BOOST_DIALOG_UPDATE":                   55,
		"SOURCE_COMPONENT_SUPERLIKE_DIALOG_UPSELL":               56,
		"SOURCE_COMPONENT_PROFILE_TAB":                           57,
		"SOURCE_COMPONENT_PROFILE_TAB_UNLIMITED_LIKES":           58,
		"SOURCE_COMPONENT_RECS_EXHAUSTED_SETTINGS":               59,
		"SOURCE_COMPONENT_PLUS_NATIVE_DFP_AD":                    60,
		"SOURCE_COMPONENT_LAST_HOUR_AUTO_OPEN":                   61,
		"SOURCE_COMPONENT_MISSED_MATCH_REWIND_PROMO":             62,
		"SOURCE_COMPONENT_LIKES_SENT":                            63,
		"SOURCE_COMPONENT_BOUNCER_BYPASS":                        64,
		"SOURCE_COMPONENT_SUB_MERCHANDISING_PLUS_BUTTON":         65,
		"SOURCE_COMPONENT_STORE_PLUS_BUTTON":                     66,
		"SOURCE_COMPONENT_SUPERLIKE_EXHAUSTED":                   67,
		"SOURCE_COMPONENT_SETTINGS_SUPERLIKE_BUTTON":             68,
		"SOURCE_COMPONENT_PLUS_CONTROL_SUPERLIKE_BUTTON":         69,
		"SOURCE_COMPONENT_DEEPLINK_SUPERLIKE":                    70,
		"SOURCE_COMPONENT_TOP_PICKS":                             71,
		"SOURCE_COMPONENT_PROFILE_TAB_SUPERLIKE":                 72,
		"SOURCE_COMPONENT_UPSELL_SUPERLIKE_COMMON_INTERESTS":     74,
		"SOURCE_COMPONENT_FASTMATCH_MATCHLIST_PREVIEW":           75,
		"SOURCE_COMPONENT_SETTINGS_GOLD_BUTTON":                  76,
		"SOURCE_COMPONENT_FASTMATCH_INTRO":                       77,
		"SOURCE_COMPONENT_DEEPLINK":                              78,
		"SOURCE_COMPONENT_CONTROLLA_GOLD_FEATURE":                79,
		"SOURCE_COMPONENT_CONTROLLA_TOP_PICKS":                   80,
		"SOURCE_COMPONENT_TOP_PICKS_FOOTER_BUTTON":               81,
		"SOURCE_COMPONENT_TOP_PICKS_SCROLL_TO_BOTTOM":            82,
		"SOURCE_COMPONENT_TOP_PICKS_SWIPE_LEFT_ON_REC":           83,
		"SOURCE_COMPONENT_TOP_PICKS_SWIPE_RIGHT_ON_REC":          84,
		"SOURCE_COMPONENT_TOP_PICKS_VIEWING_PROFILE":             85,
		"SOURCE_COMPONENT_LIKES_BOUNCER":                         86,
		"SOURCE_COMPONENT_REWIND":                                87,
		"SOURCE_COMPONENT_TOP_PICKS_DEEPLINK":                    88,
		"SOURCE_COMPONENT_GOLD_NATIVE_DFP_AD":                    89,
		"SOURCE_COMPONENT_SUPERLIKE":                             90,
		"SOURCE_COMPONENT_TEASER_SWIPE_LEFT":                     91,
		"SOURCE_COMPONENT_TEASER_SWIPE_RIGHT":                    92,
		"SOURCE_COMPONENT_TEASER_PROFILE":                        93,
		"SOURCE_COMPONENT_LIKES_YOU_ENTRY_POINT":                 94,
		"SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_TEASER_TAP":       95,
		"SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_TEASER_SWIPE":     96,
		"SOURCE_COMPONENT_GOLD_HOME_FAST_MATCH_SCROLL_TO_BOTTOM": 97,
		"SOURCE_COMPONENT_GOLD_HOME_CTA_BUTTON":                  98,
		"SOURCE_COMPONENT_MISSED_MATCH_DEEPLINK":                 99,
		"SOURCE_COMPONENT_SPLASH_FAN_CARD":                       100,
		"SOURCE_COMPONENT_SPLASH_PROFILE_CARD":                   101,
		"SOURCE_COMPONENT_SPLASH_CTA_BUTTON":                     102,
		"SOURCE_COMPONENT_SECRET_ADMIRER_UPSELL":                 103,
		"SOURCE_COMPONENT_GOLD_INTRO_CELEBRATION":                104,
		"SOURCE_COMPONENT_BOOST_DIALOG_SUMMARY_GOLD_BUTTON":      105,
		"SOURCE_COMPONENT_RECENTLY_ACTIVE_MATCH_LIST":            106,
		"SOURCE_COMPONENT_CATEGORIES_TEASER_INTERACTION":         107,
		"SOURCE_COMPONENT_CATEGORIES_SWIPE_ON_ALL_TOP_PICKS":     108,
		"SOURCE_COMPONENT_BOOST_UPSELL":                          109,
		"SOURCE_COMPONENT_GOLD_HOME_FILTERS":                     110,
		"SOURCE_COMPONENT_SUB_MERCHANDISING_GOLD_BUTTON":         111,
		"SOURCE_COMPONENT_BOOST_REDESIGN_UPSELL":                 112,
		"SOURCE_COMPONENT_STORE_GOLD_BUTTON":                     113,
		"SOURCE_COMPONENT_CONTROLLA_PLAT":                        114,
		"SOURCE_COMPONENT_SETTINGS_PLAT_BUTTON":                  115,
		"SOURCE_COMPONENT_PLAT_DEEPLINK":                         116,
		"SOURCE_COMPONENT_PLAT_SWIPENOTE":                        117,
		"SOURCE_COMPONENT_PLAT_UPGRADE_MODAL":                    118,
		"SOURCE_COMPONENT_PLAT_PLUS_BOUNCER":                     119,
		"SOURCE_COMPONENT_PRIORITY_MESSAGES_UPSELL":              120,
		"SOURCE_COMPONENT_MY_LIKES_CTA":                          121,
		"SOURCE_COMPONENT_MY_LIKES_INITIAL_ENTRY_UPSELL":         122,
		"SOURCE_COMPONENT_MY_LIKES_BOTTOM_SCROLL_UPSELL":         123,
		"SOURCE_COMPONENT_MATCHLIST_PLAT_UPSELL":                 124,
		"SOURCE_COMPONENT_MY_LIKES_ATTACH_MESSAGE_UPSELL":        125,
		"SOURCE_COMPONENT_MATCHLIST_RECENTLY_ACTIVE_UPSELL":      126,
		"SOURCE_COMPONENT_SUB_MERCHANDISING_PLAT_BUTTON":         127,
		"SOURCE_COMPONENT_BOOST_REDESIGN_PLAT_UPSELL":            128,
		"SOURCE_COMPONENT_STORE":                                 129,
		"SOURCE_COMPONENT_GAMEPAD_BOOST":                         130,
		"SOURCE_COMPONENT_BOOST_END":                             131,
		"SOURCE_COMPONENT_PLUS_CONTROL_BOOST_BUTTON":             132,
		"SOURCE_COMPONENT_SETTINGS_BOOST_BUTTON":                 133,
		"SOURCE_COMPONENT_DEEPLINK_BOOST":                        134,
		"SOURCE_COMPONENT_BOOST_DIALOG_INTRO":                    135,
		"SOURCE_COMPONENT_FAST_MATCH_BOOST":                      136,
		"SOURCE_COMPONENT_PROFILE_TAB_BOOST":                     137,
		"SOURCE_COMPONENT_GOLD_HOME_BOOST":                       138,
		"SOURCE_COMPONENT_MERCHANDISING_DEEPLINK_BOOST":          139,
		"SOURCE_COMPONENT_BOOST_UPSELL_MODAL":                    140,
		"SOURCE_COMPONENT_PAYWALL_DIALOG_SCREEN":                 141,
		"SOURCE_COMPONENT_PAYWALL_DIALOG_BACK_BUTTON":            142,
		"SOURCE_COMPONENT_OFFER_PACKAGE_TILE":                    143,
		"SOURCE_COMPONENT_SELECT_PACKAGE_CONTINUE_BUTTON":        144,
		"SOURCE_COMPONENT_MAKE_PURCHASE_STEP_SCREEN":             145,
		"SOURCE_COMPONENT_MAKE_PURCHASE_STEP_BACK_BUTTON":        146,
		"SOURCE_COMPONENT_CREDIT_CARD_BUY_NOW_BUTTON":            147,
		"SOURCE_COMPONENT_GOOGLE_BUY_NOW_BUTTON":                 148,
	}
)

func (x SourceComponent) Enum() *SourceComponent {
	p := new(SourceComponent)
	*p = x
	return p
}

func (x SourceComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[8].Descriptor()
}

func (SourceComponent) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[8]
}

func (x SourceComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceComponent.Descriptor instead.
func (SourceComponent) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{8}
}

type Gender int32

const (
	Gender_GENDER_INVALID Gender = 0
	Gender_GENDER_MALE    Gender = 1
	Gender_GENDER_FEMALE  Gender = 2
	Gender_GENDER_OTHER   Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_INVALID",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
		3: "GENDER_OTHER",
	}
	Gender_value = map[string]int32{
		"GENDER_INVALID": 0,
		"GENDER_MALE":    1,
		"GENDER_FEMALE":  2,
		"GENDER_OTHER":   3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[9].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[9]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{9}
}

type UserType int32

const (
	UserType_USER_TYPE_INVALID  UserType = 0
	UserType_USER_TYPE_INTERNAL UserType = 1
	UserType_USER_TYPE_EXTERNAL UserType = 2
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "USER_TYPE_INVALID",
		1: "USER_TYPE_INTERNAL",
		2: "USER_TYPE_EXTERNAL",
	}
	UserType_value = map[string]int32{
		"USER_TYPE_INVALID":  0,
		"USER_TYPE_INTERNAL": 1,
		"USER_TYPE_EXTERNAL": 2,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[10].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[10]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{10}
}

type Adapter int32

const (
	Adapter_ADAPTER_INVALID      Adapter = 0
	Adapter_ADAPTER_EVENT_RECORD Adapter = 1
)

// Enum value maps for Adapter.
var (
	Adapter_name = map[int32]string{
		0: "ADAPTER_INVALID",
		1: "ADAPTER_EVENT_RECORD",
	}
	Adapter_value = map[string]int32{
		"ADAPTER_INVALID":      0,
		"ADAPTER_EVENT_RECORD": 1,
	}
)

func (x Adapter) Enum() *Adapter {
	p := new(Adapter)
	*p = x
	return p
}

func (x Adapter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adapter) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[11].Descriptor()
}

func (Adapter) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[11]
}

func (x Adapter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adapter.Descriptor instead.
func (Adapter) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{11}
}

type EventAttribute int32

const (
	EventAttribute_INVALID                         EventAttribute = 0
	EventAttribute_EVENT_SERVER_TIME               EventAttribute = 1
	EventAttribute_EVENT_DERIVED_COUNTRY           EventAttribute = 2
	EventAttribute_APP_EVENT_ID                    EventAttribute = 30
	EventAttribute_APP_EVENT_CREATE_TIME           EventAttribute = 31
	EventAttribute_APP_NAME                        EventAttribute = 50
	EventAttribute_APP_VERSION                     EventAttribute = 51
	EventAttribute_APP_SESSION_ID                  EventAttribute = 70
	EventAttribute_APP_SESSION_TIME_ELAPSED        EventAttribute = 71
	EventAttribute_AUTH_ID                         EventAttribute = 90
	EventAttribute_AUTH_SESSION_ID                 EventAttribute = 91
	EventAttribute_DEVICE_ID                       EventAttribute = 120
	EventAttribute_DEVICE_PLATFORM                 EventAttribute = 121
	EventAttribute_DEVICE_OS_VERSION               EventAttribute = 122
	EventAttribute_DEVICE_MANUFACTURER             EventAttribute = 123
	EventAttribute_DEVICE_MODEL                    EventAttribute = 124
	EventAttribute_DEVICE_PERSISTENT_ID            EventAttribute = 125
	EventAttribute_DEVICE_LANGUAGE                 EventAttribute = 126
	EventAttribute_DEVICE_COUNTRY_CODE             EventAttribute = 127
	EventAttribute_DEVICE_NETWORK_PROVIDER_NAME    EventAttribute = 128
	EventAttribute_DEVICE_NETWORK_PROVIDER_TYPE    EventAttribute = 129
	EventAttribute_DEVICE_BATTERY_LEVEL_PERCENT    EventAttribute = 130
	EventAttribute_DEVICE_LOWER_POWER_MODE_ENABLED EventAttribute = 131
	EventAttribute_DEVICE_TOTAL_RAM_BYTES          EventAttribute = 132
	EventAttribute_DEVICE_FREE_RAM_BYTES           EventAttribute = 133
	EventAttribute_DEVICE_RAM_USED_BY_APP_BYTES    EventAttribute = 134
	EventAttribute_IOS_DEVICE_ID                   EventAttribute = 200
	EventAttribute_IOS_OS_VERSION                  EventAttribute = 201
	EventAttribute_IOS_COUNTRY                     EventAttribute = 202
	EventAttribute_IOS_IS_JAILBROKEN               EventAttribute = 203
	EventAttribute_ANDROID_PLATFORM_VARIANT        EventAttribute = 280
	EventAttribute_ANDROID_INSTANCE_ID             EventAttribute = 281
	EventAttribute_ANDROID_DEVICE_ID               EventAttribute = 282
	EventAttribute_ANDROID_OS_VERSION              EventAttribute = 283
	EventAttribute_ANDROID_IS_ROOTED               EventAttribute = 284
	EventAttribute_ANDROID_STORE_VARIANT           EventAttribute = 285
	EventAttribute_BROWSER_NAME                    EventAttribute = 350
	EventAttribute_BROWSER_VERSION                 EventAttribute = 351
	EventAttribute_LOCATION_TIME                   EventAttribute = 380
	EventAttribute_LOCATION_LATITUDE               EventAttribute = 381
	EventAttribute_LOCATION_LONGITUDE              EventAttribute = 382
	EventAttribute_USER_UID                        EventAttribute = 430
	EventAttribute_USER_TYPE                       EventAttribute = 431
	EventAttribute_USER_GENDER                     EventAttribute = 432
	EventAttribute_USER_TARGET_GENDER              EventAttribute = 433
	EventAttribute_USER_SESSION_DURATION           EventAttribute = 434
	EventAttribute_USER_SESSION_ID                 EventAttribute = 435
	EventAttribute_SERVER_EVENT_ID                 EventAttribute = 500
	EventAttribute_SERVER_EVENT_CREATE_TIME        EventAttribute = 501
	EventAttribute_SERVICE_NAME                    EventAttribute = 520
	EventAttribute_SERVICE_VERSION                 EventAttribute = 521
	EventAttribute_SERVER_OPERATING_SYSTEM         EventAttribute = 750
	EventAttribute_WINDOWS_VERSION                 EventAttribute = 771
	EventAttribute_LINUX_VERSION                   EventAttribute = 772
	EventAttribute_DARWIN_VERSION                  EventAttribute = 773
	EventAttribute_OS_VERSION                      EventAttribute = 774
	EventAttribute_HUBBLE_INSTRUMENT_ID            EventAttribute = 900
	EventAttribute_HUBBLE_INSTRUMENT_TYPE          EventAttribute = 901
	EventAttribute_HUBBLE_ENTITY_TYPE              EventAttribute = 902
	EventAttribute_HUBBLE_ENTITY_ID                EventAttribute = 903
	EventAttribute_HUBBLE_SERVER_INSTRUMENT_ID     EventAttribute = 920
)

// Enum value maps for EventAttribute.
var (
	EventAttribute_name = map[int32]string{
		0:   "INVALID",
		1:   "EVENT_SERVER_TIME",
		2:   "EVENT_DERIVED_COUNTRY",
		30:  "APP_EVENT_ID",
		31:  "APP_EVENT_CREATE_TIME",
		50:  "APP_NAME",
		51:  "APP_VERSION",
		70:  "APP_SESSION_ID",
		71:  "APP_SESSION_TIME_ELAPSED",
		90:  "AUTH_ID",
		91:  "AUTH_SESSION_ID",
		120: "DEVICE_ID",
		121: "DEVICE_PLATFORM",
		122: "DEVICE_OS_VERSION",
		123: "DEVICE_MANUFACTURER",
		124: "DEVICE_MODEL",
		125: "DEVICE_PERSISTENT_ID",
		126: "DEVICE_LANGUAGE",
		127: "DEVICE_COUNTRY_CODE",
		128: "DEVICE_NETWORK_PROVIDER_NAME",
		129: "DEVICE_NETWORK_PROVIDER_TYPE",
		130: "DEVICE_BATTERY_LEVEL_PERCENT",
		131: "DEVICE_LOWER_POWER_MODE_ENABLED",
		132: "DEVICE_TOTAL_RAM_BYTES",
		133: "DEVICE_FREE_RAM_BYTES",
		134: "DEVICE_RAM_USED_BY_APP_BYTES",
		200: "IOS_DEVICE_ID",
		201: "IOS_OS_VERSION",
		202: "IOS_COUNTRY",
		203: "IOS_IS_JAILBROKEN",
		280: "ANDROID_PLATFORM_VARIANT",
		281: "ANDROID_INSTANCE_ID",
		282: "ANDROID_DEVICE_ID",
		283: "ANDROID_OS_VERSION",
		284: "ANDROID_IS_ROOTED",
		285: "ANDROID_STORE_VARIANT",
		350: "BROWSER_NAME",
		351: "BROWSER_VERSION",
		380: "LOCATION_TIME",
		381: "LOCATION_LATITUDE",
		382: "LOCATION_LONGITUDE",
		430: "USER_UID",
		431: "USER_TYPE",
		432: "USER_GENDER",
		433: "USER_TARGET_GENDER",
		434: "USER_SESSION_DURATION",
		435: "USER_SESSION_ID",
		500: "SERVER_EVENT_ID",
		501: "SERVER_EVENT_CREATE_TIME",
		520: "SERVICE_NAME",
		521: "SERVICE_VERSION",
		750: "SERVER_OPERATING_SYSTEM",
		771: "WINDOWS_VERSION",
		772: "LINUX_VERSION",
		773: "DARWIN_VERSION",
		774: "OS_VERSION",
		900: "HUBBLE_INSTRUMENT_ID",
		901: "HUBBLE_INSTRUMENT_TYPE",
		902: "HUBBLE_ENTITY_TYPE",
		903: "HUBBLE_ENTITY_ID",
		920: "HUBBLE_SERVER_INSTRUMENT_ID",
	}
	EventAttribute_value = map[string]int32{
		"INVALID":                         0,
		"EVENT_SERVER_TIME":               1,
		"EVENT_DERIVED_COUNTRY":           2,
		"APP_EVENT_ID":                    30,
		"APP_EVENT_CREATE_TIME":           31,
		"APP_NAME":                        50,
		"APP_VERSION":                     51,
		"APP_SESSION_ID":                  70,
		"APP_SESSION_TIME_ELAPSED":        71,
		"AUTH_ID":                         90,
		"AUTH_SESSION_ID":                 91,
		"DEVICE_ID":                       120,
		"DEVICE_PLATFORM":                 121,
		"DEVICE_OS_VERSION":               122,
		"DEVICE_MANUFACTURER":             123,
		"DEVICE_MODEL":                    124,
		"DEVICE_PERSISTENT_ID":            125,
		"DEVICE_LANGUAGE":                 126,
		"DEVICE_COUNTRY_CODE":             127,
		"DEVICE_NETWORK_PROVIDER_NAME":    128,
		"DEVICE_NETWORK_PROVIDER_TYPE":    129,
		"DEVICE_BATTERY_LEVEL_PERCENT":    130,
		"DEVICE_LOWER_POWER_MODE_ENABLED": 131,
		"DEVICE_TOTAL_RAM_BYTES":          132,
		"DEVICE_FREE_RAM_BYTES":           133,
		"DEVICE_RAM_USED_BY_APP_BYTES":    134,
		"IOS_DEVICE_ID":                   200,
		"IOS_OS_VERSION":                  201,
		"IOS_COUNTRY":                     202,
		"IOS_IS_JAILBROKEN":               203,
		"ANDROID_PLATFORM_VARIANT":        280,
		"ANDROID_INSTANCE_ID":             281,
		"ANDROID_DEVICE_ID":               282,
		"ANDROID_OS_VERSION":              283,
		"ANDROID_IS_ROOTED":               284,
		"ANDROID_STORE_VARIANT":           285,
		"BROWSER_NAME":                    350,
		"BROWSER_VERSION":                 351,
		"LOCATION_TIME":                   380,
		"LOCATION_LATITUDE":               381,
		"LOCATION_LONGITUDE":              382,
		"USER_UID":                        430,
		"USER_TYPE":                       431,
		"USER_GENDER":                     432,
		"USER_TARGET_GENDER":              433,
		"USER_SESSION_DURATION":           434,
		"USER_SESSION_ID":                 435,
		"SERVER_EVENT_ID":                 500,
		"SERVER_EVENT_CREATE_TIME":        501,
		"SERVICE_NAME":                    520,
		"SERVICE_VERSION":                 521,
		"SERVER_OPERATING_SYSTEM":         750,
		"WINDOWS_VERSION":                 771,
		"LINUX_VERSION":                   772,
		"DARWIN_VERSION":                  773,
		"OS_VERSION":                      774,
		"HUBBLE_INSTRUMENT_ID":            900,
		"HUBBLE_INSTRUMENT_TYPE":          901,
		"HUBBLE_ENTITY_TYPE":              902,
		"HUBBLE_ENTITY_ID":                903,
		"HUBBLE_SERVER_INSTRUMENT_ID":     920,
	}
)

func (x EventAttribute) Enum() *EventAttribute {
	p := new(EventAttribute)
	*p = x
	return p
}

func (x EventAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[12].Descriptor()
}

func (EventAttribute) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[12]
}

func (x EventAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventAttribute.Descriptor instead.
func (EventAttribute) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{12}
}

type ExperienceId int32

const (
	ExperienceId_EXPERIENCE_ID_INVALID        ExperienceId = 0
	ExperienceId_EXPERIENCE_ID_CHAT           ExperienceId = 1
	ExperienceId_EXPERIENCE_ID_LIKES_YOU      ExperienceId = 2
	ExperienceId_EXPERIENCE_ID_RECS           ExperienceId = 3
	ExperienceId_EXPERIENCE_ID_PROFILE        ExperienceId = 4
	ExperienceId_EXPERIENCE_ID_SETTINGS       ExperienceId = 5
	ExperienceId_EXPERIENCE_ID_EXPLORE        ExperienceId = 6
	ExperienceId_EXPERIENCE_ID_MATCH_LIST     ExperienceId = 7
	ExperienceId_EXPERIENCE_ID_GOLD_HOME      ExperienceId = 8
	ExperienceId_EXPERIENCE_ID_HANGOUTS_LOBBY ExperienceId = 9
)

// Enum value maps for ExperienceId.
var (
	ExperienceId_name = map[int32]string{
		0: "EXPERIENCE_ID_INVALID",
		1: "EXPERIENCE_ID_CHAT",
		2: "EXPERIENCE_ID_LIKES_YOU",
		3: "EXPERIENCE_ID_RECS",
		4: "EXPERIENCE_ID_PROFILE",
		5: "EXPERIENCE_ID_SETTINGS",
		6: "EXPERIENCE_ID_EXPLORE",
		7: "EXPERIENCE_ID_MATCH_LIST",
		8: "EXPERIENCE_ID_GOLD_HOME",
		9: "EXPERIENCE_ID_HANGOUTS_LOBBY",
	}
	ExperienceId_value = map[string]int32{
		"EXPERIENCE_ID_INVALID":        0,
		"EXPERIENCE_ID_CHAT":           1,
		"EXPERIENCE_ID_LIKES_YOU":      2,
		"EXPERIENCE_ID_RECS":           3,
		"EXPERIENCE_ID_PROFILE":        4,
		"EXPERIENCE_ID_SETTINGS":       5,
		"EXPERIENCE_ID_EXPLORE":        6,
		"EXPERIENCE_ID_MATCH_LIST":     7,
		"EXPERIENCE_ID_GOLD_HOME":      8,
		"EXPERIENCE_ID_HANGOUTS_LOBBY": 9,
	}
)

func (x ExperienceId) Enum() *ExperienceId {
	p := new(ExperienceId)
	*p = x
	return p
}

func (x ExperienceId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExperienceId) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[13].Descriptor()
}

func (ExperienceId) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[13]
}

func (x ExperienceId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExperienceId.Descriptor instead.
func (ExperienceId) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{13}
}

type TimeUnit int32

const (
	TimeUnit_TIME_UNIT_INVALID      TimeUnit = 0
	TimeUnit_TIME_UNIT_MILLISECONDS TimeUnit = 1
	TimeUnit_TIME_UNIT_SECONDS      TimeUnit = 2
	TimeUnit_TIME_UNIT_MINUTES      TimeUnit = 3
	TimeUnit_TIME_UNIT_HOURS        TimeUnit = 4
	TimeUnit_TIME_UNIT_NANOSECONDS  TimeUnit = 5
	TimeUnit_TIME_UNIT_MICROSECONDS TimeUnit = 6
)

// Enum value maps for TimeUnit.
var (
	TimeUnit_name = map[int32]string{
		0: "TIME_UNIT_INVALID",
		1: "TIME_UNIT_MILLISECONDS",
		2: "TIME_UNIT_SECONDS",
		3: "TIME_UNIT_MINUTES",
		4: "TIME_UNIT_HOURS",
		5: "TIME_UNIT_NANOSECONDS",
		6: "TIME_UNIT_MICROSECONDS",
	}
	TimeUnit_value = map[string]int32{
		"TIME_UNIT_INVALID":      0,
		"TIME_UNIT_MILLISECONDS": 1,
		"TIME_UNIT_SECONDS":      2,
		"TIME_UNIT_MINUTES":      3,
		"TIME_UNIT_HOURS":        4,
		"TIME_UNIT_NANOSECONDS":  5,
		"TIME_UNIT_MICROSECONDS": 6,
	}
)

func (x TimeUnit) Enum() *TimeUnit {
	p := new(TimeUnit)
	*p = x
	return p
}

func (x TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[14].Descriptor()
}

func (TimeUnit) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[14]
}

func (x TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnit.Descriptor instead.
func (TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{14}
}

type PlatformVariant int32

const (
	PlatformVariant_PLATFORM_VARIANT_INVALID PlatformVariant = 0
	PlatformVariant_PLATFORM_VARIANT_GOOGLE  PlatformVariant = 1
	PlatformVariant_PLATFORM_VARIANT_HUAWEI  PlatformVariant = 2
)

// Enum value maps for PlatformVariant.
var (
	PlatformVariant_name = map[int32]string{
		0: "PLATFORM_VARIANT_INVALID",
		1: "PLATFORM_VARIANT_GOOGLE",
		2: "PLATFORM_VARIANT_HUAWEI",
	}
	PlatformVariant_value = map[string]int32{
		"PLATFORM_VARIANT_INVALID": 0,
		"PLATFORM_VARIANT_GOOGLE":  1,
		"PLATFORM_VARIANT_HUAWEI":  2,
	}
)

func (x PlatformVariant) Enum() *PlatformVariant {
	p := new(PlatformVariant)
	*p = x
	return p
}

func (x PlatformVariant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformVariant) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[15].Descriptor()
}

func (PlatformVariant) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[15]
}

func (x PlatformVariant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformVariant.Descriptor instead.
func (PlatformVariant) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{15}
}

type StoreVariant int32

const (
	StoreVariant_STORE_VARIANT_INVALID    StoreVariant = 0
	StoreVariant_STORE_VARIANT_HUAWEI     StoreVariant = 1
	StoreVariant_STORE_VARIANT_OPPO       StoreVariant = 2
	StoreVariant_STORE_VARIANT_PLAY_STORE StoreVariant = 3
	StoreVariant_STORE_VARIANT_SAMSUNG    StoreVariant = 4
	StoreVariant_STORE_VARIANT_XIAOMI     StoreVariant = 5
	StoreVariant_STORE_VARIANT_VIVO       StoreVariant = 6
)

// Enum value maps for StoreVariant.
var (
	StoreVariant_name = map[int32]string{
		0: "STORE_VARIANT_INVALID",
		1: "STORE_VARIANT_HUAWEI",
		2: "STORE_VARIANT_OPPO",
		3: "STORE_VARIANT_PLAY_STORE",
		4: "STORE_VARIANT_SAMSUNG",
		5: "STORE_VARIANT_XIAOMI",
		6: "STORE_VARIANT_VIVO",
	}
	StoreVariant_value = map[string]int32{
		"STORE_VARIANT_INVALID":    0,
		"STORE_VARIANT_HUAWEI":     1,
		"STORE_VARIANT_OPPO":       2,
		"STORE_VARIANT_PLAY_STORE": 3,
		"STORE_VARIANT_SAMSUNG":    4,
		"STORE_VARIANT_XIAOMI":     5,
		"STORE_VARIANT_VIVO":       6,
	}
)

func (x StoreVariant) Enum() *StoreVariant {
	p := new(StoreVariant)
	*p = x
	return p
}

func (x StoreVariant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreVariant) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[16].Descriptor()
}

func (StoreVariant) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[16]
}

func (x StoreVariant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreVariant.Descriptor instead.
func (StoreVariant) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{16}
}

type CountryCode int32

const (
	CountryCode_COUNTRY_CODE_INVALID CountryCode = 0
	CountryCode_COUNTRY_CODE_AC      CountryCode = 1
	CountryCode_COUNTRY_CODE_AD      CountryCode = 2
	CountryCode_COUNTRY_CODE_AE      CountryCode = 3
	CountryCode_COUNTRY_CODE_AF      CountryCode = 4
	CountryCode_COUNTRY_CODE_AG      CountryCode = 5
	CountryCode_COUNTRY_CODE_AI      CountryCode = 6
	CountryCode_COUNTRY_CODE_AL      CountryCode = 7
	CountryCode_COUNTRY_CODE_AM      CountryCode = 8
	CountryCode_COUNTRY_CODE_AN      CountryCode = 9
	CountryCode_COUNTRY_CODE_AO      CountryCode = 10
	CountryCode_COUNTRY_CODE_AQ      CountryCode = 11
	CountryCode_COUNTRY_CODE_AR      CountryCode = 12
	CountryCode_COUNTRY_CODE_AS      CountryCode = 13
	CountryCode_COUNTRY_CODE_AT      CountryCode = 14
	CountryCode_COUNTRY_CODE_AU      CountryCode = 15
	CountryCode_COUNTRY_CODE_AW      CountryCode = 16
	CountryCode_COUNTRY_CODE_AX      CountryCode = 17
	CountryCode_COUNTRY_CODE_AZ      CountryCode = 18
	CountryCode_COUNTRY_CODE_BA      CountryCode = 19
	CountryCode_COUNTRY_CODE_BB      CountryCode = 20
	CountryCode_COUNTRY_CODE_BD      CountryCode = 21
	CountryCode_COUNTRY_CODE_BE      CountryCode = 22
	CountryCode_COUNTRY_CODE_BF      CountryCode = 23
	CountryCode_COUNTRY_CODE_BG      CountryCode = 24
	CountryCode_COUNTRY_CODE_BH      CountryCode = 25
	CountryCode_COUNTRY_CODE_BI      CountryCode = 26
	CountryCode_COUNTRY_CODE_BJ      CountryCode = 27
	CountryCode_COUNTRY_CODE_BL      CountryCode = 28
	CountryCode_COUNTRY_CODE_BM      CountryCode = 29
	CountryCode_COUNTRY_CODE_BN      CountryCode = 30
	CountryCode_COUNTRY_CODE_BO      CountryCode = 31
	CountryCode_COUNTRY_CODE_BQ      CountryCode = 32
	CountryCode_COUNTRY_CODE_BR      CountryCode = 33
	CountryCode_COUNTRY_CODE_BS      CountryCode = 34
	CountryCode_COUNTRY_CODE_BT      CountryCode = 35
	CountryCode_COUNTRY_CODE_BV      CountryCode = 36
	CountryCode_COUNTRY_CODE_BW      CountryCode = 37
	CountryCode_COUNTRY_CODE_BY      CountryCode = 38
	CountryCode_COUNTRY_CODE_BZ      CountryCode = 39
	CountryCode_COUNTRY_CODE_CA      CountryCode = 40
	CountryCode_COUNTRY_CODE_CC      CountryCode = 41
	CountryCode_COUNTRY_CODE_CD      CountryCode = 42
	CountryCode_COUNTRY_CODE_CF      CountryCode = 43
	CountryCode_COUNTRY_CODE_CG      CountryCode = 44
	CountryCode_COUNTRY_CODE_CH      CountryCode = 45
	CountryCode_COUNTRY_CODE_CI      CountryCode = 46
	CountryCode_COUNTRY_CODE_CK      CountryCode = 47
	CountryCode_COUNTRY_CODE_CL      CountryCode = 48
	CountryCode_COUNTRY_CODE_CM      CountryCode = 49
	CountryCode_COUNTRY_CODE_CN      CountryCode = 50
	CountryCode_COUNTRY_CODE_CO      CountryCode = 51
	CountryCode_COUNTRY_CODE_CP      CountryCode = 52
	CountryCode_COUNTRY_CODE_CR      CountryCode = 53
	CountryCode_COUNTRY_CODE_CU      CountryCode = 54
	CountryCode_COUNTRY_CODE_CV      CountryCode = 55
	CountryCode_COUNTRY_CODE_CW      CountryCode = 56
	CountryCode_COUNTRY_CODE_CX      CountryCode = 57
	CountryCode_COUNTRY_CODE_CY      CountryCode = 58
	CountryCode_COUNTRY_CODE_CZ      CountryCode = 59
	CountryCode_COUNTRY_CODE_DE      CountryCode = 60
	CountryCode_COUNTRY_CODE_DG      CountryCode = 61
	CountryCode_COUNTRY_CODE_DJ      CountryCode = 63
	CountryCode_COUNTRY_CODE_DK      CountryCode = 64
	CountryCode_COUNTRY_CODE_DM      CountryCode = 65
	CountryCode_COUNTRY_CODE_DO      CountryCode = 66
	CountryCode_COUNTRY_CODE_DZ      CountryCode = 67
	CountryCode_COUNTRY_CODE_EA      CountryCode = 68
	CountryCode_COUNTRY_CODE_EC      CountryCode = 69
	CountryCode_COUNTRY_CODE_EE      CountryCode = 70
	CountryCode_COUNTRY_CODE_EG      CountryCode = 71
	CountryCode_COUNTRY_CODE_EH      CountryCode = 72
	CountryCode_COUNTRY_CODE_ER      CountryCode = 73
	CountryCode_COUNTRY_CODE_ES      CountryCode = 74
	CountryCode_COUNTRY_CODE_ET      CountryCode = 75
	CountryCode_COUNTRY_CODE_FI      CountryCode = 76
	CountryCode_COUNTRY_CODE_FJ      CountryCode = 77
	CountryCode_COUNTRY_CODE_FK      CountryCode = 78
	CountryCode_COUNTRY_CODE_FM      CountryCode = 79
	CountryCode_COUNTRY_CODE_FO      CountryCode = 80
	CountryCode_COUNTRY_CODE_FR      CountryCode = 81
	CountryCode_COUNTRY_CODE_GA      CountryCode = 82
	CountryCode_COUNTRY_CODE_GB      CountryCode = 83
	CountryCode_COUNTRY_CODE_GD      CountryCode = 84
	CountryCode_COUNTRY_CODE_GE      CountryCode = 85
	CountryCode_COUNTRY_CODE_GF      CountryCode = 86
	CountryCode_COUNTRY_CODE_GG      CountryCode = 87
	CountryCode_COUNTRY_CODE_GH      CountryCode = 88
	CountryCode_COUNTRY_CODE_GI      CountryCode = 89
	CountryCode_COUNTRY_CODE_GL      CountryCode = 90
	CountryCode_COUNTRY_CODE_GM      CountryCode = 91
	CountryCode_COUNTRY_CODE_GN      CountryCode = 92
	CountryCode_COUNTRY_CODE_GP      CountryCode = 93
	CountryCode_COUNTRY_CODE_GQ      CountryCode = 94
	CountryCode_COUNTRY_CODE_GR      CountryCode = 95
	CountryCode_COUNTRY_CODE_GS      CountryCode = 96
	CountryCode_COUNTRY_CODE_GT      CountryCode = 97
	CountryCode_COUNTRY_CODE_GU      CountryCode = 99
	CountryCode_COUNTRY_CODE_GW      CountryCode = 100
	CountryCode_COUNTRY_CODE_GY      CountryCode = 101
	CountryCode_COUNTRY_CODE_HK      CountryCode = 102
	CountryCode_COUNTRY_CODE_HM      CountryCode = 103
	CountryCode_COUNTRY_CODE_HN      CountryCode = 104
	CountryCode_COUNTRY_CODE_HR      CountryCode = 105
	CountryCode_COUNTRY_CODE_HT      CountryCode = 106
	CountryCode_COUNTRY_CODE_HU      CountryCode = 107
	CountryCode_COUNTRY_CODE_IC      CountryCode = 108
	CountryCode_COUNTRY_CODE_ID      CountryCode = 109
	CountryCode_COUNTRY_CODE_IE      CountryCode = 110
	CountryCode_COUNTRY_CODE_IL      CountryCode = 111
	CountryCode_COUNTRY_CODE_IM      CountryCode = 112
	CountryCode_COUNTRY_CODE_IN      CountryCode = 113
	CountryCode_COUNTRY_CODE_IO      CountryCode = 114
	CountryCode_COUNTRY_CODE_IQ      CountryCode = 115
	CountryCode_COUNTRY_CODE_IR      CountryCode = 116
	CountryCode_COUNTRY_CODE_IS      CountryCode = 117
	CountryCode_COUNTRY_CODE_IT      CountryCode = 118
	CountryCode_COUNTRY_CODE_JE      CountryCode = 119
	CountryCode_COUNTRY_CODE_JM      CountryCode = 120
	CountryCode_COUNTRY_CODE_JO      CountryCode = 121
	CountryCode_COUNTRY_CODE_JP      CountryCode = 122
	CountryCode_COUNTRY_CODE_KE      CountryCode = 123
	CountryCode_COUNTRY_CODE_KG      CountryCode = 124
	CountryCode_COUNTRY_CODE_KH      CountryCode = 125
	CountryCode_COUNTRY_CODE_KI      CountryCode = 126
	CountryCode_COUNTRY_CODE_KM      CountryCode = 127
	CountryCode_COUNTRY_CODE_KN      CountryCode = 128
	CountryCode_COUNTRY_CODE_KP      CountryCode = 129
	CountryCode_COUNTRY_CODE_KR      CountryCode = 130
	CountryCode_COUNTRY_CODE_KW      CountryCode = 131
	CountryCode_COUNTRY_CODE_KY      CountryCode = 132
	CountryCode_COUNTRY_CODE_KZ      CountryCode = 133
	CountryCode_COUNTRY_CODE_LA      CountryCode = 134
	CountryCode_COUNTRY_CODE_LB      CountryCode = 135
	CountryCode_COUNTRY_CODE_LC      CountryCode = 136
	CountryCode_COUNTRY_CODE_LI      CountryCode = 137
	CountryCode_COUNTRY_CODE_LK      CountryCode = 138
	CountryCode_COUNTRY_CODE_LR      CountryCode = 139
	CountryCode_COUNTRY_CODE_LS      CountryCode = 140
	CountryCode_COUNTRY_CODE_LT      CountryCode = 141
	CountryCode_COUNTRY_CODE_LU      CountryCode = 142
	CountryCode_COUNTRY_CODE_LV      CountryCode = 143
	CountryCode_COUNTRY_CODE_LY      CountryCode = 144
	CountryCode_COUNTRY_CODE_MA      CountryCode = 145
	CountryCode_COUNTRY_CODE_MC      CountryCode = 146
	CountryCode_COUNTRY_CODE_MD      CountryCode = 147
	CountryCode_COUNTRY_CODE_ME      CountryCode = 148
	CountryCode_COUNTRY_CODE_MF      CountryCode = 149
	CountryCode_COUNTRY_CODE_MG      CountryCode = 150
	CountryCode_COUNTRY_CODE_MH      CountryCode = 151
	CountryCode_COUNTRY_CODE_MK      CountryCode = 152
	CountryCode_COUNTRY_CODE_ML      CountryCode = 153
	CountryCode_COUNTRY_CODE_MM      CountryCode = 154
	CountryCode_COUNTRY_CODE_MN      CountryCode = 155
	CountryCode_COUNTRY_CODE_MO      CountryCode = 156
	CountryCode_COUNTRY_CODE_MP      CountryCode = 157
	CountryCode_COUNTRY_CODE_MQ      CountryCode = 158
	CountryCode_COUNTRY_CODE_MR      CountryCode = 159
	CountryCode_COUNTRY_CODE_MS      CountryCode = 160
	CountryCode_COUNTRY_CODE_MT      CountryCode = 161
	CountryCode_COUNTRY_CODE_MU      CountryCode = 162
	CountryCode_COUNTRY_CODE_MV      CountryCode = 163
	CountryCode_COUNTRY_CODE_MW      CountryCode = 164
	CountryCode_COUNTRY_CODE_MX      CountryCode = 165
	CountryCode_COUNTRY_CODE_MY      CountryCode = 166
	CountryCode_COUNTRY_CODE_MZ      CountryCode = 167
	CountryCode_COUNTRY_CODE_NA      CountryCode = 168
	CountryCode_COUNTRY_CODE_NC      CountryCode = 169
	CountryCode_COUNTRY_CODE_NE      CountryCode = 170
	CountryCode_COUNTRY_CODE_NF      CountryCode = 171
	CountryCode_COUNTRY_CODE_NG      CountryCode = 172
	CountryCode_COUNTRY_CODE_NI      CountryCode = 173
	CountryCode_COUNTRY_CODE_NL      CountryCode = 174
	CountryCode_COUNTRY_CODE_NO      CountryCode = 175
	CountryCode_COUNTRY_CODE_NP      CountryCode = 176
	CountryCode_COUNTRY_CODE_NR      CountryCode = 177
	CountryCode_COUNTRY_CODE_NU      CountryCode = 178
	CountryCode_COUNTRY_CODE_NZ      CountryCode = 179
	CountryCode_COUNTRY_CODE_OM      CountryCode = 180
	CountryCode_COUNTRY_CODE_PA      CountryCode = 181
	CountryCode_COUNTRY_CODE_PE      CountryCode = 182
	CountryCode_COUNTRY_CODE_PF      CountryCode = 183
	CountryCode_COUNTRY_CODE_PG      CountryCode = 184
	CountryCode_COUNTRY_CODE_PH      CountryCode = 185
	CountryCode_COUNTRY_CODE_PK      CountryCode = 186
	CountryCode_COUNTRY_CODE_PL      CountryCode = 187
	CountryCode_COUNTRY_CODE_PM      CountryCode = 188
	CountryCode_COUNTRY_CODE_PN      CountryCode = 189
	CountryCode_COUNTRY_CODE_PR      CountryCode = 190
	CountryCode_COUNTRY_CODE_PS      CountryCode = 191
	CountryCode_COUNTRY_CODE_PT      CountryCode = 192
	CountryCode_COUNTRY_CODE_PW      CountryCode = 193
	CountryCode_COUNTRY_CODE_PY      CountryCode = 194
	CountryCode_COUNTRY_CODE_QA      CountryCode = 195
	CountryCode_COUNTRY_CODE_RE      CountryCode = 196
	CountryCode_COUNTRY_CODE_RO      CountryCode = 197
	CountryCode_COUNTRY_CODE_RS      CountryCode = 198
	CountryCode_COUNTRY_CODE_RU      CountryCode = 199
	CountryCode_COUNTRY_CODE_RW      CountryCode = 200
	CountryCode_COUNTRY_CODE_SA      CountryCode = 201
	CountryCode_COUNTRY_CODE_SB      CountryCode = 202
	CountryCode_COUNTRY_CODE_SC      CountryCode = 203
	CountryCode_COUNTRY_CODE_SD      CountryCode = 204
	CountryCode_COUNTRY_CODE_SE      CountryCode = 205
	CountryCode_COUNTRY_CODE_SG      CountryCode = 206
	CountryCode_COUNTRY_CODE_SH      CountryCode = 207
	CountryCode_COUNTRY_CODE_SI      CountryCode = 208
	CountryCode_COUNTRY_CODE_SJ      CountryCode = 209
	CountryCode_COUNTRY_CODE_SK      CountryCode = 210
	CountryCode_COUNTRY_CODE_SL      CountryCode = 211
	CountryCode_COUNTRY_CODE_SM      CountryCode = 212
	CountryCode_COUNTRY_CODE_SN      CountryCode = 213
	CountryCode_COUNTRY_CODE_SO      CountryCode = 214
	CountryCode_COUNTRY_CODE_SR      CountryCode = 215
	CountryCode_COUNTRY_CODE_SS      CountryCode = 216
	CountryCode_COUNTRY_CODE_ST      CountryCode = 217
	CountryCode_COUNTRY_CODE_SV      CountryCode = 218
	CountryCode_COUNTRY_CODE_SX      CountryCode = 219
	CountryCode_COUNTRY_CODE_SY      CountryCode = 220
	CountryCode_COUNTRY_CODE_SZ      CountryCode = 221
	CountryCode_COUNTRY_CODE_TA      CountryCode = 222
	CountryCode_COUNTRY_CODE_TC      CountryCode = 223
	CountryCode_COUNTRY_CODE_TD      CountryCode = 224
	CountryCode_COUNTRY_CODE_TF      CountryCode = 225
	CountryCode_COUNTRY_CODE_TG      CountryCode = 226
	CountryCode_COUNTRY_CODE_TH      CountryCode = 227
	CountryCode_COUNTRY_CODE_TJ      CountryCode = 228
	CountryCode_COUNTRY_CODE_TK      CountryCode = 229
	CountryCode_COUNTRY_CODE_TL      CountryCode = 230
	CountryCode_COUNTRY_CODE_TM      CountryCode = 231
	CountryCode_COUNTRY_CODE_TN      CountryCode = 232
	CountryCode_COUNTRY_CODE_TO      CountryCode = 233
	CountryCode_COUNTRY_CODE_TR      CountryCode = 234
	CountryCode_COUNTRY_CODE_TT      CountryCode = 235
	CountryCode_COUNTRY_CODE_TV      CountryCode = 236
	CountryCode_COUNTRY_CODE_TW      CountryCode = 237
	CountryCode_COUNTRY_CODE_TZ      CountryCode = 238
	CountryCode_COUNTRY_CODE_UA      CountryCode = 239
	CountryCode_COUNTRY_CODE_UG      CountryCode = 240
	CountryCode_COUNTRY_CODE_UM      CountryCode = 241
	CountryCode_COUNTRY_CODE_US      CountryCode = 242
	CountryCode_COUNTRY_CODE_UY      CountryCode = 243
	CountryCode_COUNTRY_CODE_UZ      CountryCode = 244
	CountryCode_COUNTRY_CODE_VA      CountryCode = 245
	CountryCode_COUNTRY_CODE_VC      CountryCode = 246
	CountryCode_COUNTRY_CODE_VE      CountryCode = 247
	CountryCode_COUNTRY_CODE_VG      CountryCode = 248
	CountryCode_COUNTRY_CODE_VI      CountryCode = 249
	CountryCode_COUNTRY_CODE_VN      CountryCode = 250
	CountryCode_COUNTRY_CODE_VU      CountryCode = 251
	CountryCode_COUNTRY_CODE_WF      CountryCode = 252
	CountryCode_COUNTRY_CODE_WS      CountryCode = 253
	CountryCode_COUNTRY_CODE_XK      CountryCode = 254
	CountryCode_COUNTRY_CODE_YE      CountryCode = 255
	CountryCode_COUNTRY_CODE_YT      CountryCode = 256
	CountryCode_COUNTRY_CODE_ZA      CountryCode = 257
	CountryCode_COUNTRY_CODE_ZM      CountryCode = 258
	CountryCode_COUNTRY_CODE_ZW      CountryCode = 259
)

// Enum value maps for CountryCode.
var (
	CountryCode_name = map[int32]string{
		0:   "COUNTRY_CODE_INVALID",
		1:   "COUNTRY_CODE_AC",
		2:   "COUNTRY_CODE_AD",
		3:   "COUNTRY_CODE_AE",
		4:   "COUNTRY_CODE_AF",
		5:   "COUNTRY_CODE_AG",
		6:   "COUNTRY_CODE_AI",
		7:   "COUNTRY_CODE_AL",
		8:   "COUNTRY_CODE_AM",
		9:   "COUNTRY_CODE_AN",
		10:  "COUNTRY_CODE_AO",
		11:  "COUNTRY_CODE_AQ",
		12:  "COUNTRY_CODE_AR",
		13:  "COUNTRY_CODE_AS",
		14:  "COUNTRY_CODE_AT",
		15:  "COUNTRY_CODE_AU",
		16:  "COUNTRY_CODE_AW",
		17:  "COUNTRY_CODE_AX",
		18:  "COUNTRY_CODE_AZ",
		19:  "COUNTRY_CODE_BA",
		20:  "COUNTRY_CODE_BB",
		21:  "COUNTRY_CODE_BD",
		22:  "COUNTRY_CODE_BE",
		23:  "COUNTRY_CODE_BF",
		24:  "COUNTRY_CODE_BG",
		25:  "COUNTRY_CODE_BH",
		26:  "COUNTRY_CODE_BI",
		27:  "COUNTRY_CODE_BJ",
		28:  "COUNTRY_CODE_BL",
		29:  "COUNTRY_CODE_BM",
		30:  "COUNTRY_CODE_BN",
		31:  "COUNTRY_CODE_BO",
		32:  "COUNTRY_CODE_BQ",
		33:  "COUNTRY_CODE_BR",
		34:  "COUNTRY_CODE_BS",
		35:  "COUNTRY_CODE_BT",
		36:  "COUNTRY_CODE_BV",
		37:  "COUNTRY_CODE_BW",
		38:  "COUNTRY_CODE_BY",
		39:  "COUNTRY_CODE_BZ",
		40:  "COUNTRY_CODE_CA",
		41:  "COUNTRY_CODE_CC",
		42:  "COUNTRY_CODE_CD",
		43:  "COUNTRY_CODE_CF",
		44:  "COUNTRY_CODE_CG",
		45:  "COUNTRY_CODE_CH",
		46:  "COUNTRY_CODE_CI",
		47:  "COUNTRY_CODE_CK",
		48:  "COUNTRY_CODE_CL",
		49:  "COUNTRY_CODE_CM",
		50:  "COUNTRY_CODE_CN",
		51:  "COUNTRY_CODE_CO",
		52:  "COUNTRY_CODE_CP",
		53:  "COUNTRY_CODE_CR",
		54:  "COUNTRY_CODE_CU",
		55:  "COUNTRY_CODE_CV",
		56:  "COUNTRY_CODE_CW",
		57:  "COUNTRY_CODE_CX",
		58:  "COUNTRY_CODE_CY",
		59:  "COUNTRY_CODE_CZ",
		60:  "COUNTRY_CODE_DE",
		61:  "COUNTRY_CODE_DG",
		63:  "COUNTRY_CODE_DJ",
		64:  "COUNTRY_CODE_DK",
		65:  "COUNTRY_CODE_DM",
		66:  "COUNTRY_CODE_DO",
		67:  "COUNTRY_CODE_DZ",
		68:  "COUNTRY_CODE_EA",
		69:  "COUNTRY_CODE_EC",
		70:  "COUNTRY_CODE_EE",
		71:  "COUNTRY_CODE_EG",
		72:  "COUNTRY_CODE_EH",
		73:  "COUNTRY_CODE_ER",
		74:  "COUNTRY_CODE_ES",
		75:  "COUNTRY_CODE_ET",
		76:  "COUNTRY_CODE_FI",
		77:  "COUNTRY_CODE_FJ",
		78:  "COUNTRY_CODE_FK",
		79:  "COUNTRY_CODE_FM",
		80:  "COUNTRY_CODE_FO",
		81:  "COUNTRY_CODE_FR",
		82:  "COUNTRY_CODE_GA",
		83:  "COUNTRY_CODE_GB",
		84:  "COUNTRY_CODE_GD",
		85:  "COUNTRY_CODE_GE",
		86:  "COUNTRY_CODE_GF",
		87:  "COUNTRY_CODE_GG",
		88:  "COUNTRY_CODE_GH",
		89:  "COUNTRY_CODE_GI",
		90:  "COUNTRY_CODE_GL",
		91:  "COUNTRY_CODE_GM",
		92:  "COUNTRY_CODE_GN",
		93:  "COUNTRY_CODE_GP",
		94:  "COUNTRY_CODE_GQ",
		95:  "COUNTRY_CODE_GR",
		96:  "COUNTRY_CODE_GS",
		97:  "COUNTRY_CODE_GT",
		99:  "COUNTRY_CODE_GU",
		100: "COUNTRY_CODE_GW",
		101: "COUNTRY_CODE_GY",
		102: "COUNTRY_CODE_HK",
		103: "COUNTRY_CODE_HM",
		104: "COUNTRY_CODE_HN",
		105: "COUNTRY_CODE_HR",
		106: "COUNTRY_CODE_HT",
		107: "COUNTRY_CODE_HU",
		108: "COUNTRY_CODE_IC",
		109: "COUNTRY_CODE_ID",
		110: "COUNTRY_CODE_IE",
		111: "COUNTRY_CODE_IL",
		112: "COUNTRY_CODE_IM",
		113: "COUNTRY_CODE_IN",
		114: "COUNTRY_CODE_IO",
		115: "COUNTRY_CODE_IQ",
		116: "COUNTRY_CODE_IR",
		117: "COUNTRY_CODE_IS",
		118: "COUNTRY_CODE_IT",
		119: "COUNTRY_CODE_JE",
		120: "COUNTRY_CODE_JM",
		121: "COUNTRY_CODE_JO",
		122: "COUNTRY_CODE_JP",
		123: "COUNTRY_CODE_KE",
		124: "COUNTRY_CODE_KG",
		125: "COUNTRY_CODE_KH",
		126: "COUNTRY_CODE_KI",
		127: "COUNTRY_CODE_KM",
		128: "COUNTRY_CODE_KN",
		129: "COUNTRY_CODE_KP",
		130: "COUNTRY_CODE_KR",
		131: "COUNTRY_CODE_KW",
		132: "COUNTRY_CODE_KY",
		133: "COUNTRY_CODE_KZ",
		134: "COUNTRY_CODE_LA",
		135: "COUNTRY_CODE_LB",
		136: "COUNTRY_CODE_LC",
		137: "COUNTRY_CODE_LI",
		138: "COUNTRY_CODE_LK",
		139: "COUNTRY_CODE_LR",
		140: "COUNTRY_CODE_LS",
		141: "COUNTRY_CODE_LT",
		142: "COUNTRY_CODE_LU",
		143: "COUNTRY_CODE_LV",
		144: "COUNTRY_CODE_LY",
		145: "COUNTRY_CODE_MA",
		146: "COUNTRY_CODE_MC",
		147: "COUNTRY_CODE_MD",
		148: "COUNTRY_CODE_ME",
		149: "COUNTRY_CODE_MF",
		150: "COUNTRY_CODE_MG",
		151: "COUNTRY_CODE_MH",
		152: "COUNTRY_CODE_MK",
		153: "COUNTRY_CODE_ML",
		154: "COUNTRY_CODE_MM",
		155: "COUNTRY_CODE_MN",
		156: "COUNTRY_CODE_MO",
		157: "COUNTRY_CODE_MP",
		158: "COUNTRY_CODE_MQ",
		159: "COUNTRY_CODE_MR",
		160: "COUNTRY_CODE_MS",
		161: "COUNTRY_CODE_MT",
		162: "COUNTRY_CODE_MU",
		163: "COUNTRY_CODE_MV",
		164: "COUNTRY_CODE_MW",
		165: "COUNTRY_CODE_MX",
		166: "COUNTRY_CODE_MY",
		167: "COUNTRY_CODE_MZ",
		168: "COUNTRY_CODE_NA",
		169: "COUNTRY_CODE_NC",
		170: "COUNTRY_CODE_NE",
		171: "COUNTRY_CODE_NF",
		172: "COUNTRY_CODE_NG",
		173: "COUNTRY_CODE_NI",
		174: "COUNTRY_CODE_NL",
		175: "COUNTRY_CODE_NO",
		176: "COUNTRY_CODE_NP",
		177: "COUNTRY_CODE_NR",
		178: "COUNTRY_CODE_NU",
		179: "COUNTRY_CODE_NZ",
		180: "COUNTRY_CODE_OM",
		181: "COUNTRY_CODE_PA",
		182: "COUNTRY_CODE_PE",
		183: "COUNTRY_CODE_PF",
		184: "COUNTRY_CODE_PG",
		185: "COUNTRY_CODE_PH",
		186: "COUNTRY_CODE_PK",
		187: "COUNTRY_CODE_PL",
		188: "COUNTRY_CODE_PM",
		189: "COUNTRY_CODE_PN",
		190: "COUNTRY_CODE_PR",
		191: "COUNTRY_CODE_PS",
		192: "COUNTRY_CODE_PT",
		193: "COUNTRY_CODE_PW",
		194: "COUNTRY_CODE_PY",
		195: "COUNTRY_CODE_QA",
		196: "COUNTRY_CODE_RE",
		197: "COUNTRY_CODE_RO",
		198: "COUNTRY_CODE_RS",
		199: "COUNTRY_CODE_RU",
		200: "COUNTRY_CODE_RW",
		201: "COUNTRY_CODE_SA",
		202: "COUNTRY_CODE_SB",
		203: "COUNTRY_CODE_SC",
		204: "COUNTRY_CODE_SD",
		205: "COUNTRY_CODE_SE",
		206: "COUNTRY_CODE_SG",
		207: "COUNTRY_CODE_SH",
		208: "COUNTRY_CODE_SI",
		209: "COUNTRY_CODE_SJ",
		210: "COUNTRY_CODE_SK",
		211: "COUNTRY_CODE_SL",
		212: "COUNTRY_CODE_SM",
		213: "COUNTRY_CODE_SN",
		214: "COUNTRY_CODE_SO",
		215: "COUNTRY_CODE_SR",
		216: "COUNTRY_CODE_SS",
		217: "COUNTRY_CODE_ST",
		218: "COUNTRY_CODE_SV",
		219: "COUNTRY_CODE_SX",
		220: "COUNTRY_CODE_SY",
		221: "COUNTRY_CODE_SZ",
		222: "COUNTRY_CODE_TA",
		223: "COUNTRY_CODE_TC",
		224: "COUNTRY_CODE_TD",
		225: "COUNTRY_CODE_TF",
		226: "COUNTRY_CODE_TG",
		227: "COUNTRY_CODE_TH",
		228: "COUNTRY_CODE_TJ",
		229: "COUNTRY_CODE_TK",
		230: "COUNTRY_CODE_TL",
		231: "COUNTRY_CODE_TM",
		232: "COUNTRY_CODE_TN",
		233: "COUNTRY_CODE_TO",
		234: "COUNTRY_CODE_TR",
		235: "COUNTRY_CODE_TT",
		236: "COUNTRY_CODE_TV",
		237: "COUNTRY_CODE_TW",
		238: "COUNTRY_CODE_TZ",
		239: "COUNTRY_CODE_UA",
		240: "COUNTRY_CODE_UG",
		241: "COUNTRY_CODE_UM",
		242: "COUNTRY_CODE_US",
		243: "COUNTRY_CODE_UY",
		244: "COUNTRY_CODE_UZ",
		245: "COUNTRY_CODE_VA",
		246: "COUNTRY_CODE_VC",
		247: "COUNTRY_CODE_VE",
		248: "COUNTRY_CODE_VG",
		249: "COUNTRY_CODE_VI",
		250: "COUNTRY_CODE_VN",
		251: "COUNTRY_CODE_VU",
		252: "COUNTRY_CODE_WF",
		253: "COUNTRY_CODE_WS",
		254: "COUNTRY_CODE_XK",
		255: "COUNTRY_CODE_YE",
		256: "COUNTRY_CODE_YT",
		257: "COUNTRY_CODE_ZA",
		258: "COUNTRY_CODE_ZM",
		259: "COUNTRY_CODE_ZW",
	}
	CountryCode_value = map[string]int32{
		"COUNTRY_CODE_INVALID": 0,
		"COUNTRY_CODE_AC":      1,
		"COUNTRY_CODE_AD":      2,
		"COUNTRY_CODE_AE":      3,
		"COUNTRY_CODE_AF":      4,
		"COUNTRY_CODE_AG":      5,
		"COUNTRY_CODE_AI":      6,
		"COUNTRY_CODE_AL":      7,
		"COUNTRY_CODE_AM":      8,
		"COUNTRY_CODE_AN":      9,
		"COUNTRY_CODE_AO":      10,
		"COUNTRY_CODE_AQ":      11,
		"COUNTRY_CODE_AR":      12,
		"COUNTRY_CODE_AS":      13,
		"COUNTRY_CODE_AT":      14,
		"COUNTRY_CODE_AU":      15,
		"COUNTRY_CODE_AW":      16,
		"COUNTRY_CODE_AX":      17,
		"COUNTRY_CODE_AZ":      18,
		"COUNTRY_CODE_BA":      19,
		"COUNTRY_CODE_BB":      20,
		"COUNTRY_CODE_BD":      21,
		"COUNTRY_CODE_BE":      22,
		"COUNTRY_CODE_BF":      23,
		"COUNTRY_CODE_BG":      24,
		"COUNTRY_CODE_BH":      25,
		"COUNTRY_CODE_BI":      26,
		"COUNTRY_CODE_BJ":      27,
		"COUNTRY_CODE_BL":      28,
		"COUNTRY_CODE_BM":      29,
		"COUNTRY_CODE_BN":      30,
		"COUNTRY_CODE_BO":      31,
		"COUNTRY_CODE_BQ":      32,
		"COUNTRY_CODE_BR":      33,
		"COUNTRY_CODE_BS":      34,
		"COUNTRY_CODE_BT":      35,
		"COUNTRY_CODE_BV":      36,
		"COUNTRY_CODE_BW":      37,
		"COUNTRY_CODE_BY":      38,
		"COUNTRY_CODE_BZ":      39,
		"COUNTRY_CODE_CA":      40,
		"COUNTRY_CODE_CC":      41,
		"COUNTRY_CODE_CD":      42,
		"COUNTRY_CODE_CF":      43,
		"COUNTRY_CODE_CG":      44,
		"COUNTRY_CODE_CH":      45,
		"COUNTRY_CODE_CI":      46,
		"COUNTRY_CODE_CK":      47,
		"COUNTRY_CODE_CL":      48,
		"COUNTRY_CODE_CM":      49,
		"COUNTRY_CODE_CN":      50,
		"COUNTRY_CODE_CO":      51,
		"COUNTRY_CODE_CP":      52,
		"COUNTRY_CODE_CR":      53,
		"COUNTRY_CODE_CU":      54,
		"COUNTRY_CODE_CV":      55,
		"COUNTRY_CODE_CW":      56,
		"COUNTRY_CODE_CX":      57,
		"COUNTRY_CODE_CY":      58,
		"COUNTRY_CODE_CZ":      59,
		"COUNTRY_CODE_DE":      60,
		"COUNTRY_CODE_DG":      61,
		"COUNTRY_CODE_DJ":      63,
		"COUNTRY_CODE_DK":      64,
		"COUNTRY_CODE_DM":      65,
		"COUNTRY_CODE_DO":      66,
		"COUNTRY_CODE_DZ":      67,
		"COUNTRY_CODE_EA":      68,
		"COUNTRY_CODE_EC":      69,
		"COUNTRY_CODE_EE":      70,
		"COUNTRY_CODE_EG":      71,
		"COUNTRY_CODE_EH":      72,
		"COUNTRY_CODE_ER":      73,
		"COUNTRY_CODE_ES":      74,
		"COUNTRY_CODE_ET":      75,
		"COUNTRY_CODE_FI":      76,
		"COUNTRY_CODE_FJ":      77,
		"COUNTRY_CODE_FK":      78,
		"COUNTRY_CODE_FM":      79,
		"COUNTRY_CODE_FO":      80,
		"COUNTRY_CODE_FR":      81,
		"COUNTRY_CODE_GA":      82,
		"COUNTRY_CODE_GB":      83,
		"COUNTRY_CODE_GD":      84,
		"COUNTRY_CODE_GE":      85,
		"COUNTRY_CODE_GF":      86,
		"COUNTRY_CODE_GG":      87,
		"COUNTRY_CODE_GH":      88,
		"COUNTRY_CODE_GI":      89,
		"COUNTRY_CODE_GL":      90,
		"COUNTRY_CODE_GM":      91,
		"COUNTRY_CODE_GN":      92,
		"COUNTRY_CODE_GP":      93,
		"COUNTRY_CODE_GQ":      94,
		"COUNTRY_CODE_GR":      95,
		"COUNTRY_CODE_GS":      96,
		"COUNTRY_CODE_GT":      97,
		"COUNTRY_CODE_GU":      99,
		"COUNTRY_CODE_GW":      100,
		"COUNTRY_CODE_GY":      101,
		"COUNTRY_CODE_HK":      102,
		"COUNTRY_CODE_HM":      103,
		"COUNTRY_CODE_HN":      104,
		"COUNTRY_CODE_HR":      105,
		"COUNTRY_CODE_HT":      106,
		"COUNTRY_CODE_HU":      107,
		"COUNTRY_CODE_IC":      108,
		"COUNTRY_CODE_ID":      109,
		"COUNTRY_CODE_IE":      110,
		"COUNTRY_CODE_IL":      111,
		"COUNTRY_CODE_IM":      112,
		"COUNTRY_CODE_IN":      113,
		"COUNTRY_CODE_IO":      114,
		"COUNTRY_CODE_IQ":      115,
		"COUNTRY_CODE_IR":      116,
		"COUNTRY_CODE_IS":      117,
		"COUNTRY_CODE_IT":      118,
		"COUNTRY_CODE_JE":      119,
		"COUNTRY_CODE_JM":      120,
		"COUNTRY_CODE_JO":      121,
		"COUNTRY_CODE_JP":      122,
		"COUNTRY_CODE_KE":      123,
		"COUNTRY_CODE_KG":      124,
		"COUNTRY_CODE_KH":      125,
		"COUNTRY_CODE_KI":      126,
		"COUNTRY_CODE_KM":      127,
		"COUNTRY_CODE_KN":      128,
		"COUNTRY_CODE_KP":      129,
		"COUNTRY_CODE_KR":      130,
		"COUNTRY_CODE_KW":      131,
		"COUNTRY_CODE_KY":      132,
		"COUNTRY_CODE_KZ":      133,
		"COUNTRY_CODE_LA":      134,
		"COUNTRY_CODE_LB":      135,
		"COUNTRY_CODE_LC":      136,
		"COUNTRY_CODE_LI":      137,
		"COUNTRY_CODE_LK":      138,
		"COUNTRY_CODE_LR":      139,
		"COUNTRY_CODE_LS":      140,
		"COUNTRY_CODE_LT":      141,
		"COUNTRY_CODE_LU":      142,
		"COUNTRY_CODE_LV":      143,
		"COUNTRY_CODE_LY":      144,
		"COUNTRY_CODE_MA":      145,
		"COUNTRY_CODE_MC":      146,
		"COUNTRY_CODE_MD":      147,
		"COUNTRY_CODE_ME":      148,
		"COUNTRY_CODE_MF":      149,
		"COUNTRY_CODE_MG":      150,
		"COUNTRY_CODE_MH":      151,
		"COUNTRY_CODE_MK":      152,
		"COUNTRY_CODE_ML":      153,
		"COUNTRY_CODE_MM":      154,
		"COUNTRY_CODE_MN":      155,
		"COUNTRY_CODE_MO":      156,
		"COUNTRY_CODE_MP":      157,
		"COUNTRY_CODE_MQ":      158,
		"COUNTRY_CODE_MR":      159,
		"COUNTRY_CODE_MS":      160,
		"COUNTRY_CODE_MT":      161,
		"COUNTRY_CODE_MU":      162,
		"COUNTRY_CODE_MV":      163,
		"COUNTRY_CODE_MW":      164,
		"COUNTRY_CODE_MX":      165,
		"COUNTRY_CODE_MY":      166,
		"COUNTRY_CODE_MZ":      167,
		"COUNTRY_CODE_NA":      168,
		"COUNTRY_CODE_NC":      169,
		"COUNTRY_CODE_NE":      170,
		"COUNTRY_CODE_NF":      171,
		"COUNTRY_CODE_NG":      172,
		"COUNTRY_CODE_NI":      173,
		"COUNTRY_CODE_NL":      174,
		"COUNTRY_CODE_NO":      175,
		"COUNTRY_CODE_NP":      176,
		"COUNTRY_CODE_NR":      177,
		"COUNTRY_CODE_NU":      178,
		"COUNTRY_CODE_NZ":      179,
		"COUNTRY_CODE_OM":      180,
		"COUNTRY_CODE_PA":      181,
		"COUNTRY_CODE_PE":      182,
		"COUNTRY_CODE_PF":      183,
		"COUNTRY_CODE_PG":      184,
		"COUNTRY_CODE_PH":      185,
		"COUNTRY_CODE_PK":      186,
		"COUNTRY_CODE_PL":      187,
		"COUNTRY_CODE_PM":      188,
		"COUNTRY_CODE_PN":      189,
		"COUNTRY_CODE_PR":      190,
		"COUNTRY_CODE_PS":      191,
		"COUNTRY_CODE_PT":      192,
		"COUNTRY_CODE_PW":      193,
		"COUNTRY_CODE_PY":      194,
		"COUNTRY_CODE_QA":      195,
		"COUNTRY_CODE_RE":      196,
		"COUNTRY_CODE_RO":      197,
		"COUNTRY_CODE_RS":      198,
		"COUNTRY_CODE_RU":      199,
		"COUNTRY_CODE_RW":      200,
		"COUNTRY_CODE_SA":      201,
		"COUNTRY_CODE_SB":      202,
		"COUNTRY_CODE_SC":      203,
		"COUNTRY_CODE_SD":      204,
		"COUNTRY_CODE_SE":      205,
		"COUNTRY_CODE_SG":      206,
		"COUNTRY_CODE_SH":      207,
		"COUNTRY_CODE_SI":      208,
		"COUNTRY_CODE_SJ":      209,
		"COUNTRY_CODE_SK":      210,
		"COUNTRY_CODE_SL":      211,
		"COUNTRY_CODE_SM":      212,
		"COUNTRY_CODE_SN":      213,
		"COUNTRY_CODE_SO":      214,
		"COUNTRY_CODE_SR":      215,
		"COUNTRY_CODE_SS":      216,
		"COUNTRY_CODE_ST":      217,
		"COUNTRY_CODE_SV":      218,
		"COUNTRY_CODE_SX":      219,
		"COUNTRY_CODE_SY":      220,
		"COUNTRY_CODE_SZ":      221,
		"COUNTRY_CODE_TA":      222,
		"COUNTRY_CODE_TC":      223,
		"COUNTRY_CODE_TD":      224,
		"COUNTRY_CODE_TF":      225,
		"COUNTRY_CODE_TG":      226,
		"COUNTRY_CODE_TH":      227,
		"COUNTRY_CODE_TJ":      228,
		"COUNTRY_CODE_TK":      229,
		"COUNTRY_CODE_TL":      230,
		"COUNTRY_CODE_TM":      231,
		"COUNTRY_CODE_TN":      232,
		"COUNTRY_CODE_TO":      233,
		"COUNTRY_CODE_TR":      234,
		"COUNTRY_CODE_TT":      235,
		"COUNTRY_CODE_TV":      236,
		"COUNTRY_CODE_TW":      237,
		"COUNTRY_CODE_TZ":      238,
		"COUNTRY_CODE_UA":      239,
		"COUNTRY_CODE_UG":      240,
		"COUNTRY_CODE_UM":      241,
		"COUNTRY_CODE_US":      242,
		"COUNTRY_CODE_UY":      243,
		"COUNTRY_CODE_UZ":      244,
		"COUNTRY_CODE_VA":      245,
		"COUNTRY_CODE_VC":      246,
		"COUNTRY_CODE_VE":      247,
		"COUNTRY_CODE_VG":      248,
		"COUNTRY_CODE_VI":      249,
		"COUNTRY_CODE_VN":      250,
		"COUNTRY_CODE_VU":      251,
		"COUNTRY_CODE_WF":      252,
		"COUNTRY_CODE_WS":      253,
		"COUNTRY_CODE_XK":      254,
		"COUNTRY_CODE_YE":      255,
		"COUNTRY_CODE_YT":      256,
		"COUNTRY_CODE_ZA":      257,
		"COUNTRY_CODE_ZM":      258,
		"COUNTRY_CODE_ZW":      259,
	}
)

func (x CountryCode) Enum() *CountryCode {
	p := new(CountryCode)
	*p = x
	return p
}

func (x CountryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[17].Descriptor()
}

func (CountryCode) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[17]
}

func (x CountryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryCode.Descriptor instead.
func (CountryCode) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{17}
}

type HttpMethodType int32

const (
	HttpMethodType_HTTP_METHOD_TYPE_INVALID HttpMethodType = 0
	HttpMethodType_HTTP_METHOD_TYPE_GET     HttpMethodType = 1
	HttpMethodType_HTTP_METHOD_TYPE_PUT     HttpMethodType = 2
	HttpMethodType_HTTP_METHOD_TYPE_POST    HttpMethodType = 3
	HttpMethodType_HTTP_METHOD_TYPE_DELETE  HttpMethodType = 4
	HttpMethodType_HTTP_METHOD_TYPE_PATCH   HttpMethodType = 5
)

// Enum value maps for HttpMethodType.
var (
	HttpMethodType_name = map[int32]string{
		0: "HTTP_METHOD_TYPE_INVALID",
		1: "HTTP_METHOD_TYPE_GET",
		2: "HTTP_METHOD_TYPE_PUT",
		3: "HTTP_METHOD_TYPE_POST",
		4: "HTTP_METHOD_TYPE_DELETE",
		5: "HTTP_METHOD_TYPE_PATCH",
	}
	HttpMethodType_value = map[string]int32{
		"HTTP_METHOD_TYPE_INVALID": 0,
		"HTTP_METHOD_TYPE_GET":     1,
		"HTTP_METHOD_TYPE_PUT":     2,
		"HTTP_METHOD_TYPE_POST":    3,
		"HTTP_METHOD_TYPE_DELETE":  4,
		"HTTP_METHOD_TYPE_PATCH":   5,
	}
)

func (x HttpMethodType) Enum() *HttpMethodType {
	p := new(HttpMethodType)
	*p = x
	return p
}

func (x HttpMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[18].Descriptor()
}

func (HttpMethodType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[18]
}

func (x HttpMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpMethodType.Descriptor instead.
func (HttpMethodType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{18}
}

type LanguageCode int32

const (
	LanguageCode_LANGUAGE_CODE_INVALID LanguageCode = 0
	LanguageCode_LANGUAGE_CODE_AA      LanguageCode = 1
	LanguageCode_LANGUAGE_CODE_AB      LanguageCode = 2
	LanguageCode_LANGUAGE_CODE_AE      LanguageCode = 3
	LanguageCode_LANGUAGE_CODE_AF      LanguageCode = 4
	LanguageCode_LANGUAGE_CODE_AK      LanguageCode = 5
	LanguageCode_LANGUAGE_CODE_AM      LanguageCode = 6
	LanguageCode_LANGUAGE_CODE_AN      LanguageCode = 7
	LanguageCode_LANGUAGE_CODE_AR      LanguageCode = 8
	LanguageCode_LANGUAGE_CODE_AS      LanguageCode = 9
	LanguageCode_LANGUAGE_CODE_AV      LanguageCode = 10
	LanguageCode_LANGUAGE_CODE_AY      LanguageCode = 11
	LanguageCode_LANGUAGE_CODE_AZ      LanguageCode = 12
	LanguageCode_LANGUAGE_CODE_BA      LanguageCode = 13
	LanguageCode_LANGUAGE_CODE_BE      LanguageCode = 14
	LanguageCode_LANGUAGE_CODE_BG      LanguageCode = 15
	LanguageCode_LANGUAGE_CODE_BI      LanguageCode = 16
	LanguageCode_LANGUAGE_CODE_BM      LanguageCode = 17
	LanguageCode_LANGUAGE_CODE_BN      LanguageCode = 18
	LanguageCode_LANGUAGE_CODE_BO      LanguageCode = 19
	LanguageCode_LANGUAGE_CODE_BR      LanguageCode = 20
	LanguageCode_LANGUAGE_CODE_BS      LanguageCode = 21
	LanguageCode_LANGUAGE_CODE_CA      LanguageCode = 22
	LanguageCode_LANGUAGE_CODE_CE      LanguageCode = 23
	LanguageCode_LANGUAGE_CODE_CH      LanguageCode = 24
	LanguageCode_LANGUAGE_CODE_CO      LanguageCode = 25
	LanguageCode_LANGUAGE_CODE_CR      LanguageCode = 26
	LanguageCode_LANGUAGE_CODE_CS      LanguageCode = 27
	LanguageCode_LANGUAGE_CODE_CU      LanguageCode = 28
	LanguageCode_LANGUAGE_CODE_CV      LanguageCode = 29
	LanguageCode_LANGUAGE_CODE_CY      LanguageCode = 30
	LanguageCode_LANGUAGE_CODE_DA      LanguageCode = 31
	LanguageCode_LANGUAGE_CODE_DE      LanguageCode = 32
	LanguageCode_LANGUAGE_CODE_DV      LanguageCode = 33
	LanguageCode_LANGUAGE_CODE_DZ      LanguageCode = 34
	LanguageCode_LANGUAGE_CODE_EE      LanguageCode = 35
	LanguageCode_LANGUAGE_CODE_EL      LanguageCode = 36
	LanguageCode_LANGUAGE_CODE_EN      LanguageCode = 37
	LanguageCode_LANGUAGE_CODE_EO      LanguageCode = 38
	LanguageCode_LANGUAGE_CODE_ES      LanguageCode = 39
	LanguageCode_LANGUAGE_CODE_ET      LanguageCode = 40
	LanguageCode_LANGUAGE_CODE_EU      LanguageCode = 41
	LanguageCode_LANGUAGE_CODE_FA      LanguageCode = 42
	LanguageCode_LANGUAGE_CODE_FF      LanguageCode = 43
	LanguageCode_LANGUAGE_CODE_FI      LanguageCode = 44
	LanguageCode_LANGUAGE_CODE_FJ      LanguageCode = 45
	LanguageCode_LANGUAGE_CODE_FO      LanguageCode = 46
	LanguageCode_LANGUAGE_CODE_FR      LanguageCode = 47
	LanguageCode_LANGUAGE_CODE_FY      LanguageCode = 48
	LanguageCode_LANGUAGE_CODE_GA      LanguageCode = 49
	LanguageCode_LANGUAGE_CODE_GD      LanguageCode = 50
	LanguageCode_LANGUAGE_CODE_GL      LanguageCode = 51
	LanguageCode_LANGUAGE_CODE_GN      LanguageCode = 52
	LanguageCode_LANGUAGE_CODE_GU      LanguageCode = 53
	LanguageCode_LANGUAGE_CODE_GV      LanguageCode = 54
	LanguageCode_LANGUAGE_CODE_HA      LanguageCode = 55
	LanguageCode_LANGUAGE_CODE_HE      LanguageCode = 56
	LanguageCode_LANGUAGE_CODE_HI      LanguageCode = 57
	LanguageCode_LANGUAGE_CODE_HO      LanguageCode = 58
	LanguageCode_LANGUAGE_CODE_HR      LanguageCode = 59
	LanguageCode_LANGUAGE_CODE_HT      LanguageCode = 60
	LanguageCode_LANGUAGE_CODE_HU      LanguageCode = 61
	LanguageCode_LANGUAGE_CODE_HY      LanguageCode = 62
	LanguageCode_LANGUAGE_CODE_HZ      LanguageCode = 63
	LanguageCode_LANGUAGE_CODE_IA      LanguageCode = 64
	LanguageCode_LANGUAGE_CODE_ID      LanguageCode = 65
	LanguageCode_LANGUAGE_CODE_IE      LanguageCode = 66
	LanguageCode_LANGUAGE_CODE_IG      LanguageCode = 67
	LanguageCode_LANGUAGE_CODE_II      LanguageCode = 68
	LanguageCode_LANGUAGE_CODE_IK      LanguageCode = 69
	LanguageCode_LANGUAGE_CODE_IO      LanguageCode = 70
	LanguageCode_LANGUAGE_CODE_IS      LanguageCode = 71
	LanguageCode_LANGUAGE_CODE_IT      LanguageCode = 72
	LanguageCode_LANGUAGE_CODE_IU      LanguageCode = 73
	LanguageCode_LANGUAGE_CODE_JA      LanguageCode = 74
	LanguageCode_LANGUAGE_CODE_JV      LanguageCode = 75
	LanguageCode_LANGUAGE_CODE_KA      LanguageCode = 76
	LanguageCode_LANGUAGE_CODE_KG      LanguageCode = 77
	LanguageCode_LANGUAGE_CODE_KI      LanguageCode = 78
	LanguageCode_LANGUAGE_CODE_KJ      LanguageCode = 79
	LanguageCode_LANGUAGE_CODE_KK      LanguageCode = 80
	LanguageCode_LANGUAGE_CODE_KL      LanguageCode = 81
	LanguageCode_LANGUAGE_CODE_KM      LanguageCode = 82
	LanguageCode_LANGUAGE_CODE_KN      LanguageCode = 83
	LanguageCode_LANGUAGE_CODE_KO      LanguageCode = 84
	LanguageCode_LANGUAGE_CODE_KR      LanguageCode = 85
	LanguageCode_LANGUAGE_CODE_KS      LanguageCode = 86
	LanguageCode_LANGUAGE_CODE_KU      LanguageCode = 87
	LanguageCode_LANGUAGE_CODE_KV      LanguageCode = 88
	LanguageCode_LANGUAGE_CODE_KW      LanguageCode = 89
	LanguageCode_LANGUAGE_CODE_KY      LanguageCode = 90
	LanguageCode_LANGUAGE_CODE_LA      LanguageCode = 91
	LanguageCode_LANGUAGE_CODE_LB      LanguageCode = 92
	LanguageCode_LANGUAGE_CODE_LG      LanguageCode = 93
	LanguageCode_LANGUAGE_CODE_LI      LanguageCode = 94
	LanguageCode_LANGUAGE_CODE_LN      LanguageCode = 95
	LanguageCode_LANGUAGE_CODE_LO      LanguageCode = 96
	LanguageCode_LANGUAGE_CODE_LT      LanguageCode = 97
	LanguageCode_LANGUAGE_CODE_LU      LanguageCode = 98
	LanguageCode_LANGUAGE_CODE_LV      LanguageCode = 99
	LanguageCode_LANGUAGE_CODE_MG      LanguageCode = 100
	LanguageCode_LANGUAGE_CODE_MH      LanguageCode = 101
	LanguageCode_LANGUAGE_CODE_MI      LanguageCode = 102
	LanguageCode_LANGUAGE_CODE_MK      LanguageCode = 103
	LanguageCode_LANGUAGE_CODE_ML      LanguageCode = 104
	LanguageCode_LANGUAGE_CODE_MM      LanguageCode = 105
	LanguageCode_LANGUAGE_CODE_MR      LanguageCode = 106
	LanguageCode_LANGUAGE_CODE_MS      LanguageCode = 107
	LanguageCode_LANGUAGE_CODE_MT      LanguageCode = 108
	LanguageCode_LANGUAGE_CODE_MY      LanguageCode = 109
	LanguageCode_LANGUAGE_CODE_NA      LanguageCode = 110
	LanguageCode_LANGUAGE_CODE_NB      LanguageCode = 111
	LanguageCode_LANGUAGE_CODE_ND      LanguageCode = 112
	LanguageCode_LANGUAGE_CODE_NE      LanguageCode = 113
	LanguageCode_LANGUAGE_CODE_NG      LanguageCode = 114
	LanguageCode_LANGUAGE_CODE_NL      LanguageCode = 115
	LanguageCode_LANGUAGE_CODE_NN      LanguageCode = 116
	LanguageCode_LANGUAGE_CODE_NO      LanguageCode = 117
	LanguageCode_LANGUAGE_CODE_NR      LanguageCode = 118
	LanguageCode_LANGUAGE_CODE_NV      LanguageCode = 119
	LanguageCode_LANGUAGE_CODE_NY      LanguageCode = 120
	LanguageCode_LANGUAGE_CODE_OC      LanguageCode = 121
	LanguageCode_LANGUAGE_CODE_OJ      LanguageCode = 122
	LanguageCode_LANGUAGE_CODE_OM      LanguageCode = 123
	LanguageCode_LANGUAGE_CODE_OR      LanguageCode = 124
	LanguageCode_LANGUAGE_CODE_OS      LanguageCode = 125
	LanguageCode_LANGUAGE_CODE_PA      LanguageCode = 126
	LanguageCode_LANGUAGE_CODE_PI      LanguageCode = 127
	LanguageCode_LANGUAGE_CODE_PL      LanguageCode = 128
	LanguageCode_LANGUAGE_CODE_PS      LanguageCode = 129
	LanguageCode_LANGUAGE_CODE_PT      LanguageCode = 130
	LanguageCode_LANGUAGE_CODE_QU      LanguageCode = 131
	LanguageCode_LANGUAGE_CODE_RM      LanguageCode = 132
	LanguageCode_LANGUAGE_CODE_RN      LanguageCode = 133
	LanguageCode_LANGUAGE_CODE_RO      LanguageCode = 134
	LanguageCode_LANGUAGE_CODE_RU      LanguageCode = 135
	LanguageCode_LANGUAGE_CODE_RW      LanguageCode = 136
	LanguageCode_LANGUAGE_CODE_SA      LanguageCode = 137
	LanguageCode_LANGUAGE_CODE_SC      LanguageCode = 138
	LanguageCode_LANGUAGE_CODE_SD      LanguageCode = 139
	LanguageCode_LANGUAGE_CODE_SE      LanguageCode = 140
	LanguageCode_LANGUAGE_CODE_SG      LanguageCode = 141
	LanguageCode_LANGUAGE_CODE_SI      LanguageCode = 142
	LanguageCode_LANGUAGE_CODE_SK      LanguageCode = 143
	LanguageCode_LANGUAGE_CODE_SL      LanguageCode = 144
	LanguageCode_LANGUAGE_CODE_SM      LanguageCode = 145
	LanguageCode_LANGUAGE_CODE_SN      LanguageCode = 146
	LanguageCode_LANGUAGE_CODE_SO      LanguageCode = 147
	LanguageCode_LANGUAGE_CODE_SQ      LanguageCode = 148
	LanguageCode_LANGUAGE_CODE_SR      LanguageCode = 149
	LanguageCode_LANGUAGE_CODE_SS      LanguageCode = 150
	LanguageCode_LANGUAGE_CODE_ST      LanguageCode = 151
	LanguageCode_LANGUAGE_CODE_SU      LanguageCode = 152
	LanguageCode_LANGUAGE_CODE_SV      LanguageCode = 153
	LanguageCode_LANGUAGE_CODE_SW      LanguageCode = 154
	LanguageCode_LANGUAGE_CODE_TA      LanguageCode = 155
	LanguageCode_LANGUAGE_CODE_TE      LanguageCode = 156
	LanguageCode_LANGUAGE_CODE_TG      LanguageCode = 157
	LanguageCode_LANGUAGE_CODE_TH      LanguageCode = 158
	LanguageCode_LANGUAGE_CODE_TI      LanguageCode = 159
	LanguageCode_LANGUAGE_CODE_TK      LanguageCode = 160
	LanguageCode_LANGUAGE_CODE_TL      LanguageCode = 161
	LanguageCode_LANGUAGE_CODE_TN      LanguageCode = 162
	LanguageCode_LANGUAGE_CODE_TO      LanguageCode = 163
	LanguageCode_LANGUAGE_CODE_TR      LanguageCode = 164
	LanguageCode_LANGUAGE_CODE_TS      LanguageCode = 165
	LanguageCode_LANGUAGE_CODE_TT      LanguageCode = 166
	LanguageCode_LANGUAGE_CODE_TW      LanguageCode = 167
	LanguageCode_LANGUAGE_CODE_TY      LanguageCode = 168
	LanguageCode_LANGUAGE_CODE_UG      LanguageCode = 169
	LanguageCode_LANGUAGE_CODE_UK      LanguageCode = 170
	LanguageCode_LANGUAGE_CODE_UR      LanguageCode = 171
	LanguageCode_LANGUAGE_CODE_UZ      LanguageCode = 172
	LanguageCode_LANGUAGE_CODE_VE      LanguageCode = 173
	LanguageCode_LANGUAGE_CODE_VI      LanguageCode = 174
	LanguageCode_LANGUAGE_CODE_VO      LanguageCode = 175
	LanguageCode_LANGUAGE_CODE_WA      LanguageCode = 176
	LanguageCode_LANGUAGE_CODE_WO      LanguageCode = 177
	LanguageCode_LANGUAGE_CODE_XH      LanguageCode = 178
	LanguageCode_LANGUAGE_CODE_YI      LanguageCode = 179
	LanguageCode_LANGUAGE_CODE_YO      LanguageCode = 180
	LanguageCode_LANGUAGE_CODE_ZA      LanguageCode = 181
	LanguageCode_LANGUAGE_CODE_ZH      LanguageCode = 182
	LanguageCode_LANGUAGE_CODE_ZU      LanguageCode = 183
)

// Enum value maps for LanguageCode.
var (
	LanguageCode_name = map[int32]string{
		0:   "LANGUAGE_CODE_INVALID",
		1:   "LANGUAGE_CODE_AA",
		2:   "LANGUAGE_CODE_AB",
		3:   "LANGUAGE_CODE_AE",
		4:   "LANGUAGE_CODE_AF",
		5:   "LANGUAGE_CODE_AK",
		6:   "LANGUAGE_CODE_AM",
		7:   "LANGUAGE_CODE_AN",
		8:   "LANGUAGE_CODE_AR",
		9:   "LANGUAGE_CODE_AS",
		10:  "LANGUAGE_CODE_AV",
		11:  "LANGUAGE_CODE_AY",
		12:  "LANGUAGE_CODE_AZ",
		13:  "LANGUAGE_CODE_BA",
		14:  "LANGUAGE_CODE_BE",
		15:  "LANGUAGE_CODE_BG",
		16:  "LANGUAGE_CODE_BI",
		17:  "LANGUAGE_CODE_BM",
		18:  "LANGUAGE_CODE_BN",
		19:  "LANGUAGE_CODE_BO",
		20:  "LANGUAGE_CODE_BR",
		21:  "LANGUAGE_CODE_BS",
		22:  "LANGUAGE_CODE_CA",
		23:  "LANGUAGE_CODE_CE",
		24:  "LANGUAGE_CODE_CH",
		25:  "LANGUAGE_CODE_CO",
		26:  "LANGUAGE_CODE_CR",
		27:  "LANGUAGE_CODE_CS",
		28:  "LANGUAGE_CODE_CU",
		29:  "LANGUAGE_CODE_CV",
		30:  "LANGUAGE_CODE_CY",
		31:  "LANGUAGE_CODE_DA",
		32:  "LANGUAGE_CODE_DE",
		33:  "LANGUAGE_CODE_DV",
		34:  "LANGUAGE_CODE_DZ",
		35:  "LANGUAGE_CODE_EE",
		36:  "LANGUAGE_CODE_EL",
		37:  "LANGUAGE_CODE_EN",
		38:  "LANGUAGE_CODE_EO",
		39:  "LANGUAGE_CODE_ES",
		40:  "LANGUAGE_CODE_ET",
		41:  "LANGUAGE_CODE_EU",
		42:  "LANGUAGE_CODE_FA",
		43:  "LANGUAGE_CODE_FF",
		44:  "LANGUAGE_CODE_FI",
		45:  "LANGUAGE_CODE_FJ",
		46:  "LANGUAGE_CODE_FO",
		47:  "LANGUAGE_CODE_FR",
		48:  "LANGUAGE_CODE_FY",
		49:  "LANGUAGE_CODE_GA",
		50:  "LANGUAGE_CODE_GD",
		51:  "LANGUAGE_CODE_GL",
		52:  "LANGUAGE_CODE_GN",
		53:  "LANGUAGE_CODE_GU",
		54:  "LANGUAGE_CODE_GV",
		55:  "LANGUAGE_CODE_HA",
		56:  "LANGUAGE_CODE_HE",
		57:  "LANGUAGE_CODE_HI",
		58:  "LANGUAGE_CODE_HO",
		59:  "LANGUAGE_CODE_HR",
		60:  "LANGUAGE_CODE_HT",
		61:  "LANGUAGE_CODE_HU",
		62:  "LANGUAGE_CODE_HY",
		63:  "LANGUAGE_CODE_HZ",
		64:  "LANGUAGE_CODE_IA",
		65:  "LANGUAGE_CODE_ID",
		66:  "LANGUAGE_CODE_IE",
		67:  "LANGUAGE_CODE_IG",
		68:  "LANGUAGE_CODE_II",
		69:  "LANGUAGE_CODE_IK",
		70:  "LANGUAGE_CODE_IO",
		71:  "LANGUAGE_CODE_IS",
		72:  "LANGUAGE_CODE_IT",
		73:  "LANGUAGE_CODE_IU",
		74:  "LANGUAGE_CODE_JA",
		75:  "LANGUAGE_CODE_JV",
		76:  "LANGUAGE_CODE_KA",
		77:  "LANGUAGE_CODE_KG",
		78:  "LANGUAGE_CODE_KI",
		79:  "LANGUAGE_CODE_KJ",
		80:  "LANGUAGE_CODE_KK",
		81:  "LANGUAGE_CODE_KL",
		82:  "LANGUAGE_CODE_KM",
		83:  "LANGUAGE_CODE_KN",
		84:  "LANGUAGE_CODE_KO",
		85:  "LANGUAGE_CODE_KR",
		86:  "LANGUAGE_CODE_KS",
		87:  "LANGUAGE_CODE_KU",
		88:  "LANGUAGE_CODE_KV",
		89:  "LANGUAGE_CODE_KW",
		90:  "LANGUAGE_CODE_KY",
		91:  "LANGUAGE_CODE_LA",
		92:  "LANGUAGE_CODE_LB",
		93:  "LANGUAGE_CODE_LG",
		94:  "LANGUAGE_CODE_LI",
		95:  "LANGUAGE_CODE_LN",
		96:  "LANGUAGE_CODE_LO",
		97:  "LANGUAGE_CODE_LT",
		98:  "LANGUAGE_CODE_LU",
		99:  "LANGUAGE_CODE_LV",
		100: "LANGUAGE_CODE_MG",
		101: "LANGUAGE_CODE_MH",
		102: "LANGUAGE_CODE_MI",
		103: "LANGUAGE_CODE_MK",
		104: "LANGUAGE_CODE_ML",
		105: "LANGUAGE_CODE_MM",
		106: "LANGUAGE_CODE_MR",
		107: "LANGUAGE_CODE_MS",
		108: "LANGUAGE_CODE_MT",
		109: "LANGUAGE_CODE_MY",
		110: "LANGUAGE_CODE_NA",
		111: "LANGUAGE_CODE_NB",
		112: "LANGUAGE_CODE_ND",
		113: "LANGUAGE_CODE_NE",
		114: "LANGUAGE_CODE_NG",
		115: "LANGUAGE_CODE_NL",
		116: "LANGUAGE_CODE_NN",
		117: "LANGUAGE_CODE_NO",
		118: "LANGUAGE_CODE_NR",
		119: "LANGUAGE_CODE_NV",
		120: "LANGUAGE_CODE_NY",
		121: "LANGUAGE_CODE_OC",
		122: "LANGUAGE_CODE_OJ",
		123: "LANGUAGE_CODE_OM",
		124: "LANGUAGE_CODE_OR",
		125: "LANGUAGE_CODE_OS",
		126: "LANGUAGE_CODE_PA",
		127: "LANGUAGE_CODE_PI",
		128: "LANGUAGE_CODE_PL",
		129: "LANGUAGE_CODE_PS",
		130: "LANGUAGE_CODE_PT",
		131: "LANGUAGE_CODE_QU",
		132: "LANGUAGE_CODE_RM",
		133: "LANGUAGE_CODE_RN",
		134: "LANGUAGE_CODE_RO",
		135: "LANGUAGE_CODE_RU",
		136: "LANGUAGE_CODE_RW",
		137: "LANGUAGE_CODE_SA",
		138: "LANGUAGE_CODE_SC",
		139: "LANGUAGE_CODE_SD",
		140: "LANGUAGE_CODE_SE",
		141: "LANGUAGE_CODE_SG",
		142: "LANGUAGE_CODE_SI",
		143: "LANGUAGE_CODE_SK",
		144: "LANGUAGE_CODE_SL",
		145: "LANGUAGE_CODE_SM",
		146: "LANGUAGE_CODE_SN",
		147: "LANGUAGE_CODE_SO",
		148: "LANGUAGE_CODE_SQ",
		149: "LANGUAGE_CODE_SR",
		150: "LANGUAGE_CODE_SS",
		151: "LANGUAGE_CODE_ST",
		152: "LANGUAGE_CODE_SU",
		153: "LANGUAGE_CODE_SV",
		154: "LANGUAGE_CODE_SW",
		155: "LANGUAGE_CODE_TA",
		156: "LANGUAGE_CODE_TE",
		157: "LANGUAGE_CODE_TG",
		158: "LANGUAGE_CODE_TH",
		159: "LANGUAGE_CODE_TI",
		160: "LANGUAGE_CODE_TK",
		161: "LANGUAGE_CODE_TL",
		162: "LANGUAGE_CODE_TN",
		163: "LANGUAGE_CODE_TO",
		164: "LANGUAGE_CODE_TR",
		165: "LANGUAGE_CODE_TS",
		166: "LANGUAGE_CODE_TT",
		167: "LANGUAGE_CODE_TW",
		168: "LANGUAGE_CODE_TY",
		169: "LANGUAGE_CODE_UG",
		170: "LANGUAGE_CODE_UK",
		171: "LANGUAGE_CODE_UR",
		172: "LANGUAGE_CODE_UZ",
		173: "LANGUAGE_CODE_VE",
		174: "LANGUAGE_CODE_VI",
		175: "LANGUAGE_CODE_VO",
		176: "LANGUAGE_CODE_WA",
		177: "LANGUAGE_CODE_WO",
		178: "LANGUAGE_CODE_XH",
		179: "LANGUAGE_CODE_YI",
		180: "LANGUAGE_CODE_YO",
		181: "LANGUAGE_CODE_ZA",
		182: "LANGUAGE_CODE_ZH",
		183: "LANGUAGE_CODE_ZU",
	}
	LanguageCode_value = map[string]int32{
		"LANGUAGE_CODE_INVALID": 0,
		"LANGUAGE_CODE_AA":      1,
		"LANGUAGE_CODE_AB":      2,
		"LANGUAGE_CODE_AE":      3,
		"LANGUAGE_CODE_AF":      4,
		"LANGUAGE_CODE_AK":      5,
		"LANGUAGE_CODE_AM":      6,
		"LANGUAGE_CODE_AN":      7,
		"LANGUAGE_CODE_AR":      8,
		"LANGUAGE_CODE_AS":      9,
		"LANGUAGE_CODE_AV":      10,
		"LANGUAGE_CODE_AY":      11,
		"LANGUAGE_CODE_AZ":      12,
		"LANGUAGE_CODE_BA":      13,
		"LANGUAGE_CODE_BE":      14,
		"LANGUAGE_CODE_BG":      15,
		"LANGUAGE_CODE_BI":      16,
		"LANGUAGE_CODE_BM":      17,
		"LANGUAGE_CODE_BN":      18,
		"LANGUAGE_CODE_BO":      19,
		"LANGUAGE_CODE_BR":      20,
		"LANGUAGE_CODE_BS":      21,
		"LANGUAGE_CODE_CA":      22,
		"LANGUAGE_CODE_CE":      23,
		"LANGUAGE_CODE_CH":      24,
		"LANGUAGE_CODE_CO":      25,
		"LANGUAGE_CODE_CR":      26,
		"LANGUAGE_CODE_CS":      27,
		"LANGUAGE_CODE_CU":      28,
		"LANGUAGE_CODE_CV":      29,
		"LANGUAGE_CODE_CY":      30,
		"LANGUAGE_CODE_DA":      31,
		"LANGUAGE_CODE_DE":      32,
		"LANGUAGE_CODE_DV":      33,
		"LANGUAGE_CODE_DZ":      34,
		"LANGUAGE_CODE_EE":      35,
		"LANGUAGE_CODE_EL":      36,
		"LANGUAGE_CODE_EN":      37,
		"LANGUAGE_CODE_EO":      38,
		"LANGUAGE_CODE_ES":      39,
		"LANGUAGE_CODE_ET":      40,
		"LANGUAGE_CODE_EU":      41,
		"LANGUAGE_CODE_FA":      42,
		"LANGUAGE_CODE_FF":      43,
		"LANGUAGE_CODE_FI":      44,
		"LANGUAGE_CODE_FJ":      45,
		"LANGUAGE_CODE_FO":      46,
		"LANGUAGE_CODE_FR":      47,
		"LANGUAGE_CODE_FY":      48,
		"LANGUAGE_CODE_GA":      49,
		"LANGUAGE_CODE_GD":      50,
		"LANGUAGE_CODE_GL":      51,
		"LANGUAGE_CODE_GN":      52,
		"LANGUAGE_CODE_GU":      53,
		"LANGUAGE_CODE_GV":      54,
		"LANGUAGE_CODE_HA":      55,
		"LANGUAGE_CODE_HE":      56,
		"LANGUAGE_CODE_HI":      57,
		"LANGUAGE_CODE_HO":      58,
		"LANGUAGE_CODE_HR":      59,
		"LANGUAGE_CODE_HT":      60,
		"LANGUAGE_CODE_HU":      61,
		"LANGUAGE_CODE_HY":      62,
		"LANGUAGE_CODE_HZ":      63,
		"LANGUAGE_CODE_IA":      64,
		"LANGUAGE_CODE_ID":      65,
		"LANGUAGE_CODE_IE":      66,
		"LANGUAGE_CODE_IG":      67,
		"LANGUAGE_CODE_II":      68,
		"LANGUAGE_CODE_IK":      69,
		"LANGUAGE_CODE_IO":      70,
		"LANGUAGE_CODE_IS":      71,
		"LANGUAGE_CODE_IT":      72,
		"LANGUAGE_CODE_IU":      73,
		"LANGUAGE_CODE_JA":      74,
		"LANGUAGE_CODE_JV":      75,
		"LANGUAGE_CODE_KA":      76,
		"LANGUAGE_CODE_KG":      77,
		"LANGUAGE_CODE_KI":      78,
		"LANGUAGE_CODE_KJ":      79,
		"LANGUAGE_CODE_KK":      80,
		"LANGUAGE_CODE_KL":      81,
		"LANGUAGE_CODE_KM":      82,
		"LANGUAGE_CODE_KN":      83,
		"LANGUAGE_CODE_KO":      84,
		"LANGUAGE_CODE_KR":      85,
		"LANGUAGE_CODE_KS":      86,
		"LANGUAGE_CODE_KU":      87,
		"LANGUAGE_CODE_KV":      88,
		"LANGUAGE_CODE_KW":      89,
		"LANGUAGE_CODE_KY":      90,
		"LANGUAGE_CODE_LA":      91,
		"LANGUAGE_CODE_LB":      92,
		"LANGUAGE_CODE_LG":      93,
		"LANGUAGE_CODE_LI":      94,
		"LANGUAGE_CODE_LN":      95,
		"LANGUAGE_CODE_LO":      96,
		"LANGUAGE_CODE_LT":      97,
		"LANGUAGE_CODE_LU":      98,
		"LANGUAGE_CODE_LV":      99,
		"LANGUAGE_CODE_MG":      100,
		"LANGUAGE_CODE_MH":      101,
		"LANGUAGE_CODE_MI":      102,
		"LANGUAGE_CODE_MK":      103,
		"LANGUAGE_CODE_ML":      104,
		"LANGUAGE_CODE_MM":      105,
		"LANGUAGE_CODE_MR":      106,
		"LANGUAGE_CODE_MS":      107,
		"LANGUAGE_CODE_MT":      108,
		"LANGUAGE_CODE_MY":      109,
		"LANGUAGE_CODE_NA":      110,
		"LANGUAGE_CODE_NB":      111,
		"LANGUAGE_CODE_ND":      112,
		"LANGUAGE_CODE_NE":      113,
		"LANGUAGE_CODE_NG":      114,
		"LANGUAGE_CODE_NL":      115,
		"LANGUAGE_CODE_NN":      116,
		"LANGUAGE_CODE_NO":      117,
		"LANGUAGE_CODE_NR":      118,
		"LANGUAGE_CODE_NV":      119,
		"LANGUAGE_CODE_NY":      120,
		"LANGUAGE_CODE_OC":      121,
		"LANGUAGE_CODE_OJ":      122,
		"LANGUAGE_CODE_OM":      123,
		"LANGUAGE_CODE_OR":      124,
		"LANGUAGE_CODE_OS":      125,
		"LANGUAGE_CODE_PA":      126,
		"LANGUAGE_CODE_PI":      127,
		"LANGUAGE_CODE_PL":      128,
		"LANGUAGE_CODE_PS":      129,
		"LANGUAGE_CODE_PT":      130,
		"LANGUAGE_CODE_QU":      131,
		"LANGUAGE_CODE_RM":      132,
		"LANGUAGE_CODE_RN":      133,
		"LANGUAGE_CODE_RO":      134,
		"LANGUAGE_CODE_RU":      135,
		"LANGUAGE_CODE_RW":      136,
		"LANGUAGE_CODE_SA":      137,
		"LANGUAGE_CODE_SC":      138,
		"LANGUAGE_CODE_SD":      139,
		"LANGUAGE_CODE_SE":      140,
		"LANGUAGE_CODE_SG":      141,
		"LANGUAGE_CODE_SI":      142,
		"LANGUAGE_CODE_SK":      143,
		"LANGUAGE_CODE_SL":      144,
		"LANGUAGE_CODE_SM":      145,
		"LANGUAGE_CODE_SN":      146,
		"LANGUAGE_CODE_SO":      147,
		"LANGUAGE_CODE_SQ":      148,
		"LANGUAGE_CODE_SR":      149,
		"LANGUAGE_CODE_SS":      150,
		"LANGUAGE_CODE_ST":      151,
		"LANGUAGE_CODE_SU":      152,
		"LANGUAGE_CODE_SV":      153,
		"LANGUAGE_CODE_SW":      154,
		"LANGUAGE_CODE_TA":      155,
		"LANGUAGE_CODE_TE":      156,
		"LANGUAGE_CODE_TG":      157,
		"LANGUAGE_CODE_TH":      158,
		"LANGUAGE_CODE_TI":      159,
		"LANGUAGE_CODE_TK":      160,
		"LANGUAGE_CODE_TL":      161,
		"LANGUAGE_CODE_TN":      162,
		"LANGUAGE_CODE_TO":      163,
		"LANGUAGE_CODE_TR":      164,
		"LANGUAGE_CODE_TS":      165,
		"LANGUAGE_CODE_TT":      166,
		"LANGUAGE_CODE_TW":      167,
		"LANGUAGE_CODE_TY":      168,
		"LANGUAGE_CODE_UG":      169,
		"LANGUAGE_CODE_UK":      170,
		"LANGUAGE_CODE_UR":      171,
		"LANGUAGE_CODE_UZ":      172,
		"LANGUAGE_CODE_VE":      173,
		"LANGUAGE_CODE_VI":      174,
		"LANGUAGE_CODE_VO":      175,
		"LANGUAGE_CODE_WA":      176,
		"LANGUAGE_CODE_WO":      177,
		"LANGUAGE_CODE_XH":      178,
		"LANGUAGE_CODE_YI":      179,
		"LANGUAGE_CODE_YO":      180,
		"LANGUAGE_CODE_ZA":      181,
		"LANGUAGE_CODE_ZH":      182,
		"LANGUAGE_CODE_ZU":      183,
	}
)

func (x LanguageCode) Enum() *LanguageCode {
	p := new(LanguageCode)
	*p = x
	return p
}

func (x LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[19].Descriptor()
}

func (LanguageCode) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[19]
}

func (x LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageCode.Descriptor instead.
func (LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{19}
}

type NetworkType int32

const (
	NetworkType_NETWORK_TYPE_INVALID     NetworkType = 0
	NetworkType_NETWORK_TYPE_INACTIVE    NetworkType = 1
	NetworkType_NETWORK_TYPE_WIFI        NetworkType = 2
	NetworkType_NETWORK_TYPE_CELLULAR    NetworkType = 3
	NetworkType_NETWORK_TYPE_CELLULAR_2G NetworkType = 4
	NetworkType_NETWORK_TYPE_CELLULAR_3G NetworkType = 5
	NetworkType_NETWORK_TYPE_CELLULAR_4G NetworkType = 6
	NetworkType_NETWORK_TYPE_CELLULAR_5G NetworkType = 7
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_INVALID",
		1: "NETWORK_TYPE_INACTIVE",
		2: "NETWORK_TYPE_WIFI",
		3: "NETWORK_TYPE_CELLULAR",
		4: "NETWORK_TYPE_CELLULAR_2G",
		5: "NETWORK_TYPE_CELLULAR_3G",
		6: "NETWORK_TYPE_CELLULAR_4G",
		7: "NETWORK_TYPE_CELLULAR_5G",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_INVALID":     0,
		"NETWORK_TYPE_INACTIVE":    1,
		"NETWORK_TYPE_WIFI":        2,
		"NETWORK_TYPE_CELLULAR":    3,
		"NETWORK_TYPE_CELLULAR_2G": 4,
		"NETWORK_TYPE_CELLULAR_3G": 5,
		"NETWORK_TYPE_CELLULAR_4G": 6,
		"NETWORK_TYPE_CELLULAR_5G": 7,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[20].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[20]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{20}
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_INVALID  LogLevel = 0
	LogLevel_LOG_LEVEL_DEBUG    LogLevel = 1
	LogLevel_LOG_LEVEL_INFO     LogLevel = 2
	LogLevel_LOG_LEVEL_WARNING  LogLevel = 3
	LogLevel_LOG_LEVEL_CRITICAL LogLevel = 4
	LogLevel_LOG_LEVEL_ERROR    LogLevel = 5
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_INVALID",
		1: "LOG_LEVEL_DEBUG",
		2: "LOG_LEVEL_INFO",
		3: "LOG_LEVEL_WARNING",
		4: "LOG_LEVEL_CRITICAL",
		5: "LOG_LEVEL_ERROR",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_INVALID":  0,
		"LOG_LEVEL_DEBUG":    1,
		"LOG_LEVEL_INFO":     2,
		"LOG_LEVEL_WARNING":  3,
		"LOG_LEVEL_CRITICAL": 4,
		"LOG_LEVEL_ERROR":    5,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[21].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[21]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{21}
}

type DurationMeasure_Category int32

const (
	DurationMeasure_CATEGORY_INVALID DurationMeasure_Category = 0
	DurationMeasure_CATEGORY_STARTUP DurationMeasure_Category = 1
)

// Enum value maps for DurationMeasure_Category.
var (
	DurationMeasure_Category_name = map[int32]string{
		0: "CATEGORY_INVALID",
		1: "CATEGORY_STARTUP",
	}
	DurationMeasure_Category_value = map[string]int32{
		"CATEGORY_INVALID": 0,
		"CATEGORY_STARTUP": 1,
	}
)

func (x DurationMeasure_Category) Enum() *DurationMeasure_Category {
	p := new(DurationMeasure_Category)
	*p = x
	return p
}

func (x DurationMeasure_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationMeasure_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_tinder_proto_enumTypes[22].Descriptor()
}

func (DurationMeasure_Category) Type() protoreflect.EnumType {
	return &file_tinder_proto_enumTypes[22]
}

func (x DurationMeasure_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationMeasure_Category.Descriptor instead.
func (DurationMeasure_Category) EnumDescriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{6, 0}
}

type InitialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AppEventData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InitialData) Reset() {
	*x = InitialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialData) ProtoMessage() {}

func (x *InitialData) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialData.ProtoReflect.Descriptor instead.
func (*InitialData) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{0}
}

func (x *InitialData) GetData() *AppEventData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	Events  []*Event                `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AppEventData) Reset() {
	*x = AppEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEventData) ProtoMessage() {}

func (x *AppEventData) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEventData.ProtoReflect.Descriptor instead.
func (*AppEventData) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{1}
}

func (x *AppEventData) GetBatchId() *wrapperspb.StringValue {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *AppEventData) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime   *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventSession *AppEventSession        `protobuf:"bytes,4,opt,name=event_session,json=eventSession,proto3" json:"event_session,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Event_Platform
	Value isEvent_Value `protobuf_oneof:"value"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Event) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Event) GetEventSession() *AppEventSession {
	if x != nil {
		return x.EventSession
	}
	return nil
}

func (m *Event) GetValue() isEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Event) GetPlatform() *AppPlatformEvent {
	if x, ok := x.GetValue().(*Event_Platform); ok {
		return x.Platform
	}
	return nil
}

type isEvent_Value interface {
	isEvent_Value()
}

type Event_Platform struct {
	Platform *AppPlatformEvent `protobuf:"bytes,9,opt,name=platform,proto3,oneof"`
}

func (*Event_Platform) isEvent_Value() {}

type AppPlatformEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AppPlatformEvent_NetworkPerf
	//	*AppPlatformEvent_BinaryParseErrorEvent
	//	*AppPlatformEvent_JsonParseErrorEvent
	//	*AppPlatformEvent_LogEvent
	//	*AppPlatformEvent_DurationMeasure
	//	*AppPlatformEvent_JsonEvent
	//	*AppPlatformEvent_HubbleInstrument
	//	*AppPlatformEvent_TestEvent_1
	Value isAppPlatformEvent_Value `protobuf_oneof:"value"`
}

func (x *AppPlatformEvent) Reset() {
	*x = AppPlatformEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPlatformEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPlatformEvent) ProtoMessage() {}

func (x *AppPlatformEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPlatformEvent.ProtoReflect.Descriptor instead.
func (*AppPlatformEvent) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{3}
}

func (m *AppPlatformEvent) GetValue() isAppPlatformEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AppPlatformEvent) GetNetworkPerf() *NetworkPerf {
	if x, ok := x.GetValue().(*AppPlatformEvent_NetworkPerf); ok {
		return x.NetworkPerf
	}
	return nil
}

func (x *AppPlatformEvent) GetBinaryParseErrorEvent() *BinaryParseErrorEvent {
	if x, ok := x.GetValue().(*AppPlatformEvent_BinaryParseErrorEvent); ok {
		return x.BinaryParseErrorEvent
	}
	return nil
}

func (x *AppPlatformEvent) GetJsonParseErrorEvent() *JsonParseErrorEvent {
	if x, ok := x.GetValue().(*AppPlatformEvent_JsonParseErrorEvent); ok {
		return x.JsonParseErrorEvent
	}
	return nil
}

func (x *AppPlatformEvent) GetLogEvent() *LogEvent {
	if x, ok := x.GetValue().(*AppPlatformEvent_LogEvent); ok {
		return x.LogEvent
	}
	return nil
}

func (x *AppPlatformEvent) GetDurationMeasure() *DurationMeasure {
	if x, ok := x.GetValue().(*AppPlatformEvent_DurationMeasure); ok {
		return x.DurationMeasure
	}
	return nil
}

func (x *AppPlatformEvent) GetJsonEvent() *JsonEvent {
	if x, ok := x.GetValue().(*AppPlatformEvent_JsonEvent); ok {
		return x.JsonEvent
	}
	return nil
}

func (x *AppPlatformEvent) GetHubbleInstrument() *HubbleInstrument {
	if x, ok := x.GetValue().(*AppPlatformEvent_HubbleInstrument); ok {
		return x.HubbleInstrument
	}
	return nil
}

func (x *AppPlatformEvent) GetTestEvent_1() *TestEvent1 {
	if x, ok := x.GetValue().(*AppPlatformEvent_TestEvent_1); ok {
		return x.TestEvent_1
	}
	return nil
}

type isAppPlatformEvent_Value interface {
	isAppPlatformEvent_Value()
}

type AppPlatformEvent_NetworkPerf struct {
	NetworkPerf *NetworkPerf `protobuf:"bytes,4,opt,name=network_perf,json=networkPerf,proto3,oneof"`
}

type AppPlatformEvent_BinaryParseErrorEvent struct {
	BinaryParseErrorEvent *BinaryParseErrorEvent `protobuf:"bytes,5,opt,name=binary_parse_error_event,json=binaryParseErrorEvent,proto3,oneof"`
}

type AppPlatformEvent_JsonParseErrorEvent struct {
	JsonParseErrorEvent *JsonParseErrorEvent `protobuf:"bytes,6,opt,name=json_parse_error_event,json=jsonParseErrorEvent,proto3,oneof"`
}

type AppPlatformEvent_LogEvent struct {
	LogEvent *LogEvent `protobuf:"bytes,7,opt,name=log_event,json=logEvent,proto3,oneof"`
}

type AppPlatformEvent_DurationMeasure struct {
	DurationMeasure *DurationMeasure `protobuf:"bytes,8,opt,name=duration_measure,json=durationMeasure,proto3,oneof"`
}

type AppPlatformEvent_JsonEvent struct {
	JsonEvent *JsonEvent `protobuf:"bytes,9,opt,name=json_event,json=jsonEvent,proto3,oneof"`
}

type AppPlatformEvent_HubbleInstrument struct {
	HubbleInstrument *HubbleInstrument `protobuf:"bytes,10,opt,name=hubble_instrument,json=hubbleInstrument,proto3,oneof"`
}

type AppPlatformEvent_TestEvent_1 struct {
	TestEvent_1 *TestEvent1 `protobuf:"bytes,1024,opt,name=test_event_1,json=testEvent1,proto3,oneof"`
}

func (*AppPlatformEvent_NetworkPerf) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_BinaryParseErrorEvent) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_JsonParseErrorEvent) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_LogEvent) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_DurationMeasure) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_JsonEvent) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_HubbleInstrument) isAppPlatformEvent_Value() {}

func (*AppPlatformEvent_TestEvent_1) isAppPlatformEvent_Value() {}

type TestEvent1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      TestEvent1Type          `protobuf:"varint,2,opt,name=type,proto3,enum=binary.TestEvent1Type" json:"type,omitempty"`
	Duration  *durationpb.Duration    `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Time      *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Count     *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsEnabled *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
}

func (x *TestEvent1) Reset() {
	*x = TestEvent1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestEvent1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEvent1) ProtoMessage() {}

func (x *TestEvent1) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEvent1.ProtoReflect.Descriptor instead.
func (*TestEvent1) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{4}
}

func (x *TestEvent1) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestEvent1) GetType() TestEvent1Type {
	if x != nil {
		return x.Type
	}
	return TestEvent1Type_TEST_EVENT1_TYPE_INVALID
}

func (x *TestEvent1) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TestEvent1) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TestEvent1) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *TestEvent1) GetIsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsEnabled
	}
	return nil
}

type HubbleInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              HubbleInstrumentType    `protobuf:"varint,2,opt,name=type,proto3,enum=binary.HubbleInstrumentType" json:"type,omitempty"`
	InstrumentDetails *InstrumentDetails      `protobuf:"bytes,3,opt,name=instrument_details,json=instrumentDetails,proto3" json:"instrument_details,omitempty"`
}

func (x *HubbleInstrument) Reset() {
	*x = HubbleInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubbleInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubbleInstrument) ProtoMessage() {}

func (x *HubbleInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubbleInstrument.ProtoReflect.Descriptor instead.
func (*HubbleInstrument) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{5}
}

func (x *HubbleInstrument) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HubbleInstrument) GetType() HubbleInstrumentType {
	if x != nil {
		return x.Type
	}
	return HubbleInstrumentType_HUBBLE_INSTRUMENT_TYPE_INVALID
}

func (x *HubbleInstrument) GetInstrumentDetails() *InstrumentDetails {
	if x != nil {
		return x.InstrumentDetails
	}
	return nil
}

type DurationMeasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category DurationMeasure_Category `protobuf:"varint,1,opt,name=category,proto3,enum=binary.DurationMeasure_Category" json:"category,omitempty"`
	Type     *wrapperspb.StringValue  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Subtype  *wrapperspb.StringValue  `protobuf:"bytes,3,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Duration *durationpb.Duration     `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Success  *wrapperspb.BoolValue    `protobuf:"bytes,5,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DurationMeasure) Reset() {
	*x = DurationMeasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationMeasure) ProtoMessage() {}

func (x *DurationMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationMeasure.ProtoReflect.Descriptor instead.
func (*DurationMeasure) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{6}
}

func (x *DurationMeasure) GetCategory() DurationMeasure_Category {
	if x != nil {
		return x.Category
	}
	return DurationMeasure_CATEGORY_INVALID
}

func (x *DurationMeasure) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DurationMeasure) GetSubtype() *wrapperspb.StringValue {
	if x != nil {
		return x.Subtype
	}
	return nil
}

func (x *DurationMeasure) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *DurationMeasure) GetSuccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source               *SourceDescriptor       `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	ExperienceId         ExperienceId            `protobuf:"varint,2,opt,name=experience_id,json=experienceId,proto3,enum=binary.ExperienceId" json:"experience_id,omitempty"`
	PreviousExperienceId ExperienceId            `protobuf:"varint,3,opt,name=previous_experience_id,json=previousExperienceId,proto3,enum=binary.ExperienceId" json:"previous_experience_id,omitempty"`
	FlowName             *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	ParentFlowName       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=parent_flow_name,json=parentFlowName,proto3" json:"parent_flow_name,omitempty"`
	StepName             *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	StepCount            *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	StatusCode           StatusCode              `protobuf:"varint,8,opt,name=status_code,json=statusCode,proto3,enum=binary.StatusCode" json:"status_code,omitempty"`
	StatusMessage        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{7}
}

func (x *Meta) GetSource() *SourceDescriptor {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Meta) GetExperienceId() ExperienceId {
	if x != nil {
		return x.ExperienceId
	}
	return ExperienceId_EXPERIENCE_ID_INVALID
}

func (x *Meta) GetPreviousExperienceId() ExperienceId {
	if x != nil {
		return x.PreviousExperienceId
	}
	return ExperienceId_EXPERIENCE_ID_INVALID
}

func (x *Meta) GetFlowName() *wrapperspb.StringValue {
	if x != nil {
		return x.FlowName
	}
	return nil
}

func (x *Meta) GetParentFlowName() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentFlowName
	}
	return nil
}

func (x *Meta) GetStepName() *wrapperspb.StringValue {
	if x != nil {
		return x.StepName
	}
	return nil
}

func (x *Meta) GetStepCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.StepCount
	}
	return nil
}

func (x *Meta) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_STATUS_CODE_INVALID
}

func (x *Meta) GetStatusMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

type SkuPackageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Price *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SkuPackageDetails) Reset() {
	*x = SkuPackageDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuPackageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuPackageDetails) ProtoMessage() {}

func (x *SkuPackageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuPackageDetails.ProtoReflect.Descriptor instead.
func (*SkuPackageDetails) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{8}
}

func (x *SkuPackageDetails) GetSku() *wrapperspb.StringValue {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *SkuPackageDetails) GetPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Price
	}
	return nil
}

type EventDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*EventDetails_SkuDetails
	Value isEventDetails_Value `protobuf_oneof:"value"`
}

func (x *EventDetails) Reset() {
	*x = EventDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDetails) ProtoMessage() {}

func (x *EventDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDetails.ProtoReflect.Descriptor instead.
func (*EventDetails) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{9}
}

func (m *EventDetails) GetValue() isEventDetails_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *EventDetails) GetSkuDetails() *SkuPackageDetails {
	if x, ok := x.GetValue().(*EventDetails_SkuDetails); ok {
		return x.SkuDetails
	}
	return nil
}

type isEventDetails_Value interface {
	isEventDetails_Value()
}

type EventDetails_SkuDetails struct {
	SkuDetails *SkuPackageDetails `protobuf:"bytes,1,opt,name=sku_details,json=skuDetails,proto3,oneof"`
}

func (*EventDetails_SkuDetails) isEventDetails_Value() {}

type InstrumentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType EntityType              `protobuf:"varint,4,opt,name=entity_type,json=entityType,proto3,enum=binary.EntityType" json:"entity_type,omitempty"`
	EntityId   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Types that are assignable to Value:
	//
	//	*InstrumentDetails_PaywallDetails
	//	*InstrumentDetails_RecsPhotoDetails
	//	*InstrumentDetails_RecsCoreDetails
	Value isInstrumentDetails_Value `protobuf_oneof:"value"`
}

func (x *InstrumentDetails) Reset() {
	*x = InstrumentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDetails) ProtoMessage() {}

func (x *InstrumentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDetails.ProtoReflect.Descriptor instead.
func (*InstrumentDetails) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{10}
}

func (x *InstrumentDetails) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_INVALID
}

func (x *InstrumentDetails) GetEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (m *InstrumentDetails) GetValue() isInstrumentDetails_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *InstrumentDetails) GetPaywallDetails() *PaywallDetails {
	if x, ok := x.GetValue().(*InstrumentDetails_PaywallDetails); ok {
		return x.PaywallDetails
	}
	return nil
}

func (x *InstrumentDetails) GetRecsPhotoDetails() *RecsPhotoDetails {
	if x, ok := x.GetValue().(*InstrumentDetails_RecsPhotoDetails); ok {
		return x.RecsPhotoDetails
	}
	return nil
}

func (x *InstrumentDetails) GetRecsCoreDetails() *RecsCoreDetails {
	if x, ok := x.GetValue().(*InstrumentDetails_RecsCoreDetails); ok {
		return x.RecsCoreDetails
	}
	return nil
}

type isInstrumentDetails_Value interface {
	isInstrumentDetails_Value()
}

type InstrumentDetails_PaywallDetails struct {
	PaywallDetails *PaywallDetails `protobuf:"bytes,1,opt,name=paywall_details,json=paywallDetails,proto3,oneof"`
}

type InstrumentDetails_RecsPhotoDetails struct {
	RecsPhotoDetails *RecsPhotoDetails `protobuf:"bytes,2,opt,name=recs_photo_details,json=recsPhotoDetails,proto3,oneof"`
}

type InstrumentDetails_RecsCoreDetails struct {
	RecsCoreDetails *RecsCoreDetails `protobuf:"bytes,20,opt,name=recs_core_details,json=recsCoreDetails,proto3,oneof"`
}

func (*InstrumentDetails_PaywallDetails) isInstrumentDetails_Value() {}

func (*InstrumentDetails_RecsPhotoDetails) isInstrumentDetails_Value() {}

func (*InstrumentDetails_RecsCoreDetails) isInstrumentDetails_Value() {}

type AppEventSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App      *AppAttributes      `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Auth     *AuthAttributes     `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Device   *DeviceAttributes   `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	Location *LocationAttributes `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	User     *UserAttributes     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AppEventSession) Reset() {
	*x = AppEventSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEventSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEventSession) ProtoMessage() {}

func (x *AppEventSession) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEventSession.ProtoReflect.Descriptor instead.
func (*AppEventSession) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{11}
}

func (x *AppEventSession) GetApp() *AppAttributes {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *AppEventSession) GetAuth() *AuthAttributes {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AppEventSession) GetDevice() *DeviceAttributes {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *AppEventSession) GetLocation() *LocationAttributes {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AppEventSession) GetUser() *UserAttributes {
	if x != nil {
		return x.User
	}
	return nil
}

type NetworkProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*NetworkProvider_Type
	Value isNetworkProvider_Value `protobuf_oneof:"value"`
}

func (x *NetworkProvider) Reset() {
	*x = NetworkProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProvider) ProtoMessage() {}

func (x *NetworkProvider) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProvider.ProtoReflect.Descriptor instead.
func (*NetworkProvider) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{12}
}

func (x *NetworkProvider) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *NetworkProvider) GetValue() isNetworkProvider_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NetworkProvider) GetType() NetworkType {
	if x, ok := x.GetValue().(*NetworkProvider_Type); ok {
		return x.Type
	}
	return NetworkType_NETWORK_TYPE_INVALID
}

type isNetworkProvider_Value interface {
	isNetworkProvider_Value()
}

type NetworkProvider_Type struct {
	Type NetworkType `protobuf:"varint,2,opt,name=type,proto3,enum=binary.NetworkType,oneof"`
}

func (*NetworkProvider_Type) isNetworkProvider_Value() {}

type DeviceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Locale                *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	PersistentId          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=persistent_id,json=persistentId,proto3" json:"persistent_id,omitempty"`
	Language              *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Manufacturer          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model                 *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	DeviceNetworkProvider *NetworkProvider        `protobuf:"bytes,7,opt,name=device_network_provider,json=deviceNetworkProvider,proto3" json:"device_network_provider,omitempty"`
	Platform              *DevicePlatform         `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	Power                 *PowerAttributes        `protobuf:"bytes,9,opt,name=power,proto3" json:"power,omitempty"`
	Memory                *MemoryAttributes       `protobuf:"bytes,10,opt,name=memory,proto3" json:"memory,omitempty"`
	CountryCode           CountryCode             `protobuf:"varint,11,opt,name=country_code,json=countryCode,proto3,enum=binary.CountryCode" json:"country_code,omitempty"`
	LanguageCode          LanguageCode            `protobuf:"varint,12,opt,name=language_code,json=languageCode,proto3,enum=binary.LanguageCode" json:"language_code,omitempty"`
	IsEmulator            *wrapperspb.BoolValue   `protobuf:"bytes,13,opt,name=is_emulator,json=isEmulator,proto3" json:"is_emulator,omitempty"`
}

func (x *DeviceAttributes) Reset() {
	*x = DeviceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAttributes) ProtoMessage() {}

func (x *DeviceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAttributes.ProtoReflect.Descriptor instead.
func (*DeviceAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceAttributes) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceAttributes) GetLocale() *wrapperspb.StringValue {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *DeviceAttributes) GetPersistentId() *wrapperspb.StringValue {
	if x != nil {
		return x.PersistentId
	}
	return nil
}

func (x *DeviceAttributes) GetLanguage() *wrapperspb.StringValue {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DeviceAttributes) GetManufacturer() *wrapperspb.StringValue {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *DeviceAttributes) GetModel() *wrapperspb.StringValue {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *DeviceAttributes) GetDeviceNetworkProvider() *NetworkProvider {
	if x != nil {
		return x.DeviceNetworkProvider
	}
	return nil
}

func (x *DeviceAttributes) GetPlatform() *DevicePlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *DeviceAttributes) GetPower() *PowerAttributes {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *DeviceAttributes) GetMemory() *MemoryAttributes {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *DeviceAttributes) GetCountryCode() CountryCode {
	if x != nil {
		return x.CountryCode
	}
	return CountryCode_COUNTRY_CODE_INVALID
}

func (x *DeviceAttributes) GetLanguageCode() LanguageCode {
	if x != nil {
		return x.LanguageCode
	}
	return LanguageCode_LANGUAGE_CODE_INVALID
}

func (x *DeviceAttributes) GetIsEmulator() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsEmulator
	}
	return nil
}

type ServiceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *ServiceName     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version *SemanticVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServiceAttributes) Reset() {
	*x = ServiceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAttributes) ProtoMessage() {}

func (x *ServiceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAttributes.ProtoReflect.Descriptor instead.
func (*ServiceAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{14}
}

func (x *ServiceAttributes) GetName() *ServiceName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ServiceAttributes) GetVersion() *SemanticVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type SourceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Feature         FeatureType             `protobuf:"varint,2,opt,name=feature,proto3,enum=binary.FeatureType" json:"feature,omitempty"`
	Element         UiElement               `protobuf:"varint,3,opt,name=element,proto3,enum=binary.UiElement" json:"element,omitempty"`
	EntityType      EntityType              `protobuf:"varint,4,opt,name=entity_type,json=entityType,proto3,enum=binary.EntityType" json:"entity_type,omitempty"`
	EntityId        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	SourceAction    SourceAction            `protobuf:"varint,6,opt,name=source_action,json=sourceAction,proto3,enum=binary.SourceAction" json:"source_action,omitempty"`
	SourceComponent SourceComponent         `protobuf:"varint,7,opt,name=source_component,json=sourceComponent,proto3,enum=binary.SourceComponent" json:"source_component,omitempty"`
	SourceId        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *SourceDescriptor) Reset() {
	*x = SourceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDescriptor) ProtoMessage() {}

func (x *SourceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDescriptor.ProtoReflect.Descriptor instead.
func (*SourceDescriptor) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{15}
}

func (x *SourceDescriptor) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *SourceDescriptor) GetFeature() FeatureType {
	if x != nil {
		return x.Feature
	}
	return FeatureType_FEATURE_TYPE_INVALID
}

func (x *SourceDescriptor) GetElement() UiElement {
	if x != nil {
		return x.Element
	}
	return UiElement_UI_ELEMENT_INVALID
}

func (x *SourceDescriptor) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_INVALID
}

func (x *SourceDescriptor) GetEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *SourceDescriptor) GetSourceAction() SourceAction {
	if x != nil {
		return x.SourceAction
	}
	return SourceAction_SOURCE_ACTION_INVALID
}

func (x *SourceDescriptor) GetSourceComponent() SourceComponent {
	if x != nil {
		return x.SourceComponent
	}
	return SourceComponent_SOURCE_COMPONENT_INVALID
}

func (x *SourceDescriptor) GetSourceId() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceId
	}
	return nil
}

type BinaryParseErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Bytes   *wrapperspb.BytesValue  `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *BinaryParseErrorEvent) Reset() {
	*x = BinaryParseErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryParseErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryParseErrorEvent) ProtoMessage() {}

func (x *BinaryParseErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryParseErrorEvent.ProtoReflect.Descriptor instead.
func (*BinaryParseErrorEvent) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{16}
}

func (x *BinaryParseErrorEvent) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *BinaryParseErrorEvent) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BinaryParseErrorEvent) GetBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type JsonParseErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Json    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *JsonParseErrorEvent) Reset() {
	*x = JsonParseErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonParseErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonParseErrorEvent) ProtoMessage() {}

func (x *JsonParseErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonParseErrorEvent.ProtoReflect.Descriptor instead.
func (*JsonParseErrorEvent) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{17}
}

func (x *JsonParseErrorEvent) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *JsonParseErrorEvent) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *JsonParseErrorEvent) GetJson() *wrapperspb.StringValue {
	if x != nil {
		return x.Json
	}
	return nil
}

type PaywallDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature FeatureType `protobuf:"varint,1,opt,name=feature,proto3,enum=binary.FeatureType" json:"feature,omitempty"`
}

func (x *PaywallDetails) Reset() {
	*x = PaywallDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaywallDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaywallDetails) ProtoMessage() {}

func (x *PaywallDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaywallDetails.ProtoReflect.Descriptor instead.
func (*PaywallDetails) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{18}
}

func (x *PaywallDetails) GetFeature() FeatureType {
	if x != nil {
		return x.Feature
	}
	return FeatureType_FEATURE_TYPE_INVALID
}

type ServiceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ServiceName_PurchaseService
	//	*ServiceName_Test
	Value isServiceName_Value `protobuf_oneof:"value"`
}

func (x *ServiceName) Reset() {
	*x = ServiceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceName) ProtoMessage() {}

func (x *ServiceName) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceName.ProtoReflect.Descriptor instead.
func (*ServiceName) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{19}
}

func (m *ServiceName) GetValue() isServiceName_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ServiceName) GetPurchaseService() *PurchaseService {
	if x, ok := x.GetValue().(*ServiceName_PurchaseService); ok {
		return x.PurchaseService
	}
	return nil
}

func (x *ServiceName) GetTest() *TestService {
	if x, ok := x.GetValue().(*ServiceName_Test); ok {
		return x.Test
	}
	return nil
}

type isServiceName_Value interface {
	isServiceName_Value()
}

type ServiceName_PurchaseService struct {
	PurchaseService *PurchaseService `protobuf:"bytes,1,opt,name=purchase_service,json=purchaseService,proto3,oneof"`
}

type ServiceName_Test struct {
	Test *TestService `protobuf:"bytes,1024,opt,name=test,proto3,oneof"`
}

func (*ServiceName_PurchaseService) isServiceName_Value() {}

func (*ServiceName_Test) isServiceName_Value() {}

type PurchaseService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurchaseService) Reset() {
	*x = PurchaseService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseService) ProtoMessage() {}

func (x *PurchaseService) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseService.ProtoReflect.Descriptor instead.
func (*PurchaseService) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{20}
}

type TestService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestService) Reset() {
	*x = TestService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestService) ProtoMessage() {}

func (x *TestService) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestService.ProtoReflect.Descriptor instead.
func (*TestService) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{21}
}

type ServerAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatingSystem *OperatingSystem `protobuf:"bytes,1,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
}

func (x *ServerAttributes) Reset() {
	*x = ServerAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAttributes) ProtoMessage() {}

func (x *ServerAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAttributes.ProtoReflect.Descriptor instead.
func (*ServerAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{22}
}

func (x *ServerAttributes) GetOperatingSystem() *OperatingSystem {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

type LocationAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat          *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon          *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=lon,proto3" json:"lon,omitempty"`
	LocationTime *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=location_time,json=locationTime,proto3" json:"location_time,omitempty"`
}

func (x *LocationAttributes) Reset() {
	*x = LocationAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAttributes) ProtoMessage() {}

func (x *LocationAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAttributes.ProtoReflect.Descriptor instead.
func (*LocationAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{23}
}

func (x *LocationAttributes) GetLat() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lat
	}
	return nil
}

func (x *LocationAttributes) GetLon() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lon
	}
	return nil
}

func (x *LocationAttributes) GetLocationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LocationTime
	}
	return nil
}

type OperatingSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsVersion *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Types that are assignable to Type:
	//
	//	*OperatingSystem_Linux
	//	*OperatingSystem_Darwin
	//	*OperatingSystem_Windows
	Type isOperatingSystem_Type `protobuf_oneof:"type"`
}

func (x *OperatingSystem) Reset() {
	*x = OperatingSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatingSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatingSystem) ProtoMessage() {}

func (x *OperatingSystem) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatingSystem.ProtoReflect.Descriptor instead.
func (*OperatingSystem) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{24}
}

func (x *OperatingSystem) GetOsVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (m *OperatingSystem) GetType() isOperatingSystem_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *OperatingSystem) GetLinux() *Linux {
	if x, ok := x.GetType().(*OperatingSystem_Linux); ok {
		return x.Linux
	}
	return nil
}

func (x *OperatingSystem) GetDarwin() *Darwin {
	if x, ok := x.GetType().(*OperatingSystem_Darwin); ok {
		return x.Darwin
	}
	return nil
}

func (x *OperatingSystem) GetWindows() *Windows {
	if x, ok := x.GetType().(*OperatingSystem_Windows); ok {
		return x.Windows
	}
	return nil
}

type isOperatingSystem_Type interface {
	isOperatingSystem_Type()
}

type OperatingSystem_Linux struct {
	Linux *Linux `protobuf:"bytes,5,opt,name=linux,proto3,oneof"`
}

type OperatingSystem_Darwin struct {
	Darwin *Darwin `protobuf:"bytes,6,opt,name=darwin,proto3,oneof"`
}

type OperatingSystem_Windows struct {
	Windows *Windows `protobuf:"bytes,7,opt,name=windows,proto3,oneof"`
}

func (*OperatingSystem_Linux) isOperatingSystem_Type() {}

func (*OperatingSystem_Darwin) isOperatingSystem_Type() {}

func (*OperatingSystem_Windows) isOperatingSystem_Type() {}

type Linux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *SemanticVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Linux) Reset() {
	*x = Linux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Linux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linux) ProtoMessage() {}

func (x *Linux) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linux.ProtoReflect.Descriptor instead.
func (*Linux) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{25}
}

func (x *Linux) GetVersion() *SemanticVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type Darwin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *SemanticVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Darwin) Reset() {
	*x = Darwin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Darwin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Darwin) ProtoMessage() {}

func (x *Darwin) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Darwin.ProtoReflect.Descriptor instead.
func (*Darwin) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{26}
}

func (x *Darwin) GetVersion() *SemanticVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type Windows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *SemanticVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Windows) Reset() {
	*x = Windows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Windows) ProtoMessage() {}

func (x *Windows) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Windows.ProtoReflect.Descriptor instead.
func (*Windows) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{27}
}

func (x *Windows) GetVersion() *SemanticVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type AuthAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthId        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	AuthSessionId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=auth_session_id,json=authSessionId,proto3" json:"auth_session_id,omitempty"`
}

func (x *AuthAttributes) Reset() {
	*x = AuthAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthAttributes) ProtoMessage() {}

func (x *AuthAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthAttributes.ProtoReflect.Descriptor instead.
func (*AuthAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{28}
}

func (x *AuthAttributes) GetAuthId() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthId
	}
	return nil
}

func (x *AuthAttributes) GetAuthSessionId() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthSessionId
	}
	return nil
}

type AppAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *AppName         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version *SemanticVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Session *AppSession      `protobuf:"bytes,1024,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *AppAttributes) Reset() {
	*x = AppAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAttributes) ProtoMessage() {}

func (x *AppAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAttributes.ProtoReflect.Descriptor instead.
func (*AppAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{29}
}

func (x *AppAttributes) GetName() *AppName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AppAttributes) GetVersion() *SemanticVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *AppAttributes) GetSession() *AppSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type AppSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionTimeElapsed *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=session_time_elapsed,json=sessionTimeElapsed,proto3" json:"session_time_elapsed,omitempty"`
}

func (x *AppSession) Reset() {
	*x = AppSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSession) ProtoMessage() {}

func (x *AppSession) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSession.ProtoReflect.Descriptor instead.
func (*AppSession) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{30}
}

func (x *AppSession) GetSessionId() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *AppSession) GetSessionTimeElapsed() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionTimeElapsed
	}
	return nil
}

type UserAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Session      *UserSession            `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	UserType     UserType                `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=binary.UserType" json:"user_type,omitempty"`
	UserGender   Gender                  `protobuf:"varint,4,opt,name=user_gender,json=userGender,proto3,enum=binary.Gender" json:"user_gender,omitempty"`
	TargetGender Gender                  `protobuf:"varint,5,opt,name=target_gender,json=targetGender,proto3,enum=binary.Gender" json:"target_gender,omitempty"`
}

func (x *UserAttributes) Reset() {
	*x = UserAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttributes) ProtoMessage() {}

func (x *UserAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttributes.ProtoReflect.Descriptor instead.
func (*UserAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{31}
}

func (x *UserAttributes) GetUid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *UserAttributes) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *UserAttributes) GetUserType() UserType {
	if x != nil {
		return x.UserType
	}
	return UserType_USER_TYPE_INVALID
}

func (x *UserAttributes) GetUserGender() Gender {
	if x != nil {
		return x.UserGender
	}
	return Gender_GENDER_INVALID
}

func (x *UserAttributes) GetTargetGender() Gender {
	if x != nil {
		return x.TargetGender
	}
	return Gender_GENDER_INVALID
}

type UserSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionTimeDuration *durationpb.Duration    `protobuf:"bytes,2,opt,name=session_time_duration,json=sessionTimeDuration,proto3" json:"session_time_duration,omitempty"`
}

func (x *UserSession) Reset() {
	*x = UserSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession) ProtoMessage() {}

func (x *UserSession) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession.ProtoReflect.Descriptor instead.
func (*UserSession) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{32}
}

func (x *UserSession) GetSessionId() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *UserSession) GetSessionTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.SessionTimeDuration
	}
	return nil
}

type AppName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AppName_Tinder
	//	*AppName_AnalyticsSdkDemo
	//	*AppName_TestApp
	Value isAppName_Value `protobuf_oneof:"value"`
}

func (x *AppName) Reset() {
	*x = AppName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppName) ProtoMessage() {}

func (x *AppName) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppName.ProtoReflect.Descriptor instead.
func (*AppName) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{33}
}

func (m *AppName) GetValue() isAppName_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AppName) GetTinder() *TinderApp {
	if x, ok := x.GetValue().(*AppName_Tinder); ok {
		return x.Tinder
	}
	return nil
}

func (x *AppName) GetAnalyticsSdkDemo() *AnalyticsSdkDemoApp {
	if x, ok := x.GetValue().(*AppName_AnalyticsSdkDemo); ok {
		return x.AnalyticsSdkDemo
	}
	return nil
}

func (x *AppName) GetTestApp() *TestApp {
	if x, ok := x.GetValue().(*AppName_TestApp); ok {
		return x.TestApp
	}
	return nil
}

type isAppName_Value interface {
	isAppName_Value()
}

type AppName_Tinder struct {
	Tinder *TinderApp `protobuf:"bytes,1,opt,name=tinder,proto3,oneof"`
}

type AppName_AnalyticsSdkDemo struct {
	AnalyticsSdkDemo *AnalyticsSdkDemoApp `protobuf:"bytes,2,opt,name=analytics_sdk_demo,json=analyticsSdkDemo,proto3,oneof"`
}

type AppName_TestApp struct {
	TestApp *TestApp `protobuf:"bytes,3,opt,name=test_app,json=testApp,proto3,oneof"`
}

func (*AppName_Tinder) isAppName_Value() {}

func (*AppName_AnalyticsSdkDemo) isAppName_Value() {}

func (*AppName_TestApp) isAppName_Value() {}

type TestApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TestApp) Reset() {
	*x = TestApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestApp) ProtoMessage() {}

func (x *TestApp) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestApp.ProtoReflect.Descriptor instead.
func (*TestApp) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{34}
}

func (x *TestApp) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type AnalyticsSdkDemoApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyticsSdkDemoApp) Reset() {
	*x = AnalyticsSdkDemoApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsSdkDemoApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsSdkDemoApp) ProtoMessage() {}

func (x *AnalyticsSdkDemoApp) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsSdkDemoApp.ProtoReflect.Descriptor instead.
func (*AnalyticsSdkDemoApp) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{35}
}

type ContentDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ContentDescriptor) Reset() {
	*x = ContentDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentDescriptor) ProtoMessage() {}

func (x *ContentDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentDescriptor.ProtoReflect.Descriptor instead.
func (*ContentDescriptor) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{36}
}

func (x *ContentDescriptor) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContentDescriptor) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type RecsPhotoDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	Url     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RecsPhotoDetails) Reset() {
	*x = RecsPhotoDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecsPhotoDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecsPhotoDetails) ProtoMessage() {}

func (x *RecsPhotoDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecsPhotoDetails.ProtoReflect.Descriptor instead.
func (*RecsPhotoDetails) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{37}
}

func (x *RecsPhotoDetails) GetPhotoId() *wrapperspb.StringValue {
	if x != nil {
		return x.PhotoId
	}
	return nil
}

func (x *RecsPhotoDetails) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type RecsCoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIndex   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=request_index,json=requestIndex,proto3" json:"request_index,omitempty"`
	DiscoveryIndex *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=discovery_index,json=discoveryIndex,proto3" json:"discovery_index,omitempty"`
	RecsCardsCount *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=recs_cards_count,json=recsCardsCount,proto3" json:"recs_cards_count,omitempty"`
}

func (x *RecsCoreDetails) Reset() {
	*x = RecsCoreDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecsCoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecsCoreDetails) ProtoMessage() {}

func (x *RecsCoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecsCoreDetails.ProtoReflect.Descriptor instead.
func (*RecsCoreDetails) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{38}
}

func (x *RecsCoreDetails) GetRequestIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.RequestIndex
	}
	return nil
}

func (x *RecsCoreDetails) GetDiscoveryIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.DiscoveryIndex
	}
	return nil
}

func (x *RecsCoreDetails) GetRecsCardsCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.RecsCardsCount
	}
	return nil
}

type CustomConversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeConverter *TypeAttributeConverter `protobuf:"bytes,1075,opt,name=attribute_converter,json=attributeConverter,proto3" json:"attribute_converter,omitempty"`
	OutputType         string                  `protobuf:"bytes,1076,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
}

func (x *CustomConversion) Reset() {
	*x = CustomConversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomConversion) ProtoMessage() {}

func (x *CustomConversion) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomConversion.ProtoReflect.Descriptor instead.
func (*CustomConversion) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{39}
}

func (x *CustomConversion) GetAttributeConverter() *TypeAttributeConverter {
	if x != nil {
		return x.AttributeConverter
	}
	return nil
}

func (x *CustomConversion) GetOutputType() string {
	if x != nil {
		return x.OutputType
	}
	return ""
}

type EventRecordRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Includes []EventAttribute `protobuf:"varint,1073,rep,packed,name=includes,proto3,enum=binary.EventAttribute" json:"includes,omitempty"`
}

func (x *EventRecordRoot) Reset() {
	*x = EventRecordRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRecordRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRecordRoot) ProtoMessage() {}

func (x *EventRecordRoot) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRecordRoot.ProtoReflect.Descriptor instead.
func (*EventRecordRoot) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{40}
}

func (x *EventRecordRoot) GetIncludes() []EventAttribute {
	if x != nil {
		return x.Includes
	}
	return nil
}

type TinderApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TinderApp) Reset() {
	*x = TinderApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TinderApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TinderApp) ProtoMessage() {}

func (x *TinderApp) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TinderApp.ProtoReflect.Descriptor instead.
func (*TinderApp) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{41}
}

type TypeConverterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Mapping map[string]*TypeAttributeConfig `protobuf:"bytes,2,rep,name=mapping,proto3" json:"mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypeConverterConfig) Reset() {
	*x = TypeConverterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeConverterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeConverterConfig) ProtoMessage() {}

func (x *TypeConverterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeConverterConfig.ProtoReflect.Descriptor instead.
func (*TypeConverterConfig) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{42}
}

func (x *TypeConverterConfig) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TypeConverterConfig) GetMapping() map[string]*TypeAttributeConfig {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type TypeAttributeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string                    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Converter   []*TypeAttributeConverter `protobuf:"bytes,2,rep,name=converter,proto3" json:"converter,omitempty"`
	SourceAlias string                    `protobuf:"bytes,3,opt,name=source_alias,json=sourceAlias,proto3" json:"source_alias,omitempty"`
	Repeated    bool                      `protobuf:"varint,4,opt,name=repeated,proto3" json:"repeated,omitempty"`
}

func (x *TypeAttributeConfig) Reset() {
	*x = TypeAttributeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeAttributeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAttributeConfig) ProtoMessage() {}

func (x *TypeAttributeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAttributeConfig.ProtoReflect.Descriptor instead.
func (*TypeAttributeConfig) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{43}
}

func (x *TypeAttributeConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TypeAttributeConfig) GetConverter() []*TypeAttributeConverter {
	if x != nil {
		return x.Converter
	}
	return nil
}

func (x *TypeAttributeConfig) GetSourceAlias() string {
	if x != nil {
		return x.SourceAlias
	}
	return ""
}

func (x *TypeAttributeConfig) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

type TypeAttributeConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*TypeAttributeConverter_Identity
	//	*TypeAttributeConverter_Uppercase
	//	*TypeAttributeConverter_Lowercase
	//	*TypeAttributeConverter_Substring
	//	*TypeAttributeConverter_Int32ToEnum
	//	*TypeAttributeConverter_StringToEnum
	//	*TypeAttributeConverter_TimeUnitToTimestamp
	//	*TypeAttributeConverter_TimeUnitToDuration
	//	*TypeAttributeConverter_TimestampToTimeUnit
	//	*TypeAttributeConverter_DurationToTimeUnit
	//	*TypeAttributeConverter_EnumToString
	//	*TypeAttributeConverter_EnumToInt32
	//	*TypeAttributeConverter_RepeatedToString
	//	*TypeAttributeConverter_SemanticVersionToString
	//	*TypeAttributeConverter_OneofNameToString
	Value isTypeAttributeConverter_Value `protobuf_oneof:"value"`
}

func (x *TypeAttributeConverter) Reset() {
	*x = TypeAttributeConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeAttributeConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAttributeConverter) ProtoMessage() {}

func (x *TypeAttributeConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAttributeConverter.ProtoReflect.Descriptor instead.
func (*TypeAttributeConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{44}
}

func (m *TypeAttributeConverter) GetValue() isTypeAttributeConverter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TypeAttributeConverter) GetIdentity() *IdentityConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *TypeAttributeConverter) GetUppercase() *UppercaseConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_Uppercase); ok {
		return x.Uppercase
	}
	return nil
}

func (x *TypeAttributeConverter) GetLowercase() *LowercaseConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_Lowercase); ok {
		return x.Lowercase
	}
	return nil
}

func (x *TypeAttributeConverter) GetSubstring() *SubstringConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_Substring); ok {
		return x.Substring
	}
	return nil
}

func (x *TypeAttributeConverter) GetInt32ToEnum() *IntegerToEnumConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_Int32ToEnum); ok {
		return x.Int32ToEnum
	}
	return nil
}

func (x *TypeAttributeConverter) GetStringToEnum() *StringToEnumConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_StringToEnum); ok {
		return x.StringToEnum
	}
	return nil
}

func (x *TypeAttributeConverter) GetTimeUnitToTimestamp() *TimeUnitToTimestampConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_TimeUnitToTimestamp); ok {
		return x.TimeUnitToTimestamp
	}
	return nil
}

func (x *TypeAttributeConverter) GetTimeUnitToDuration() *TimeUnitToDurationConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_TimeUnitToDuration); ok {
		return x.TimeUnitToDuration
	}
	return nil
}

func (x *TypeAttributeConverter) GetTimestampToTimeUnit() *TimestampToTimeUnitConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_TimestampToTimeUnit); ok {
		return x.TimestampToTimeUnit
	}
	return nil
}

func (x *TypeAttributeConverter) GetDurationToTimeUnit() *DurationToTimeUnitConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_DurationToTimeUnit); ok {
		return x.DurationToTimeUnit
	}
	return nil
}

func (x *TypeAttributeConverter) GetEnumToString() *EnumToStringConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_EnumToString); ok {
		return x.EnumToString
	}
	return nil
}

func (x *TypeAttributeConverter) GetEnumToInt32() *EnumToIntegerConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_EnumToInt32); ok {
		return x.EnumToInt32
	}
	return nil
}

func (x *TypeAttributeConverter) GetRepeatedToString() *RepeatedToStringConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_RepeatedToString); ok {
		return x.RepeatedToString
	}
	return nil
}

func (x *TypeAttributeConverter) GetSemanticVersionToString() *SemanticVersionToStringConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_SemanticVersionToString); ok {
		return x.SemanticVersionToString
	}
	return nil
}

func (x *TypeAttributeConverter) GetOneofNameToString() *OneofNameToStringConverter {
	if x, ok := x.GetValue().(*TypeAttributeConverter_OneofNameToString); ok {
		return x.OneofNameToString
	}
	return nil
}

type isTypeAttributeConverter_Value interface {
	isTypeAttributeConverter_Value()
}

type TypeAttributeConverter_Identity struct {
	Identity *IdentityConverter `protobuf:"bytes,6,opt,name=identity,proto3,oneof"`
}

type TypeAttributeConverter_Uppercase struct {
	Uppercase *UppercaseConverter `protobuf:"bytes,7,opt,name=uppercase,proto3,oneof"`
}

type TypeAttributeConverter_Lowercase struct {
	Lowercase *LowercaseConverter `protobuf:"bytes,8,opt,name=lowercase,proto3,oneof"`
}

type TypeAttributeConverter_Substring struct {
	Substring *SubstringConverter `protobuf:"bytes,9,opt,name=substring,proto3,oneof"`
}

type TypeAttributeConverter_Int32ToEnum struct {
	Int32ToEnum *IntegerToEnumConverter `protobuf:"bytes,10,opt,name=int32_to_enum,json=int32ToEnum,proto3,oneof"`
}

type TypeAttributeConverter_StringToEnum struct {
	StringToEnum *StringToEnumConverter `protobuf:"bytes,11,opt,name=string_to_enum,json=stringToEnum,proto3,oneof"`
}

type TypeAttributeConverter_TimeUnitToTimestamp struct {
	TimeUnitToTimestamp *TimeUnitToTimestampConverter `protobuf:"bytes,12,opt,name=time_unit_to_timestamp,json=timeUnitToTimestamp,proto3,oneof"`
}

type TypeAttributeConverter_TimeUnitToDuration struct {
	TimeUnitToDuration *TimeUnitToDurationConverter `protobuf:"bytes,13,opt,name=time_unit_to_duration,json=timeUnitToDuration,proto3,oneof"`
}

type TypeAttributeConverter_TimestampToTimeUnit struct {
	TimestampToTimeUnit *TimestampToTimeUnitConverter `protobuf:"bytes,14,opt,name=timestamp_to_time_unit,json=timestampToTimeUnit,proto3,oneof"`
}

type TypeAttributeConverter_DurationToTimeUnit struct {
	DurationToTimeUnit *DurationToTimeUnitConverter `protobuf:"bytes,15,opt,name=duration_to_time_unit,json=durationToTimeUnit,proto3,oneof"`
}

type TypeAttributeConverter_EnumToString struct {
	EnumToString *EnumToStringConverter `protobuf:"bytes,16,opt,name=enum_to_string,json=enumToString,proto3,oneof"`
}

type TypeAttributeConverter_EnumToInt32 struct {
	EnumToInt32 *EnumToIntegerConverter `protobuf:"bytes,17,opt,name=enum_to_int32,json=enumToInt32,proto3,oneof"`
}

type TypeAttributeConverter_RepeatedToString struct {
	RepeatedToString *RepeatedToStringConverter `protobuf:"bytes,18,opt,name=repeated_to_string,json=repeatedToString,proto3,oneof"`
}

type TypeAttributeConverter_SemanticVersionToString struct {
	SemanticVersionToString *SemanticVersionToStringConverter `protobuf:"bytes,19,opt,name=semantic_version_to_string,json=semanticVersionToString,proto3,oneof"`
}

type TypeAttributeConverter_OneofNameToString struct {
	OneofNameToString *OneofNameToStringConverter `protobuf:"bytes,20,opt,name=oneof_name_to_string,json=oneofNameToString,proto3,oneof"`
}

func (*TypeAttributeConverter_Identity) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_Uppercase) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_Lowercase) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_Substring) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_Int32ToEnum) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_StringToEnum) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_TimeUnitToTimestamp) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_TimeUnitToDuration) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_TimestampToTimeUnit) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_DurationToTimeUnit) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_EnumToString) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_EnumToInt32) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_RepeatedToString) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_SemanticVersionToString) isTypeAttributeConverter_Value() {}

func (*TypeAttributeConverter_OneofNameToString) isTypeAttributeConverter_Value() {}

type IdentityConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentityConverter) Reset() {
	*x = IdentityConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConverter) ProtoMessage() {}

func (x *IdentityConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConverter.ProtoReflect.Descriptor instead.
func (*IdentityConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{45}
}

type UppercaseConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UppercaseConverter) Reset() {
	*x = UppercaseConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UppercaseConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UppercaseConverter) ProtoMessage() {}

func (x *UppercaseConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UppercaseConverter.ProtoReflect.Descriptor instead.
func (*UppercaseConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{46}
}

type LowercaseConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LowercaseConverter) Reset() {
	*x = LowercaseConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowercaseConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowercaseConverter) ProtoMessage() {}

func (x *LowercaseConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowercaseConverter.ProtoReflect.Descriptor instead.
func (*LowercaseConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{47}
}

type RepeatedToStringConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepeatedToStringConverter) Reset() {
	*x = RepeatedToStringConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedToStringConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedToStringConverter) ProtoMessage() {}

func (x *RepeatedToStringConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedToStringConverter.ProtoReflect.Descriptor instead.
func (*RepeatedToStringConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{48}
}

type IntegerToEnumConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping map[int32]int32 `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *IntegerToEnumConverter) Reset() {
	*x = IntegerToEnumConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerToEnumConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerToEnumConverter) ProtoMessage() {}

func (x *IntegerToEnumConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerToEnumConverter.ProtoReflect.Descriptor instead.
func (*IntegerToEnumConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{49}
}

func (x *IntegerToEnumConverter) GetMapping() map[int32]int32 {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type EnumToIntegerConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping map[int32]int32 `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnumToIntegerConverter) Reset() {
	*x = EnumToIntegerConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumToIntegerConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumToIntegerConverter) ProtoMessage() {}

func (x *EnumToIntegerConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumToIntegerConverter.ProtoReflect.Descriptor instead.
func (*EnumToIntegerConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{50}
}

func (x *EnumToIntegerConverter) GetMapping() map[int32]int32 {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type StringToEnumConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping map[string]int32 `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StringToEnumConverter) Reset() {
	*x = StringToEnumConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringToEnumConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringToEnumConverter) ProtoMessage() {}

func (x *StringToEnumConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringToEnumConverter.ProtoReflect.Descriptor instead.
func (*StringToEnumConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{51}
}

func (x *StringToEnumConverter) GetMapping() map[string]int32 {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type EnumToStringConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping map[int32]string `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnumToStringConverter) Reset() {
	*x = EnumToStringConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumToStringConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumToStringConverter) ProtoMessage() {}

func (x *EnumToStringConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumToStringConverter.ProtoReflect.Descriptor instead.
func (*EnumToStringConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{52}
}

func (x *EnumToStringConverter) GetMapping() map[int32]string {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type SubstringConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SubstringConverter) Reset() {
	*x = SubstringConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstringConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstringConverter) ProtoMessage() {}

func (x *SubstringConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstringConverter.ProtoReflect.Descriptor instead.
func (*SubstringConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{53}
}

func (x *SubstringConverter) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SubstringConverter) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type TimeUnitToTimestampConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnit TimeUnit `protobuf:"varint,1,opt,name=time_unit,json=timeUnit,proto3,enum=binary.TimeUnit" json:"time_unit,omitempty"`
}

func (x *TimeUnitToTimestampConverter) Reset() {
	*x = TimeUnitToTimestampConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeUnitToTimestampConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeUnitToTimestampConverter) ProtoMessage() {}

func (x *TimeUnitToTimestampConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeUnitToTimestampConverter.ProtoReflect.Descriptor instead.
func (*TimeUnitToTimestampConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{54}
}

func (x *TimeUnitToTimestampConverter) GetTimeUnit() TimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return TimeUnit_TIME_UNIT_INVALID
}

type TimeUnitToDurationConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnit TimeUnit `protobuf:"varint,1,opt,name=time_unit,json=timeUnit,proto3,enum=binary.TimeUnit" json:"time_unit,omitempty"`
}

func (x *TimeUnitToDurationConverter) Reset() {
	*x = TimeUnitToDurationConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeUnitToDurationConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeUnitToDurationConverter) ProtoMessage() {}

func (x *TimeUnitToDurationConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeUnitToDurationConverter.ProtoReflect.Descriptor instead.
func (*TimeUnitToDurationConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{55}
}

func (x *TimeUnitToDurationConverter) GetTimeUnit() TimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return TimeUnit_TIME_UNIT_INVALID
}

type DurationToTimeUnitConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnit TimeUnit `protobuf:"varint,1,opt,name=time_unit,json=timeUnit,proto3,enum=binary.TimeUnit" json:"time_unit,omitempty"`
}

func (x *DurationToTimeUnitConverter) Reset() {
	*x = DurationToTimeUnitConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationToTimeUnitConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationToTimeUnitConverter) ProtoMessage() {}

func (x *DurationToTimeUnitConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationToTimeUnitConverter.ProtoReflect.Descriptor instead.
func (*DurationToTimeUnitConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{56}
}

func (x *DurationToTimeUnitConverter) GetTimeUnit() TimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return TimeUnit_TIME_UNIT_INVALID
}

type TimestampToTimeUnitConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnit TimeUnit `protobuf:"varint,1,opt,name=time_unit,json=timeUnit,proto3,enum=binary.TimeUnit" json:"time_unit,omitempty"`
}

func (x *TimestampToTimeUnitConverter) Reset() {
	*x = TimestampToTimeUnitConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampToTimeUnitConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampToTimeUnitConverter) ProtoMessage() {}

func (x *TimestampToTimeUnitConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampToTimeUnitConverter.ProtoReflect.Descriptor instead.
func (*TimestampToTimeUnitConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{57}
}

func (x *TimestampToTimeUnitConverter) GetTimeUnit() TimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return TimeUnit_TIME_UNIT_INVALID
}

type SemanticVersionToStringConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeBuild   bool `protobuf:"varint,1,opt,name=include_build,json=includeBuild,proto3" json:"include_build,omitempty"`
	IncludeRelease bool `protobuf:"varint,2,opt,name=include_release,json=includeRelease,proto3" json:"include_release,omitempty"`
}

func (x *SemanticVersionToStringConverter) Reset() {
	*x = SemanticVersionToStringConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticVersionToStringConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticVersionToStringConverter) ProtoMessage() {}

func (x *SemanticVersionToStringConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticVersionToStringConverter.ProtoReflect.Descriptor instead.
func (*SemanticVersionToStringConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{58}
}

func (x *SemanticVersionToStringConverter) GetIncludeBuild() bool {
	if x != nil {
		return x.IncludeBuild
	}
	return false
}

func (x *SemanticVersionToStringConverter) GetIncludeRelease() bool {
	if x != nil {
		return x.IncludeRelease
	}
	return false
}

type OneofNameToStringConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
}

func (x *OneofNameToStringConverter) Reset() {
	*x = OneofNameToStringConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofNameToStringConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofNameToStringConverter) ProtoMessage() {}

func (x *OneofNameToStringConverter) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofNameToStringConverter.ProtoReflect.Descriptor instead.
func (*OneofNameToStringConverter) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{59}
}

func (x *OneofNameToStringConverter) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

type SemanticVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor   *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch   *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	Build   *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=build,proto3" json:"build,omitempty"`
	Release *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *SemanticVersion) Reset() {
	*x = SemanticVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticVersion) ProtoMessage() {}

func (x *SemanticVersion) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticVersion.ProtoReflect.Descriptor instead.
func (*SemanticVersion) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{60}
}

func (x *SemanticVersion) GetMajor() *wrapperspb.Int32Value {
	if x != nil {
		return x.Major
	}
	return nil
}

func (x *SemanticVersion) GetMinor() *wrapperspb.Int32Value {
	if x != nil {
		return x.Minor
	}
	return nil
}

func (x *SemanticVersion) GetPatch() *wrapperspb.Int32Value {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *SemanticVersion) GetBuild() *wrapperspb.Int32Value {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *SemanticVersion) GetRelease() *wrapperspb.BoolValue {
	if x != nil {
		return x.Release
	}
	return nil
}

type MemoryAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRamBytes     *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=total_ram_bytes,json=totalRamBytes,proto3" json:"total_ram_bytes,omitempty"`
	FreeRamBytes      *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=free_ram_bytes,json=freeRamBytes,proto3" json:"free_ram_bytes,omitempty"`
	RamUsedByAppBytes *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=ram_used_by_app_bytes,json=ramUsedByAppBytes,proto3" json:"ram_used_by_app_bytes,omitempty"`
}

func (x *MemoryAttributes) Reset() {
	*x = MemoryAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryAttributes) ProtoMessage() {}

func (x *MemoryAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryAttributes.ProtoReflect.Descriptor instead.
func (*MemoryAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{61}
}

func (x *MemoryAttributes) GetTotalRamBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalRamBytes
	}
	return nil
}

func (x *MemoryAttributes) GetFreeRamBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.FreeRamBytes
	}
	return nil
}

func (x *MemoryAttributes) GetRamUsedByAppBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RamUsedByAppBytes
	}
	return nil
}

type PowerAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryLevelPercent   *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=battery_level_percent,json=batteryLevelPercent,proto3" json:"battery_level_percent,omitempty"`
	LowerPowerModeEnabled *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=lower_power_mode_enabled,json=lowerPowerModeEnabled,proto3" json:"lower_power_mode_enabled,omitempty"`
}

func (x *PowerAttributes) Reset() {
	*x = PowerAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerAttributes) ProtoMessage() {}

func (x *PowerAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerAttributes.ProtoReflect.Descriptor instead.
func (*PowerAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{62}
}

func (x *PowerAttributes) GetBatteryLevelPercent() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BatteryLevelPercent
	}
	return nil
}

func (x *PowerAttributes) GetLowerPowerModeEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.LowerPowerModeEnabled
	}
	return nil
}

type DevicePlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsVersion *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Types that are assignable to Type:
	//
	//	*DevicePlatform_Android
	//	*DevicePlatform_Browser
	//	*DevicePlatform_Ios
	//	*DevicePlatform_AndroidLite
	//	*DevicePlatform_IosLite
	Type isDevicePlatform_Type `protobuf_oneof:"type"`
}

func (x *DevicePlatform) Reset() {
	*x = DevicePlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePlatform) ProtoMessage() {}

func (x *DevicePlatform) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePlatform.ProtoReflect.Descriptor instead.
func (*DevicePlatform) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{63}
}

func (x *DevicePlatform) GetOsVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (m *DevicePlatform) GetType() isDevicePlatform_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DevicePlatform) GetAndroid() *Android {
	if x, ok := x.GetType().(*DevicePlatform_Android); ok {
		return x.Android
	}
	return nil
}

func (x *DevicePlatform) GetBrowser() *Browser {
	if x, ok := x.GetType().(*DevicePlatform_Browser); ok {
		return x.Browser
	}
	return nil
}

func (x *DevicePlatform) GetIos() *Ios {
	if x, ok := x.GetType().(*DevicePlatform_Ios); ok {
		return x.Ios
	}
	return nil
}

func (x *DevicePlatform) GetAndroidLite() *AndroidLite {
	if x, ok := x.GetType().(*DevicePlatform_AndroidLite); ok {
		return x.AndroidLite
	}
	return nil
}

func (x *DevicePlatform) GetIosLite() *IosLite {
	if x, ok := x.GetType().(*DevicePlatform_IosLite); ok {
		return x.IosLite
	}
	return nil
}

type isDevicePlatform_Type interface {
	isDevicePlatform_Type()
}

type DevicePlatform_Android struct {
	Android *Android `protobuf:"bytes,5,opt,name=android,proto3,oneof"`
}

type DevicePlatform_Browser struct {
	Browser *Browser `protobuf:"bytes,6,opt,name=browser,proto3,oneof"`
}

type DevicePlatform_Ios struct {
	Ios *Ios `protobuf:"bytes,7,opt,name=ios,proto3,oneof"`
}

type DevicePlatform_AndroidLite struct {
	AndroidLite *AndroidLite `protobuf:"bytes,8,opt,name=android_lite,json=androidLite,proto3,oneof"`
}

type DevicePlatform_IosLite struct {
	IosLite *IosLite `protobuf:"bytes,9,opt,name=ios_lite,json=iosLite,proto3,oneof"`
}

func (*DevicePlatform_Android) isDevicePlatform_Type() {}

func (*DevicePlatform_Browser) isDevicePlatform_Type() {}

func (*DevicePlatform_Ios) isDevicePlatform_Type() {}

func (*DevicePlatform_AndroidLite) isDevicePlatform_Type() {}

func (*DevicePlatform_IosLite) isDevicePlatform_Type() {}

type Android struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformVariant PlatformVariant         `protobuf:"varint,1,opt,name=platform_variant,json=platformVariant,proto3,enum=binary.PlatformVariant" json:"platform_variant,omitempty"`
	InstanceId      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	DeviceId        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OsVersion       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	IsRooted        *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=is_rooted,json=isRooted,proto3" json:"is_rooted,omitempty"`
	StoreVariant    StoreVariant            `protobuf:"varint,6,opt,name=store_variant,json=storeVariant,proto3,enum=binary.StoreVariant" json:"store_variant,omitempty"`
}

func (x *Android) Reset() {
	*x = Android{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Android) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Android) ProtoMessage() {}

func (x *Android) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Android.ProtoReflect.Descriptor instead.
func (*Android) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{64}
}

func (x *Android) GetPlatformVariant() PlatformVariant {
	if x != nil {
		return x.PlatformVariant
	}
	return PlatformVariant_PLATFORM_VARIANT_INVALID
}

func (x *Android) GetInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *Android) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Android) GetOsVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *Android) GetIsRooted() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsRooted
	}
	return nil
}

func (x *Android) GetStoreVariant() StoreVariant {
	if x != nil {
		return x.StoreVariant
	}
	return StoreVariant_STORE_VARIANT_INVALID
}

type Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Browser) Reset() {
	*x = Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Browser) ProtoMessage() {}

func (x *Browser) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Browser.ProtoReflect.Descriptor instead.
func (*Browser) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{65}
}

func (x *Browser) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Browser) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type Ios struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idfa         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=idfa,proto3" json:"idfa,omitempty"`
	DeviceId     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OsVersion    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Country      CountryCode             `protobuf:"varint,4,opt,name=country,proto3,enum=binary.CountryCode" json:"country,omitempty"`
	IsJailbroken *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=is_jailbroken,json=isJailbroken,proto3" json:"is_jailbroken,omitempty"`
}

func (x *Ios) Reset() {
	*x = Ios{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ios) ProtoMessage() {}

func (x *Ios) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ios.ProtoReflect.Descriptor instead.
func (*Ios) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{66}
}

func (x *Ios) GetIdfa() *wrapperspb.StringValue {
	if x != nil {
		return x.Idfa
	}
	return nil
}

func (x *Ios) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Ios) GetOsVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *Ios) GetCountry() CountryCode {
	if x != nil {
		return x.Country
	}
	return CountryCode_COUNTRY_CODE_INVALID
}

func (x *Ios) GetIsJailbroken() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsJailbroken
	}
	return nil
}

type AndroidLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AndroidLite) Reset() {
	*x = AndroidLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLite) ProtoMessage() {}

func (x *AndroidLite) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLite.ProtoReflect.Descriptor instead.
func (*AndroidLite) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{67}
}

type IosLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IosLite) Reset() {
	*x = IosLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosLite) ProtoMessage() {}

func (x *IosLite) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosLite.ProtoReflect.Descriptor instead.
func (*IosLite) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{68}
}

type NetworkPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkCall       *NetworkCallAttributes  `protobuf:"bytes,1,opt,name=network_call,json=networkCall,proto3" json:"network_call,omitempty"`
	Method            HttpMethodType          `protobuf:"varint,2,opt,name=method,proto3,enum=binary.HttpMethodType" json:"method,omitempty"`
	ErrorCode         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	StatusCode        *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	RequestId         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Endpoint          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Connection        *NetworkCallConnection  `protobuf:"bytes,7,opt,name=connection,proto3" json:"connection,omitempty"`
	Error             *NetworkCallError       `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	ResponseBodyBytes *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=response_body_bytes,json=responseBodyBytes,proto3" json:"response_body_bytes,omitempty"`
	HubbleEntityId    *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=hubble_entity_id,json=hubbleEntityId,proto3" json:"hubble_entity_id,omitempty"`
}

func (x *NetworkPerf) Reset() {
	*x = NetworkPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPerf) ProtoMessage() {}

func (x *NetworkPerf) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPerf.ProtoReflect.Descriptor instead.
func (*NetworkPerf) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{69}
}

func (x *NetworkPerf) GetNetworkCall() *NetworkCallAttributes {
	if x != nil {
		return x.NetworkCall
	}
	return nil
}

func (x *NetworkPerf) GetMethod() HttpMethodType {
	if x != nil {
		return x.Method
	}
	return HttpMethodType_HTTP_METHOD_TYPE_INVALID
}

func (x *NetworkPerf) GetErrorCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *NetworkPerf) GetStatusCode() *wrapperspb.Int32Value {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

func (x *NetworkPerf) GetRequestId() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *NetworkPerf) GetEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *NetworkPerf) GetConnection() *NetworkCallConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *NetworkPerf) GetError() *NetworkCallError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *NetworkPerf) GetResponseBodyBytes() *wrapperspb.Int32Value {
	if x != nil {
		return x.ResponseBodyBytes
	}
	return nil
}

func (x *NetworkPerf) GetHubbleEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.HubbleEntityId
	}
	return nil
}

type NetworkCallAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CallTime     *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=call_time,json=callTime,proto3" json:"call_time,omitempty"`
	ResponseTime *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	Duration     *durationpb.Duration    `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *NetworkCallAttributes) Reset() {
	*x = NetworkCallAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCallAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCallAttributes) ProtoMessage() {}

func (x *NetworkCallAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCallAttributes.ProtoReflect.Descriptor instead.
func (*NetworkCallAttributes) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{70}
}

func (x *NetworkCallAttributes) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NetworkCallAttributes) GetCallTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CallTime
	}
	return nil
}

func (x *NetworkCallAttributes) GetResponseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *NetworkCallAttributes) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type NetworkCallConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionAttempts *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=connection_attempts,json=connectionAttempts,proto3" json:"connection_attempts,omitempty"`
	ConnectionDuration *durationpb.Duration   `protobuf:"bytes,2,opt,name=connection_duration,json=connectionDuration,proto3" json:"connection_duration,omitempty"`
	DnsDuration        *durationpb.Duration   `protobuf:"bytes,3,opt,name=dns_duration,json=dnsDuration,proto3" json:"dns_duration,omitempty"`
	SecureDuration     *durationpb.Duration   `protobuf:"bytes,4,opt,name=secure_duration,json=secureDuration,proto3" json:"secure_duration,omitempty"`
}

func (x *NetworkCallConnection) Reset() {
	*x = NetworkCallConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCallConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCallConnection) ProtoMessage() {}

func (x *NetworkCallConnection) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCallConnection.ProtoReflect.Descriptor instead.
func (*NetworkCallConnection) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{71}
}

func (x *NetworkCallConnection) GetConnectionAttempts() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConnectionAttempts
	}
	return nil
}

func (x *NetworkCallConnection) GetConnectionDuration() *durationpb.Duration {
	if x != nil {
		return x.ConnectionDuration
	}
	return nil
}

func (x *NetworkCallConnection) GetDnsDuration() *durationpb.Duration {
	if x != nil {
		return x.DnsDuration
	}
	return nil
}

func (x *NetworkCallConnection) GetSecureDuration() *durationpb.Duration {
	if x != nil {
		return x.SecureDuration
	}
	return nil
}

type NetworkCallError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NetworkCallError) Reset() {
	*x = NetworkCallError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCallError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCallError) ProtoMessage() {}

func (x *NetworkCallError) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCallError.ProtoReflect.Descriptor instead.
func (*NetworkCallError) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{72}
}

func (x *NetworkCallError) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NetworkCallError) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type JsonEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Name  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *JsonEvent) Reset() {
	*x = JsonEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonEvent) ProtoMessage() {}

func (x *JsonEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonEvent.ProtoReflect.Descriptor instead.
func (*JsonEvent) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{73}
}

func (x *JsonEvent) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *JsonEvent) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Level      LogLevel                `protobuf:"varint,2,opt,name=level,proto3,enum=binary.LogLevel" json:"level,omitempty"`
	Message    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Stacktrace []string                `protobuf:"bytes,4,rep,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	Tags       []string                `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{74}
}

func (x *LogEvent) GetOwner() *wrapperspb.StringValue {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *LogEvent) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_INVALID
}

func (x *LogEvent) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *LogEvent) GetStacktrace() []string {
	if x != nil {
		return x.Stacktrace
	}
	return nil
}

func (x *LogEvent) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AppPublishInitialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *AppPublishResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *AppPublishInitialData) Reset() {
	*x = AppPublishInitialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishInitialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishInitialData) ProtoMessage() {}

func (x *AppPublishInitialData) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishInitialData.ProtoReflect.Descriptor instead.
func (*AppPublishInitialData) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{75}
}

func (x *AppPublishInitialData) GetResponse() *AppPublishResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type AppPublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId      *AppPublishResponse_BatchField        `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	ResponseText *AppPublishResponse_ResponseTextField `protobuf:"bytes,2,opt,name=responseText,proto3" json:"responseText,omitempty"`
	Field3       *AppPublishResponse_Field3            `protobuf:"bytes,3,opt,name=field3,proto3" json:"field3,omitempty"`
	EventCount   *AppPublishResponse_EventCountField   `protobuf:"bytes,5,opt,name=EventCount,proto3" json:"EventCount,omitempty"`
}

func (x *AppPublishResponse) Reset() {
	*x = AppPublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishResponse) ProtoMessage() {}

func (x *AppPublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishResponse.ProtoReflect.Descriptor instead.
func (*AppPublishResponse) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{76}
}

func (x *AppPublishResponse) GetBatchId() *AppPublishResponse_BatchField {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *AppPublishResponse) GetResponseText() *AppPublishResponse_ResponseTextField {
	if x != nil {
		return x.ResponseText
	}
	return nil
}

func (x *AppPublishResponse) GetField3() *AppPublishResponse_Field3 {
	if x != nil {
		return x.Field3
	}
	return nil
}

func (x *AppPublishResponse) GetEventCount() *AppPublishResponse_EventCountField {
	if x != nil {
		return x.EventCount
	}
	return nil
}

type AppPublishResponse_BatchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId string `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
}

func (x *AppPublishResponse_BatchField) Reset() {
	*x = AppPublishResponse_BatchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishResponse_BatchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishResponse_BatchField) ProtoMessage() {}

func (x *AppPublishResponse_BatchField) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishResponse_BatchField.ProtoReflect.Descriptor instead.
func (*AppPublishResponse_BatchField) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{76, 0}
}

func (x *AppPublishResponse_BatchField) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

type AppPublishResponse_ResponseTextField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseText string `protobuf:"bytes,1,opt,name=responseText,proto3" json:"responseText,omitempty"`
}

func (x *AppPublishResponse_ResponseTextField) Reset() {
	*x = AppPublishResponse_ResponseTextField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishResponse_ResponseTextField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishResponse_ResponseTextField) ProtoMessage() {}

func (x *AppPublishResponse_ResponseTextField) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishResponse_ResponseTextField.ProtoReflect.Descriptor instead.
func (*AppPublishResponse_ResponseTextField) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{76, 1}
}

func (x *AppPublishResponse_ResponseTextField) GetResponseText() string {
	if x != nil {
		return x.ResponseText
	}
	return ""
}

type AppPublishResponse_Field3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AppPublishResponse_Field3) Reset() {
	*x = AppPublishResponse_Field3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishResponse_Field3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishResponse_Field3) ProtoMessage() {}

func (x *AppPublishResponse_Field3) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishResponse_Field3.ProtoReflect.Descriptor instead.
func (*AppPublishResponse_Field3) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{76, 2}
}

func (x *AppPublishResponse_Field3) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AppPublishResponse_EventCountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCount int32 `protobuf:"varint,1,opt,name=EventCount,proto3" json:"EventCount,omitempty"`
}

func (x *AppPublishResponse_EventCountField) Reset() {
	*x = AppPublishResponse_EventCountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tinder_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishResponse_EventCountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishResponse_EventCountField) ProtoMessage() {}

func (x *AppPublishResponse_EventCountField) ProtoReflect() protoreflect.Message {
	mi := &file_tinder_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishResponse_EventCountField.ProtoReflect.Descriptor instead.
func (*AppPublishResponse_EventCountField) Descriptor() ([]byte, []int) {
	return file_tinder_proto_rawDescGZIP(), []int{76, 3}
}

func (x *AppPublishResponse_EventCountField) GetEventCount() int32 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

var File_tinder_proto protoreflect.FileDescriptor

var file_tinder_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x6d, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xf1, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70,
	0x70, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x65, 0x72, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x65,
	0x72, 0x66, 0x12, 0x58, 0x0a, 0x18, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x16,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x73, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x68,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x31, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x31, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x48,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x55, 0x50, 0x10, 0x01, 0x22, 0xb3, 0x04, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x16, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x11, 0x53, 0x6b,
	0x75, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2e, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12,
	0x32, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x55, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6b, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x53, 0x6b, 0x75, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x63, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x01,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x0f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x06, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4f,
	0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x03, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2d,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x55, 0x69, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x36,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x4a, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x72, 0x77, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3a, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x06,
	0x44, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x07, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x80, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x98, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x14,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba,
	0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x64, 0x6b, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x70, 0x70,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x64, 0x6b,
	0x44, 0x65, 0x6d, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x07, 0x54,
	0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x64, 0x6b, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x70, 0x70, 0x22,
	0x71, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x7b, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0xe0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x73, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0xb3,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb4, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33,
	0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0xb1, 0x08, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x54, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x22, 0xcc, 0x01, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x57, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xaa, 0x01, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa9, 0x09, 0x0a,
	0x16, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3a, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x6f,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x45, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x5b, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x58,
	0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x6f,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x45, 0x0a, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x67, 0x0a, 0x1a, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x17, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x14, 0x0a,
	0x12, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x6f,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99,
	0x01, 0x0a, 0x15, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x4d, 0x0a, 0x1c, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x1b, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x1b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x22, 0x4d, 0x0a, 0x1c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x22, 0x70, 0x0a, 0x20, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x1a, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x53, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x31, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0xe9, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61,
	0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x66, 0x72, 0x65, 0x65, 0x52, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x15,
	0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0f,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x15, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x53, 0x0a, 0x18, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb8, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x03, 0x69, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6f, 0x73, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6f,
	0x73, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x69,
	0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6f, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6f, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xf8, 0x02, 0x0a, 0x07, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x07,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x03, 0x49, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x64, 0x66,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x64, 0x66, 0x61, 0x12, 0x39, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x69,
	0x74, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x49, 0x6f, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x22, 0xf5, 0x04,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x12, 0x40, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x10, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a, 0x09, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4f,
	0x0a, 0x15, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe2, 0x03, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x33, 0x12, 0x4a, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x26, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x1a, 0x1e, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x31, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x66, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x31, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x31, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x31, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x31, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x31, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x32, 0x10, 0x02, 0x2a, 0x8d, 0x03, 0x0a,
	0x14, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x55, 0x42,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x50, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x55,
	0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x06, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x50,
	0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x55, 0x42, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x08,
	0x12, 0x2a, 0x0a, 0x26, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09, 0x2a, 0x9a, 0x01, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x57, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x2a, 0xfd, 0x01, 0x0a, 0x09, 0x55, 0x69, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x49, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x55,
	0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x41,
	0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x49, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x80, 0x02, 0x2a, 0x84, 0x03, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54,
	0x49, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10,
	0x08, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48,
	0x41, 0x4e, 0x44, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55,
	0x4d, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x0c, 0x2a, 0x90, 0x01, 0x0a, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x55, 0x10, 0x05, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x14, 0x2a,
	0xa9, 0x2c, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f,
	0x4e, 0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x54,
	0x41, 0x42, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x42, 0x54, 0x4e,
	0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x17, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x10, 0x18, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x5f, 0x4f, 0x4b, 0x10, 0x19, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1b, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x1c,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x53, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x1f,
	0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x22, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x4c, 0x49, 0x4b, 0x45, 0x10, 0x23, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x45, 0x4e, 0x44,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x24, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0x26, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x55, 0x4e, 0x44, 0x4f, 0x10, 0x27, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x57, 0x49,
	0x50, 0x45, 0x53, 0x10, 0x28, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x53, 0x10, 0x29, 0x12, 0x2e, 0x0a, 0x2a,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4c, 0x49,
	0x4b, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x2a, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x2b, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x57, 0x48, 0x4f, 0x5f, 0x53, 0x45, 0x45, 0x53, 0x5f, 0x59, 0x4f,
	0x55, 0x10, 0x2c, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x59, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x2d, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x2e, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x2f, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c,
	0x55, 0x53, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x30, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x31, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x32, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x33, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52,
	0x59, 0x10, 0x34, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x35, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53,
	0x54, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x5f,
	0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x36, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x37, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x38,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x10, 0x39, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4b,
	0x45, 0x53, 0x10, 0x3a, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x53, 0x5f, 0x45, 0x58,
	0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x10, 0x3b, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x44, 0x46, 0x50, 0x5f, 0x41, 0x44, 0x10, 0x3c, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x3d, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x4d, 0x4f, 0x10, 0x3e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x3f, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x40, 0x12, 0x32, 0x0a, 0x2e, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x41, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x42, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45,
	0x52, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x43, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10,
	0x44, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x42, 0x55, 0x54,
	0x54, 0x4f, 0x4e, 0x10, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x46, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x47, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x48, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x50, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x53,
	0x10, 0x4a, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x4b, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x4c, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e,
	0x54, 0x52, 0x4f, 0x10, 0x4d, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x4e, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x41, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x4f, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x41, 0x5f,
	0x54, 0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x50, 0x12, 0x2c, 0x0a, 0x28, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52,
	0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x51, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x5f, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x54,
	0x4f, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x52, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x10, 0x53, 0x12, 0x31, 0x0a, 0x2d,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x10, 0x54, 0x12,
	0x2e, 0x0a, 0x2a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x55, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45,
	0x52, 0x10, 0x56, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x57,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x5f, 0x44,
	0x45, 0x45, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x58, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f,
	0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x46, 0x50, 0x5f, 0x41, 0x44,
	0x10, 0x59, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4c, 0x49, 0x4b, 0x45,
	0x10, 0x5a, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x57,
	0x49, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x5b, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x45, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x5c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x5d, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4b,
	0x45, 0x53, 0x5f, 0x59, 0x4f, 0x55, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x5e, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f,
	0x4d, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x45,
	0x41, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x50, 0x10, 0x5f, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x54, 0x45, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45,
	0x10, 0x60, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x43, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x61, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x54, 0x41,
	0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x62, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x63, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x4c, 0x41, 0x53, 0x48,
	0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x64, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x50, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x4c, 0x41, 0x53, 0x48,
	0x5f, 0x43, 0x54, 0x41, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x2a, 0x0a,
	0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x52, 0x45, 0x52,
	0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x67, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f,
	0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x45, 0x4c, 0x45, 0x42, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x6a, 0x12, 0x32,
	0x0a, 0x2e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x45,
	0x41, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x6b, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45,
	0x53, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54,
	0x4f, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x6d, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x53, 0x10, 0x6e, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x45,
	0x52, 0x43, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x6f, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f,
	0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x55, 0x50, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x70, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x71, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x54,
	0x10, 0x72, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x73, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x74, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45,
	0x4e, 0x4f, 0x54, 0x45, 0x10, 0x75, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x10, 0x76, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x77, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x55, 0x50,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x78, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x59, 0x5f, 0x4c, 0x49,
	0x4b, 0x45, 0x53, 0x5f, 0x43, 0x54, 0x41, 0x10, 0x79, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x59,
	0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x7a, 0x12, 0x32, 0x0a,
	0x2e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f,
	0x4d, 0x5f, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10,
	0x7b, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x7c, 0x12, 0x33, 0x0a,
	0x2f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x7d, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x7e, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x7f, 0x12, 0x30, 0x0a,
	0x2b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x80, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x81, 0x01, 0x12, 0x23, 0x0a, 0x1e,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x82,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x83, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e,
	0x10, 0x84, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x85, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x42, 0x4f,
	0x4f, 0x53, 0x54, 0x10, 0x86, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x10, 0x87, 0x01,
	0x12, 0x26, 0x0a, 0x21, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x88, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x89,
	0x01, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x8a, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x52,
	0x43, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x8b, 0x01, 0x12, 0x28, 0x0a, 0x23,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f,
	0x44, 0x41, 0x4c, 0x10, 0x8c, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x57, 0x41,
	0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x8d, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x57, 0x41, 0x4c, 0x4c, 0x5f,
	0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x55, 0x54, 0x54,
	0x4f, 0x4e, 0x10, 0x8e, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x8f, 0x01, 0x12,
	0x34, 0x0a, 0x2f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x42, 0x55, 0x54, 0x54,
	0x4f, 0x4e, 0x10, 0x90, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x50,
	0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x43, 0x52,
	0x45, 0x45, 0x4e, 0x10, 0x91, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x92, 0x01, 0x12, 0x30, 0x0a, 0x2b,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x55, 0x59,
	0x5f, 0x4e, 0x4f, 0x57, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x93, 0x01, 0x12, 0x2b,
	0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x4e, 0x4f,
	0x57, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x94, 0x01, 0x2a, 0x52, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a,
	0x51, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x2a, 0x38, 0x0a, 0x07, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x2a, 0xb9, 0x0b, 0x0a,
	0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x52,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x50, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x1e,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x32, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50,
	0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x46, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x44, 0x10, 0x47, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x5a, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x5b, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x78, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x10, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x7a, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x52,
	0x10, 0x7b, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x10, 0x7c, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x7d, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x10, 0x7e, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x7f, 0x12, 0x21, 0x0a, 0x1c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x80, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x81, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x82, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x83, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x84, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x85, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x86, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x4f, 0x53, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xc8, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49,
	0x4f, 0x53, 0x5f, 0x4f, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xc9, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4f, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10,
	0xca, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x4f, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x4a, 0x41, 0x49,
	0x4c, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0xcb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x41, 0x4e,
	0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x98, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x99, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x9a, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x4f, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x9b, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x9c, 0x02, 0x12, 0x1a, 0x0a, 0x15,
	0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x9d, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x52, 0x4f, 0x57,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xde, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x42,
	0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xdf,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0xfc, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x10, 0xfd, 0x02, 0x12, 0x17, 0x0a,
	0x12, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x49, 0x54,
	0x55, 0x44, 0x45, 0x10, 0xfe, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55,
	0x49, 0x44, 0x10, 0xae, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xaf, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x10, 0xb0, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0xb1, 0x03,
	0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb2, 0x03, 0x12, 0x14, 0x0a, 0x0f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0xb3, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0xf4, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0xf5, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x88, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x89, 0x04,
	0x12, 0x1c, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0xee, 0x05, 0x12, 0x14,
	0x0a, 0x0f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x83, 0x06, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x84, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x41, 0x52, 0x57,
	0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x85, 0x06, 0x12, 0x0f, 0x0a,
	0x0a, 0x4f, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x86, 0x06, 0x12, 0x19,
	0x0a, 0x14, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x84, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x48, 0x55, 0x42,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x85, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x86, 0x07, 0x12,
	0x15, 0x0a, 0x10, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x10, 0x87, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x48, 0x55, 0x42, 0x42, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x98, 0x07, 0x2a, 0xa5, 0x02, 0x0a, 0x0c, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50,
	0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x49,
	0x4b, 0x45, 0x53, 0x5f, 0x59, 0x4f, 0x55, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50,
	0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x53, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x45,
	0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52,
	0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x41, 0x4e, 0x47, 0x4f, 0x55, 0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x10, 0x09,
	0x2a, 0xb7, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52,
	0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x06, 0x2a, 0x69, 0x0a, 0x0f, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x48, 0x55, 0x41,
	0x57, 0x45, 0x49, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x4e, 0x54, 0x5f, 0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x50,
	0x4f, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x4e, 0x54, 0x5f, 0x53, 0x41, 0x4d, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x58, 0x49,
	0x41, 0x4f, 0x4d, 0x49, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x56, 0x4f, 0x10, 0x06, 0x2a, 0xc0,
	0x2b, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x46, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x47, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x49, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4d, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x4e, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4f, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x51, 0x10, 0x0b, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x52, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x10, 0x0e, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x55, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x57, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x58, 0x10, 0x11, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x5a,
	0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x41, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x42, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x44, 0x10,
	0x15, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x42, 0x45, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x46, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x47, 0x10, 0x18,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x42, 0x48, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x49, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4a, 0x10, 0x1b, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x4c, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4d, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4e, 0x10, 0x1e, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42,
	0x4f, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x42, 0x51, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x10, 0x21, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x53,
	0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x54, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x56, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x57, 0x10,
	0x25, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x42, 0x59, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x5a, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x10, 0x28,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x43, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x44, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x46, 0x10, 0x2b, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x47, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x10, 0x2d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x49, 0x10, 0x2e, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4b, 0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x10, 0x30, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x10, 0x31, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4e,
	0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x50, 0x10, 0x34, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x10,
	0x35, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x55, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x56, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x57, 0x10, 0x38,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x58, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x59, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x5a, 0x10, 0x3b, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x45, 0x10, 0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x47, 0x10, 0x3d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4a, 0x10, 0x3f, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x4b, 0x10, 0x40, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4d, 0x10, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x10, 0x42, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x5a,
	0x10, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x41, 0x10, 0x44, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x10, 0x45, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x45, 0x10,
	0x46, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x47, 0x10, 0x47, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x48, 0x10, 0x48, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x10, 0x49,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x53, 0x10, 0x4a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x54, 0x10, 0x4b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x10, 0x4c, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x4a, 0x10, 0x4d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4b, 0x10, 0x4e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4d, 0x10, 0x4f, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x4f, 0x10, 0x50, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x51, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x41, 0x10, 0x52, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x42,
	0x10, 0x53, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x47, 0x44, 0x10, 0x54, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x10, 0x55, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x46, 0x10,
	0x56, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x47, 0x47, 0x10, 0x57, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x48, 0x10, 0x58, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x49, 0x10, 0x59,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x47, 0x4c, 0x10, 0x5a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4d, 0x10, 0x5b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4e, 0x10, 0x5c, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x50, 0x10, 0x5d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x51, 0x10, 0x5e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x10, 0x5f, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47,
	0x53, 0x10, 0x60, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x47, 0x54, 0x10, 0x61, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x55, 0x10, 0x63, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x57,
	0x10, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x47, 0x59, 0x10, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4b, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4d, 0x10,
	0x67, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x48, 0x4e, 0x10, 0x68, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x52, 0x10, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x54, 0x10, 0x6a,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x48, 0x55, 0x10, 0x6b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x43, 0x10, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x6d, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x45, 0x10, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4c, 0x10, 0x6f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4d, 0x10, 0x70, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x10, 0x71, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4f, 0x10, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x51, 0x10, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x52,
	0x10, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x53, 0x10, 0x75, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x54, 0x10, 0x76, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x45, 0x10,
	0x77, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4a, 0x4d, 0x10, 0x78, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x4f, 0x10, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x50, 0x10, 0x7a,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4b, 0x45, 0x10, 0x7b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x47, 0x10, 0x7c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x48, 0x10, 0x7d, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4b, 0x49, 0x10, 0x7e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4d, 0x10, 0x7f, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4e, 0x10, 0x80, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4b, 0x50, 0x10, 0x81, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x52, 0x10, 0x82, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x57, 0x10, 0x83,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4b, 0x59, 0x10, 0x84, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x5a, 0x10, 0x85, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41,
	0x10, 0x86, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x42, 0x10, 0x87, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x43, 0x10, 0x88, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x49, 0x10, 0x89, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4b, 0x10, 0x8a, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x52, 0x10, 0x8b,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x53, 0x10, 0x8c, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x8d, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x55,
	0x10, 0x8e, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x56, 0x10, 0x8f, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x59, 0x10, 0x90, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x41, 0x10, 0x91, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x43, 0x10, 0x92, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x44, 0x10, 0x93,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x45, 0x10, 0x94, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x46, 0x10, 0x95, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x47,
	0x10, 0x96, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x48, 0x10, 0x97, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4b, 0x10, 0x98, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x4c, 0x10, 0x99, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4d, 0x10, 0x9a, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4e, 0x10, 0x9b,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x4f, 0x10, 0x9c, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x50, 0x10, 0x9d, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x51,
	0x10, 0x9e, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x52, 0x10, 0x9f, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x53, 0x10, 0xa0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x54, 0x10, 0xa1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x10, 0xa2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x56, 0x10, 0xa3,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x57, 0x10, 0xa4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x58, 0x10, 0xa5, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x59,
	0x10, 0xa6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x5a, 0x10, 0xa7, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x41, 0x10, 0xa8, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x43, 0x10, 0xa9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x10, 0xaa, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x46, 0x10, 0xab,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x47, 0x10, 0xac, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x49, 0x10, 0xad, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4c,
	0x10, 0xae, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0xaf, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x50, 0x10, 0xb0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x52, 0x10, 0xb1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x55, 0x10, 0xb2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x5a, 0x10, 0xb3,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x4d, 0x10, 0xb4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x10, 0xb5, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45,
	0x10, 0xb6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x46, 0x10, 0xb7, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x47, 0x10, 0xb8, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x48, 0x10, 0xb9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4b, 0x10, 0xba, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4c, 0x10, 0xbb,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x4d, 0x10, 0xbc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4e, 0x10, 0xbd, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x10, 0xbe, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x53, 0x10, 0xbf, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x54, 0x10, 0xc0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x57, 0x10, 0xc1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x59, 0x10, 0xc2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x41, 0x10, 0xc3,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x10, 0xc4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x10, 0xc5, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53,
	0x10, 0xc6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x55, 0x10, 0xc7, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x57, 0x10, 0xc8, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x41, 0x10, 0xc9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x42, 0x10, 0xca, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x10, 0xcb,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x10, 0xcd, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x47,
	0x10, 0xce, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x10, 0xcf, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x10, 0xd0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x4a, 0x10, 0xd1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4b, 0x10, 0xd2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4c, 0x10, 0xd3,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x4d, 0x10, 0xd4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4e, 0x10, 0xd5, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4f,
	0x10, 0xd6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x52, 0x10, 0xd7, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x53, 0x10, 0xd8, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x10, 0xd9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x56, 0x10, 0xda, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x58, 0x10, 0xdb,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x59, 0x10, 0xdc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x5a, 0x10, 0xdd, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41,
	0x10, 0xde, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x43, 0x10, 0xdf, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x44, 0x10, 0xe0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x54, 0x46, 0x10, 0xe1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x47, 0x10, 0xe2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x10, 0xe3,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x4a, 0x10, 0xe4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4b, 0x10, 0xe5, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4c,
	0x10, 0xe6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4d, 0x10, 0xe7, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4e, 0x10, 0xe8, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x54, 0x4f, 0x10, 0xe9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x10, 0xea, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x54, 0x10, 0xeb,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x56, 0x10, 0xec, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x57, 0x10, 0xed, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x5a,
	0x10, 0xee, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x41, 0x10, 0xef, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x47, 0x10, 0xf0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4d, 0x10, 0xf1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53, 0x10, 0xf2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x59, 0x10, 0xf3,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x5a, 0x10, 0xf4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x41, 0x10, 0xf5, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x43,
	0x10, 0xf6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x10, 0xf7, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x47, 0x10, 0xf8, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x49, 0x10, 0xf9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x4e, 0x10, 0xfa, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x55, 0x10, 0xfb,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x46, 0x10, 0xfc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x53, 0x10, 0xfd, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x58, 0x4b,
	0x10, 0xfe, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x59, 0x45, 0x10, 0xff, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x54, 0x10, 0x80, 0x02, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x5a, 0x41, 0x10, 0x81, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x5a, 0x4d, 0x10, 0x82, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x5a, 0x57, 0x10, 0x83,
	0x02, 0x2a, 0xb6, 0x01, 0x0a, 0x0e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x2a, 0x9b, 0x20, 0x0a, 0x0c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x42,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x46, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x4b, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x52, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x56,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x5a, 0x10, 0x0c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x41, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x45, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x47, 0x10, 0x0f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x42, 0x49, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4d, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4e,
	0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x10, 0x14, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x53, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x45, 0x10, 0x17,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x48, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52,
	0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x53, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x10, 0x1c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x56, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x59, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x10, 0x1f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x56, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x5a,
	0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x45, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4c, 0x10, 0x24, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x4e, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4f, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x53, 0x10, 0x27,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x54, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x55, 0x10, 0x29, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41,
	0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x46, 0x10, 0x2b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x10, 0x2c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x4a, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x2f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x46, 0x59, 0x10, 0x30, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x41, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x44,
	0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4c, 0x10, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4e, 0x10, 0x34, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x55, 0x10, 0x35, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x56, 0x10, 0x36, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x10, 0x37,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x48, 0x45, 0x10, 0x38, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x10, 0x39, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f,
	0x10, 0x3a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x48, 0x52, 0x10, 0x3b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x54, 0x10, 0x3c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x48, 0x55, 0x10, 0x3d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x59, 0x10, 0x3e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x5a, 0x10, 0x3f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x41, 0x10, 0x40, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x41, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x45,
	0x10, 0x42, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x47, 0x10, 0x43, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x44, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x4b, 0x10, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4f, 0x10, 0x46, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x53, 0x10, 0x47,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x54, 0x10, 0x48, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x55, 0x10, 0x49, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x41,
	0x10, 0x4a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x56, 0x10, 0x4b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x41, 0x10, 0x4c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4b, 0x47, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x49, 0x10, 0x4e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4a, 0x10, 0x4f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4b, 0x4b, 0x10, 0x50, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4c, 0x10, 0x51, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4d,
	0x10, 0x52, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4e, 0x10, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x4f, 0x10, 0x54, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4b, 0x52, 0x10, 0x55, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x53, 0x10, 0x56, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x55, 0x10, 0x57,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4b, 0x56, 0x10, 0x58, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x57, 0x10, 0x59, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x59,
	0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x10, 0x5b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x42, 0x10, 0x5c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x47, 0x10, 0x5d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x10, 0x5e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4e, 0x10, 0x5f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x60, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x61, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x55,
	0x10, 0x62, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x56, 0x10, 0x63, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x47, 0x10, 0x64, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x48, 0x10, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x10, 0x66, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4b, 0x10, 0x67,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x4c, 0x10, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4d, 0x10, 0x69, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x52,
	0x10, 0x6a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x53, 0x10, 0x6b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x54, 0x10, 0x6c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x59, 0x10, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x41, 0x10, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x42, 0x10, 0x6f,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x44, 0x10, 0x70, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x10, 0x71, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x47,
	0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4c, 0x10, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4e, 0x10, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x10, 0x75, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x52, 0x10, 0x76, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x56, 0x10, 0x77,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x59, 0x10, 0x78, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x43, 0x10, 0x79, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4a,
	0x10, 0x7a, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4d, 0x10, 0x7b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x10, 0x7c, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x53, 0x10, 0x7d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x10, 0x7e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x10, 0x7f,
	0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x4c, 0x10, 0x80, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x53, 0x10, 0x81, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x54, 0x10, 0x82, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55, 0x10, 0x83, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4d,
	0x10, 0x84, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4e, 0x10, 0x85, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x10, 0x86,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x55, 0x10, 0x87, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x57, 0x10, 0x88, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x41, 0x10, 0x89, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x10, 0x8a, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x44, 0x10, 0x8b, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x10, 0x8c, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x47, 0x10,
	0x8d, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x10, 0x8e, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4b, 0x10, 0x8f, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x4c, 0x10, 0x90, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4d, 0x10, 0x91, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x4e, 0x10, 0x92, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x10, 0x93, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x51,
	0x10, 0x94, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x52, 0x10, 0x95, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x53, 0x10, 0x96,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x10, 0x97, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x10, 0x98, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x56, 0x10, 0x99, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x57, 0x10, 0x9a, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x41, 0x10, 0x9b, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x10, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x47, 0x10,
	0x9d, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x10, 0x9e, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x10, 0x9f, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x4b, 0x10, 0xa0, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4c, 0x10, 0xa1, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x54, 0x4e, 0x10, 0xa2, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x10, 0xa3, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52,
	0x10, 0xa4, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x53, 0x10, 0xa5, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x54, 0x10, 0xa6,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x57, 0x10, 0xa7, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x10, 0xa8, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x47, 0x10, 0xa9, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4b, 0x10, 0xaa, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x52, 0x10, 0xab, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x5a, 0x10, 0xac, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x10,
	0xad, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x10, 0xae, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x4f, 0x10, 0xaf, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x41, 0x10, 0xb0, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x4f, 0x10, 0xb1, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x58, 0x48, 0x10, 0xb2, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x49, 0x10, 0xb3, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x4f,
	0x10, 0xb4, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x5a, 0x41, 0x10, 0xb5, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x5a, 0x48, 0x10, 0xb6,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x5a, 0x55, 0x10, 0xb7, 0x01, 0x2a, 0xec, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49,
	0x46, 0x49, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x32, 0x47, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x33, 0x47, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x34, 0x47, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c,
	0x41, 0x52, 0x5f, 0x35, 0x47, 0x10, 0x07, 0x2a, 0x8e, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tinder_proto_rawDescOnce sync.Once
	file_tinder_proto_rawDescData = file_tinder_proto_rawDesc
)

func file_tinder_proto_rawDescGZIP() []byte {
	file_tinder_proto_rawDescOnce.Do(func() {
		file_tinder_proto_rawDescData = protoimpl.X.CompressGZIP(file_tinder_proto_rawDescData)
	})
	return file_tinder_proto_rawDescData
}

var file_tinder_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_tinder_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_tinder_proto_goTypes = []interface{}{
	(TestEvent1Type)(0),                          // 0: binary.TestEvent1Type
	(HubbleInstrumentType)(0),                    // 1: binary.HubbleInstrumentType
	(EventType)(0),                               // 2: binary.EventType
	(StatusCode)(0),                              // 3: binary.StatusCode
	(UiElement)(0),                               // 4: binary.UiElement
	(FeatureType)(0),                             // 5: binary.FeatureType
	(SourceAction)(0),                            // 6: binary.SourceAction
	(EntityType)(0),                              // 7: binary.EntityType
	(SourceComponent)(0),                         // 8: binary.SourceComponent
	(Gender)(0),                                  // 9: binary.Gender
	(UserType)(0),                                // 10: binary.UserType
	(Adapter)(0),                                 // 11: binary.Adapter
	(EventAttribute)(0),                          // 12: binary.EventAttribute
	(ExperienceId)(0),                            // 13: binary.ExperienceId
	(TimeUnit)(0),                                // 14: binary.TimeUnit
	(PlatformVariant)(0),                         // 15: binary.PlatformVariant
	(StoreVariant)(0),                            // 16: binary.StoreVariant
	(CountryCode)(0),                             // 17: binary.CountryCode
	(HttpMethodType)(0),                          // 18: binary.HttpMethodType
	(LanguageCode)(0),                            // 19: binary.LanguageCode
	(NetworkType)(0),                             // 20: binary.NetworkType
	(LogLevel)(0),                                // 21: binary.LogLevel
	(DurationMeasure_Category)(0),                // 22: binary.DurationMeasure.Category
	(*InitialData)(nil),                          // 23: binary.InitialData
	(*AppEventData)(nil),                         // 24: binary.AppEventData
	(*Event)(nil),                                // 25: binary.Event
	(*AppPlatformEvent)(nil),                     // 26: binary.AppPlatformEvent
	(*TestEvent1)(nil),                           // 27: binary.TestEvent1
	(*HubbleInstrument)(nil),                     // 28: binary.HubbleInstrument
	(*DurationMeasure)(nil),                      // 29: binary.DurationMeasure
	(*Meta)(nil),                                 // 30: binary.Meta
	(*SkuPackageDetails)(nil),                    // 31: binary.SkuPackageDetails
	(*EventDetails)(nil),                         // 32: binary.EventDetails
	(*InstrumentDetails)(nil),                    // 33: binary.InstrumentDetails
	(*AppEventSession)(nil),                      // 34: binary.AppEventSession
	(*NetworkProvider)(nil),                      // 35: binary.NetworkProvider
	(*DeviceAttributes)(nil),                     // 36: binary.DeviceAttributes
	(*ServiceAttributes)(nil),                    // 37: binary.ServiceAttributes
	(*SourceDescriptor)(nil),                     // 38: binary.SourceDescriptor
	(*BinaryParseErrorEvent)(nil),                // 39: binary.BinaryParseErrorEvent
	(*JsonParseErrorEvent)(nil),                  // 40: binary.JsonParseErrorEvent
	(*PaywallDetails)(nil),                       // 41: binary.PaywallDetails
	(*ServiceName)(nil),                          // 42: binary.ServiceName
	(*PurchaseService)(nil),                      // 43: binary.PurchaseService
	(*TestService)(nil),                          // 44: binary.TestService
	(*ServerAttributes)(nil),                     // 45: binary.ServerAttributes
	(*LocationAttributes)(nil),                   // 46: binary.LocationAttributes
	(*OperatingSystem)(nil),                      // 47: binary.OperatingSystem
	(*Linux)(nil),                                // 48: binary.Linux
	(*Darwin)(nil),                               // 49: binary.Darwin
	(*Windows)(nil),                              // 50: binary.Windows
	(*AuthAttributes)(nil),                       // 51: binary.AuthAttributes
	(*AppAttributes)(nil),                        // 52: binary.AppAttributes
	(*AppSession)(nil),                           // 53: binary.AppSession
	(*UserAttributes)(nil),                       // 54: binary.UserAttributes
	(*UserSession)(nil),                          // 55: binary.UserSession
	(*AppName)(nil),                              // 56: binary.AppName
	(*TestApp)(nil),                              // 57: binary.TestApp
	(*AnalyticsSdkDemoApp)(nil),                  // 58: binary.AnalyticsSdkDemoApp
	(*ContentDescriptor)(nil),                    // 59: binary.ContentDescriptor
	(*RecsPhotoDetails)(nil),                     // 60: binary.RecsPhotoDetails
	(*RecsCoreDetails)(nil),                      // 61: binary.RecsCoreDetails
	(*CustomConversion)(nil),                     // 62: binary.CustomConversion
	(*EventRecordRoot)(nil),                      // 63: binary.EventRecordRoot
	(*TinderApp)(nil),                            // 64: binary.TinderApp
	(*TypeConverterConfig)(nil),                  // 65: binary.TypeConverterConfig
	(*TypeAttributeConfig)(nil),                  // 66: binary.TypeAttributeConfig
	(*TypeAttributeConverter)(nil),               // 67: binary.TypeAttributeConverter
	(*IdentityConverter)(nil),                    // 68: binary.IdentityConverter
	(*UppercaseConverter)(nil),                   // 69: binary.UppercaseConverter
	(*LowercaseConverter)(nil),                   // 70: binary.LowercaseConverter
	(*RepeatedToStringConverter)(nil),            // 71: binary.RepeatedToStringConverter
	(*IntegerToEnumConverter)(nil),               // 72: binary.IntegerToEnumConverter
	(*EnumToIntegerConverter)(nil),               // 73: binary.EnumToIntegerConverter
	(*StringToEnumConverter)(nil),                // 74: binary.StringToEnumConverter
	(*EnumToStringConverter)(nil),                // 75: binary.EnumToStringConverter
	(*SubstringConverter)(nil),                   // 76: binary.SubstringConverter
	(*TimeUnitToTimestampConverter)(nil),         // 77: binary.TimeUnitToTimestampConverter
	(*TimeUnitToDurationConverter)(nil),          // 78: binary.TimeUnitToDurationConverter
	(*DurationToTimeUnitConverter)(nil),          // 79: binary.DurationToTimeUnitConverter
	(*TimestampToTimeUnitConverter)(nil),         // 80: binary.TimestampToTimeUnitConverter
	(*SemanticVersionToStringConverter)(nil),     // 81: binary.SemanticVersionToStringConverter
	(*OneofNameToStringConverter)(nil),           // 82: binary.OneofNameToStringConverter
	(*SemanticVersion)(nil),                      // 83: binary.SemanticVersion
	(*MemoryAttributes)(nil),                     // 84: binary.MemoryAttributes
	(*PowerAttributes)(nil),                      // 85: binary.PowerAttributes
	(*DevicePlatform)(nil),                       // 86: binary.DevicePlatform
	(*Android)(nil),                              // 87: binary.Android
	(*Browser)(nil),                              // 88: binary.Browser
	(*Ios)(nil),                                  // 89: binary.Ios
	(*AndroidLite)(nil),                          // 90: binary.AndroidLite
	(*IosLite)(nil),                              // 91: binary.IosLite
	(*NetworkPerf)(nil),                          // 92: binary.NetworkPerf
	(*NetworkCallAttributes)(nil),                // 93: binary.NetworkCallAttributes
	(*NetworkCallConnection)(nil),                // 94: binary.NetworkCallConnection
	(*NetworkCallError)(nil),                     // 95: binary.NetworkCallError
	(*JsonEvent)(nil),                            // 96: binary.JsonEvent
	(*LogEvent)(nil),                             // 97: binary.LogEvent
	(*AppPublishInitialData)(nil),                // 98: binary.AppPublishInitialData
	(*AppPublishResponse)(nil),                   // 99: binary.AppPublishResponse
	nil,                                          // 100: binary.TypeConverterConfig.MappingEntry
	nil,                                          // 101: binary.IntegerToEnumConverter.MappingEntry
	nil,                                          // 102: binary.EnumToIntegerConverter.MappingEntry
	nil,                                          // 103: binary.StringToEnumConverter.MappingEntry
	nil,                                          // 104: binary.EnumToStringConverter.MappingEntry
	(*AppPublishResponse_BatchField)(nil),        // 105: binary.AppPublishResponse.BatchField
	(*AppPublishResponse_ResponseTextField)(nil), // 106: binary.AppPublishResponse.ResponseTextField
	(*AppPublishResponse_Field3)(nil),            // 107: binary.AppPublishResponse.Field3
	(*AppPublishResponse_EventCountField)(nil),   // 108: binary.AppPublishResponse.EventCountField
	(*wrapperspb.StringValue)(nil),               // 109: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                // 110: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                  // 111: google.protobuf.Duration
	(*wrapperspb.Int32Value)(nil),                // 112: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                 // 113: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil),               // 114: google.protobuf.DoubleValue
	(*wrapperspb.BytesValue)(nil),                // 115: google.protobuf.BytesValue
	(*wrapperspb.Int64Value)(nil),                // 116: google.protobuf.Int64Value
}
var file_tinder_proto_depIdxs = []int32{
	24,  // 0: binary.InitialData.data:type_name -> binary.AppEventData
	109, // 1: binary.AppEventData.batchId:type_name -> google.protobuf.StringValue
	25,  // 2: binary.AppEventData.events:type_name -> binary.Event
	109, // 3: binary.Event.id:type_name -> google.protobuf.StringValue
	110, // 4: binary.Event.create_time:type_name -> google.protobuf.Timestamp
	34,  // 5: binary.Event.event_session:type_name -> binary.AppEventSession
	26,  // 6: binary.Event.platform:type_name -> binary.AppPlatformEvent
	92,  // 7: binary.AppPlatformEvent.network_perf:type_name -> binary.NetworkPerf
	39,  // 8: binary.AppPlatformEvent.binary_parse_error_event:type_name -> binary.BinaryParseErrorEvent
	40,  // 9: binary.AppPlatformEvent.json_parse_error_event:type_name -> binary.JsonParseErrorEvent
	97,  // 10: binary.AppPlatformEvent.log_event:type_name -> binary.LogEvent
	29,  // 11: binary.AppPlatformEvent.duration_measure:type_name -> binary.DurationMeasure
	96,  // 12: binary.AppPlatformEvent.json_event:type_name -> binary.JsonEvent
	28,  // 13: binary.AppPlatformEvent.hubble_instrument:type_name -> binary.HubbleInstrument
	27,  // 14: binary.AppPlatformEvent.test_event_1:type_name -> binary.TestEvent1
	109, // 15: binary.TestEvent1.id:type_name -> google.protobuf.StringValue
	0,   // 16: binary.TestEvent1.type:type_name -> binary.TestEvent1Type
	111, // 17: binary.TestEvent1.duration:type_name -> google.protobuf.Duration
	110, // 18: binary.TestEvent1.time:type_name -> google.protobuf.Timestamp
	112, // 19: binary.TestEvent1.count:type_name -> google.protobuf.Int32Value
	113, // 20: binary.TestEvent1.is_enabled:type_name -> google.protobuf.BoolValue
	109, // 21: binary.HubbleInstrument.id:type_name -> google.protobuf.StringValue
	1,   // 22: binary.HubbleInstrument.type:type_name -> binary.HubbleInstrumentType
	33,  // 23: binary.HubbleInstrument.instrument_details:type_name -> binary.InstrumentDetails
	22,  // 24: binary.DurationMeasure.category:type_name -> binary.DurationMeasure.Category
	109, // 25: binary.DurationMeasure.type:type_name -> google.protobuf.StringValue
	109, // 26: binary.DurationMeasure.subtype:type_name -> google.protobuf.StringValue
	111, // 27: binary.DurationMeasure.duration:type_name -> google.protobuf.Duration
	113, // 28: binary.DurationMeasure.success:type_name -> google.protobuf.BoolValue
	38,  // 29: binary.Meta.source:type_name -> binary.SourceDescriptor
	13,  // 30: binary.Meta.experience_id:type_name -> binary.ExperienceId
	13,  // 31: binary.Meta.previous_experience_id:type_name -> binary.ExperienceId
	109, // 32: binary.Meta.flow_name:type_name -> google.protobuf.StringValue
	109, // 33: binary.Meta.parent_flow_name:type_name -> google.protobuf.StringValue
	109, // 34: binary.Meta.step_name:type_name -> google.protobuf.StringValue
	112, // 35: binary.Meta.step_count:type_name -> google.protobuf.Int32Value
	3,   // 36: binary.Meta.status_code:type_name -> binary.StatusCode
	109, // 37: binary.Meta.status_message:type_name -> google.protobuf.StringValue
	109, // 38: binary.SkuPackageDetails.sku:type_name -> google.protobuf.StringValue
	114, // 39: binary.SkuPackageDetails.price:type_name -> google.protobuf.DoubleValue
	31,  // 40: binary.EventDetails.sku_details:type_name -> binary.SkuPackageDetails
	7,   // 41: binary.InstrumentDetails.entity_type:type_name -> binary.EntityType
	109, // 42: binary.InstrumentDetails.entity_id:type_name -> google.protobuf.StringValue
	41,  // 43: binary.InstrumentDetails.paywall_details:type_name -> binary.PaywallDetails
	60,  // 44: binary.InstrumentDetails.recs_photo_details:type_name -> binary.RecsPhotoDetails
	61,  // 45: binary.InstrumentDetails.recs_core_details:type_name -> binary.RecsCoreDetails
	52,  // 46: binary.AppEventSession.app:type_name -> binary.AppAttributes
	51,  // 47: binary.AppEventSession.auth:type_name -> binary.AuthAttributes
	36,  // 48: binary.AppEventSession.device:type_name -> binary.DeviceAttributes
	46,  // 49: binary.AppEventSession.location:type_name -> binary.LocationAttributes
	54,  // 50: binary.AppEventSession.user:type_name -> binary.UserAttributes
	109, // 51: binary.NetworkProvider.name:type_name -> google.protobuf.StringValue
	20,  // 52: binary.NetworkProvider.type:type_name -> binary.NetworkType
	109, // 53: binary.DeviceAttributes.device_id:type_name -> google.protobuf.StringValue
	109, // 54: binary.DeviceAttributes.locale:type_name -> google.protobuf.StringValue
	109, // 55: binary.DeviceAttributes.persistent_id:type_name -> google.protobuf.StringValue
	109, // 56: binary.DeviceAttributes.language:type_name -> google.protobuf.StringValue
	109, // 57: binary.DeviceAttributes.manufacturer:type_name -> google.protobuf.StringValue
	109, // 58: binary.DeviceAttributes.model:type_name -> google.protobuf.StringValue
	35,  // 59: binary.DeviceAttributes.device_network_provider:type_name -> binary.NetworkProvider
	86,  // 60: binary.DeviceAttributes.platform:type_name -> binary.DevicePlatform
	85,  // 61: binary.DeviceAttributes.power:type_name -> binary.PowerAttributes
	84,  // 62: binary.DeviceAttributes.memory:type_name -> binary.MemoryAttributes
	17,  // 63: binary.DeviceAttributes.country_code:type_name -> binary.CountryCode
	19,  // 64: binary.DeviceAttributes.language_code:type_name -> binary.LanguageCode
	113, // 65: binary.DeviceAttributes.is_emulator:type_name -> google.protobuf.BoolValue
	42,  // 66: binary.ServiceAttributes.name:type_name -> binary.ServiceName
	83,  // 67: binary.ServiceAttributes.version:type_name -> binary.SemanticVersion
	109, // 68: binary.SourceDescriptor.label:type_name -> google.protobuf.StringValue
	5,   // 69: binary.SourceDescriptor.feature:type_name -> binary.FeatureType
	4,   // 70: binary.SourceDescriptor.element:type_name -> binary.UiElement
	7,   // 71: binary.SourceDescriptor.entity_type:type_name -> binary.EntityType
	109, // 72: binary.SourceDescriptor.entity_id:type_name -> google.protobuf.StringValue
	6,   // 73: binary.SourceDescriptor.source_action:type_name -> binary.SourceAction
	8,   // 74: binary.SourceDescriptor.source_component:type_name -> binary.SourceComponent
	109, // 75: binary.SourceDescriptor.source_id:type_name -> google.protobuf.StringValue
	109, // 76: binary.BinaryParseErrorEvent.tag:type_name -> google.protobuf.StringValue
	109, // 77: binary.BinaryParseErrorEvent.message:type_name -> google.protobuf.StringValue
	115, // 78: binary.BinaryParseErrorEvent.bytes:type_name -> google.protobuf.BytesValue
	109, // 79: binary.JsonParseErrorEvent.tag:type_name -> google.protobuf.StringValue
	109, // 80: binary.JsonParseErrorEvent.message:type_name -> google.protobuf.StringValue
	109, // 81: binary.JsonParseErrorEvent.json:type_name -> google.protobuf.StringValue
	5,   // 82: binary.PaywallDetails.feature:type_name -> binary.FeatureType
	43,  // 83: binary.ServiceName.purchase_service:type_name -> binary.PurchaseService
	44,  // 84: binary.ServiceName.test:type_name -> binary.TestService
	47,  // 85: binary.ServerAttributes.operating_system:type_name -> binary.OperatingSystem
	114, // 86: binary.LocationAttributes.lat:type_name -> google.protobuf.DoubleValue
	114, // 87: binary.LocationAttributes.lon:type_name -> google.protobuf.DoubleValue
	110, // 88: binary.LocationAttributes.location_time:type_name -> google.protobuf.Timestamp
	109, // 89: binary.OperatingSystem.os_version:type_name -> google.protobuf.StringValue
	48,  // 90: binary.OperatingSystem.linux:type_name -> binary.Linux
	49,  // 91: binary.OperatingSystem.darwin:type_name -> binary.Darwin
	50,  // 92: binary.OperatingSystem.windows:type_name -> binary.Windows
	83,  // 93: binary.Linux.version:type_name -> binary.SemanticVersion
	83,  // 94: binary.Darwin.version:type_name -> binary.SemanticVersion
	83,  // 95: binary.Windows.version:type_name -> binary.SemanticVersion
	109, // 96: binary.AuthAttributes.auth_id:type_name -> google.protobuf.StringValue
	109, // 97: binary.AuthAttributes.auth_session_id:type_name -> google.protobuf.StringValue
	56,  // 98: binary.AppAttributes.name:type_name -> binary.AppName
	83,  // 99: binary.AppAttributes.version:type_name -> binary.SemanticVersion
	53,  // 100: binary.AppAttributes.session:type_name -> binary.AppSession
	109, // 101: binary.AppSession.session_id:type_name -> google.protobuf.StringValue
	116, // 102: binary.AppSession.session_time_elapsed:type_name -> google.protobuf.Int64Value
	109, // 103: binary.UserAttributes.uid:type_name -> google.protobuf.StringValue
	55,  // 104: binary.UserAttributes.session:type_name -> binary.UserSession
	10,  // 105: binary.UserAttributes.user_type:type_name -> binary.UserType
	9,   // 106: binary.UserAttributes.user_gender:type_name -> binary.Gender
	9,   // 107: binary.UserAttributes.target_gender:type_name -> binary.Gender
	109, // 108: binary.UserSession.session_id:type_name -> google.protobuf.StringValue
	111, // 109: binary.UserSession.session_time_duration:type_name -> google.protobuf.Duration
	64,  // 110: binary.AppName.tinder:type_name -> binary.TinderApp
	58,  // 111: binary.AppName.analytics_sdk_demo:type_name -> binary.AnalyticsSdkDemoApp
	57,  // 112: binary.AppName.test_app:type_name -> binary.TestApp
	109, // 113: binary.TestApp.name:type_name -> google.protobuf.StringValue
	109, // 114: binary.ContentDescriptor.id:type_name -> google.protobuf.StringValue
	109, // 115: binary.ContentDescriptor.url:type_name -> google.protobuf.StringValue
	109, // 116: binary.RecsPhotoDetails.photo_id:type_name -> google.protobuf.StringValue
	109, // 117: binary.RecsPhotoDetails.url:type_name -> google.protobuf.StringValue
	112, // 118: binary.RecsCoreDetails.request_index:type_name -> google.protobuf.Int32Value
	112, // 119: binary.RecsCoreDetails.discovery_index:type_name -> google.protobuf.Int32Value
	112, // 120: binary.RecsCoreDetails.recs_cards_count:type_name -> google.protobuf.Int32Value
	67,  // 121: binary.CustomConversion.attribute_converter:type_name -> binary.TypeAttributeConverter
	12,  // 122: binary.EventRecordRoot.includes:type_name -> binary.EventAttribute
	100, // 123: binary.TypeConverterConfig.mapping:type_name -> binary.TypeConverterConfig.MappingEntry
	67,  // 124: binary.TypeAttributeConfig.converter:type_name -> binary.TypeAttributeConverter
	68,  // 125: binary.TypeAttributeConverter.identity:type_name -> binary.IdentityConverter
	69,  // 126: binary.TypeAttributeConverter.uppercase:type_name -> binary.UppercaseConverter
	70,  // 127: binary.TypeAttributeConverter.lowercase:type_name -> binary.LowercaseConverter
	76,  // 128: binary.TypeAttributeConverter.substring:type_name -> binary.SubstringConverter
	72,  // 129: binary.TypeAttributeConverter.int32_to_enum:type_name -> binary.IntegerToEnumConverter
	74,  // 130: binary.TypeAttributeConverter.string_to_enum:type_name -> binary.StringToEnumConverter
	77,  // 131: binary.TypeAttributeConverter.time_unit_to_timestamp:type_name -> binary.TimeUnitToTimestampConverter
	78,  // 132: binary.TypeAttributeConverter.time_unit_to_duration:type_name -> binary.TimeUnitToDurationConverter
	80,  // 133: binary.TypeAttributeConverter.timestamp_to_time_unit:type_name -> binary.TimestampToTimeUnitConverter
	79,  // 134: binary.TypeAttributeConverter.duration_to_time_unit:type_name -> binary.DurationToTimeUnitConverter
	75,  // 135: binary.TypeAttributeConverter.enum_to_string:type_name -> binary.EnumToStringConverter
	73,  // 136: binary.TypeAttributeConverter.enum_to_int32:type_name -> binary.EnumToIntegerConverter
	71,  // 137: binary.TypeAttributeConverter.repeated_to_string:type_name -> binary.RepeatedToStringConverter
	81,  // 138: binary.TypeAttributeConverter.semantic_version_to_string:type_name -> binary.SemanticVersionToStringConverter
	82,  // 139: binary.TypeAttributeConverter.oneof_name_to_string:type_name -> binary.OneofNameToStringConverter
	101, // 140: binary.IntegerToEnumConverter.mapping:type_name -> binary.IntegerToEnumConverter.MappingEntry
	102, // 141: binary.EnumToIntegerConverter.mapping:type_name -> binary.EnumToIntegerConverter.MappingEntry
	103, // 142: binary.StringToEnumConverter.mapping:type_name -> binary.StringToEnumConverter.MappingEntry
	104, // 143: binary.EnumToStringConverter.mapping:type_name -> binary.EnumToStringConverter.MappingEntry
	14,  // 144: binary.TimeUnitToTimestampConverter.time_unit:type_name -> binary.TimeUnit
	14,  // 145: binary.TimeUnitToDurationConverter.time_unit:type_name -> binary.TimeUnit
	14,  // 146: binary.DurationToTimeUnitConverter.time_unit:type_name -> binary.TimeUnit
	14,  // 147: binary.TimestampToTimeUnitConverter.time_unit:type_name -> binary.TimeUnit
	112, // 148: binary.SemanticVersion.major:type_name -> google.protobuf.Int32Value
	112, // 149: binary.SemanticVersion.minor:type_name -> google.protobuf.Int32Value
	112, // 150: binary.SemanticVersion.patch:type_name -> google.protobuf.Int32Value
	112, // 151: binary.SemanticVersion.build:type_name -> google.protobuf.Int32Value
	113, // 152: binary.SemanticVersion.release:type_name -> google.protobuf.BoolValue
	116, // 153: binary.MemoryAttributes.total_ram_bytes:type_name -> google.protobuf.Int64Value
	116, // 154: binary.MemoryAttributes.free_ram_bytes:type_name -> google.protobuf.Int64Value
	116, // 155: binary.MemoryAttributes.ram_used_by_app_bytes:type_name -> google.protobuf.Int64Value
	114, // 156: binary.PowerAttributes.battery_level_percent:type_name -> google.protobuf.DoubleValue
	113, // 157: binary.PowerAttributes.lower_power_mode_enabled:type_name -> google.protobuf.BoolValue
	109, // 158: binary.DevicePlatform.os_version:type_name -> google.protobuf.StringValue
	87,  // 159: binary.DevicePlatform.android:type_name -> binary.Android
	88,  // 160: binary.DevicePlatform.browser:type_name -> binary.Browser
	89,  // 161: binary.DevicePlatform.ios:type_name -> binary.Ios
	90,  // 162: binary.DevicePlatform.android_lite:type_name -> binary.AndroidLite
	91,  // 163: binary.DevicePlatform.ios_lite:type_name -> binary.IosLite
	15,  // 164: binary.Android.platform_variant:type_name -> binary.PlatformVariant
	109, // 165: binary.Android.instance_id:type_name -> google.protobuf.StringValue
	109, // 166: binary.Android.device_id:type_name -> google.protobuf.StringValue
	109, // 167: binary.Android.os_version:type_name -> google.protobuf.StringValue
	113, // 168: binary.Android.is_rooted:type_name -> google.protobuf.BoolValue
	16,  // 169: binary.Android.store_variant:type_name -> binary.StoreVariant
	109, // 170: binary.Browser.name:type_name -> google.protobuf.StringValue
	109, // 171: binary.Browser.version:type_name -> google.protobuf.StringValue
	109, // 172: binary.Ios.idfa:type_name -> google.protobuf.StringValue
	109, // 173: binary.Ios.device_id:type_name -> google.protobuf.StringValue
	109, // 174: binary.Ios.os_version:type_name -> google.protobuf.StringValue
	17,  // 175: binary.Ios.country:type_name -> binary.CountryCode
	113, // 176: binary.Ios.is_jailbroken:type_name -> google.protobuf.BoolValue
	93,  // 177: binary.NetworkPerf.network_call:type_name -> binary.NetworkCallAttributes
	18,  // 178: binary.NetworkPerf.method:type_name -> binary.HttpMethodType
	109, // 179: binary.NetworkPerf.error_code:type_name -> google.protobuf.StringValue
	112, // 180: binary.NetworkPerf.status_code:type_name -> google.protobuf.Int32Value
	109, // 181: binary.NetworkPerf.request_id:type_name -> google.protobuf.StringValue
	109, // 182: binary.NetworkPerf.endpoint:type_name -> google.protobuf.StringValue
	94,  // 183: binary.NetworkPerf.connection:type_name -> binary.NetworkCallConnection
	95,  // 184: binary.NetworkPerf.error:type_name -> binary.NetworkCallError
	112, // 185: binary.NetworkPerf.response_body_bytes:type_name -> google.protobuf.Int32Value
	109, // 186: binary.NetworkPerf.hubble_entity_id:type_name -> google.protobuf.StringValue
	109, // 187: binary.NetworkCallAttributes.name:type_name -> google.protobuf.StringValue
	110, // 188: binary.NetworkCallAttributes.call_time:type_name -> google.protobuf.Timestamp
	110, // 189: binary.NetworkCallAttributes.response_time:type_name -> google.protobuf.Timestamp
	111, // 190: binary.NetworkCallAttributes.duration:type_name -> google.protobuf.Duration
	112, // 191: binary.NetworkCallConnection.connection_attempts:type_name -> google.protobuf.Int32Value
	111, // 192: binary.NetworkCallConnection.connection_duration:type_name -> google.protobuf.Duration
	111, // 193: binary.NetworkCallConnection.dns_duration:type_name -> google.protobuf.Duration
	111, // 194: binary.NetworkCallConnection.secure_duration:type_name -> google.protobuf.Duration
	109, // 195: binary.NetworkCallError.type:type_name -> google.protobuf.StringValue
	109, // 196: binary.NetworkCallError.message:type_name -> google.protobuf.StringValue
	109, // 197: binary.JsonEvent.value:type_name -> google.protobuf.StringValue
	109, // 198: binary.JsonEvent.name:type_name -> google.protobuf.StringValue
	109, // 199: binary.LogEvent.owner:type_name -> google.protobuf.StringValue
	21,  // 200: binary.LogEvent.level:type_name -> binary.LogLevel
	109, // 201: binary.LogEvent.message:type_name -> google.protobuf.StringValue
	99,  // 202: binary.AppPublishInitialData.response:type_name -> binary.AppPublishResponse
	105, // 203: binary.AppPublishResponse.batchId:type_name -> binary.AppPublishResponse.BatchField
	106, // 204: binary.AppPublishResponse.responseText:type_name -> binary.AppPublishResponse.ResponseTextField
	107, // 205: binary.AppPublishResponse.field3:type_name -> binary.AppPublishResponse.Field3
	108, // 206: binary.AppPublishResponse.EventCount:type_name -> binary.AppPublishResponse.EventCountField
	66,  // 207: binary.TypeConverterConfig.MappingEntry.value:type_name -> binary.TypeAttributeConfig
	208, // [208:208] is the sub-list for method output_type
	208, // [208:208] is the sub-list for method input_type
	208, // [208:208] is the sub-list for extension type_name
	208, // [208:208] is the sub-list for extension extendee
	0,   // [0:208] is the sub-list for field type_name
}

func init() { file_tinder_proto_init() }
func file_tinder_proto_init() {
	if File_tinder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tinder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPlatformEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestEvent1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubbleInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationMeasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuPackageDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEventSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryParseErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonParseErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaywallDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatingSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Linux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Darwin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Windows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsSdkDemoApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecsPhotoDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecsCoreDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomConversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRecordRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TinderApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeConverterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeAttributeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeAttributeConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UppercaseConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LowercaseConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedToStringConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerToEnumConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumToIntegerConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringToEnumConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumToStringConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstringConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeUnitToTimestampConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeUnitToDurationConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationToTimeUnitConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampToTimeUnitConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticVersionToStringConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofNameToStringConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Android); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ios); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCallAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCallConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCallError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishInitialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishResponse_BatchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishResponse_ResponseTextField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishResponse_Field3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tinder_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishResponse_EventCountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tinder_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Event_Platform)(nil),
	}
	file_tinder_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AppPlatformEvent_NetworkPerf)(nil),
		(*AppPlatformEvent_BinaryParseErrorEvent)(nil),
		(*AppPlatformEvent_JsonParseErrorEvent)(nil),
		(*AppPlatformEvent_LogEvent)(nil),
		(*AppPlatformEvent_DurationMeasure)(nil),
		(*AppPlatformEvent_JsonEvent)(nil),
		(*AppPlatformEvent_HubbleInstrument)(nil),
		(*AppPlatformEvent_TestEvent_1)(nil),
	}
	file_tinder_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*EventDetails_SkuDetails)(nil),
	}
	file_tinder_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*InstrumentDetails_PaywallDetails)(nil),
		(*InstrumentDetails_RecsPhotoDetails)(nil),
		(*InstrumentDetails_RecsCoreDetails)(nil),
	}
	file_tinder_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*NetworkProvider_Type)(nil),
	}
	file_tinder_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ServiceName_PurchaseService)(nil),
		(*ServiceName_Test)(nil),
	}
	file_tinder_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*OperatingSystem_Linux)(nil),
		(*OperatingSystem_Darwin)(nil),
		(*OperatingSystem_Windows)(nil),
	}
	file_tinder_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*AppName_Tinder)(nil),
		(*AppName_AnalyticsSdkDemo)(nil),
		(*AppName_TestApp)(nil),
	}
	file_tinder_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*TypeAttributeConverter_Identity)(nil),
		(*TypeAttributeConverter_Uppercase)(nil),
		(*TypeAttributeConverter_Lowercase)(nil),
		(*TypeAttributeConverter_Substring)(nil),
		(*TypeAttributeConverter_Int32ToEnum)(nil),
		(*TypeAttributeConverter_StringToEnum)(nil),
		(*TypeAttributeConverter_TimeUnitToTimestamp)(nil),
		(*TypeAttributeConverter_TimeUnitToDuration)(nil),
		(*TypeAttributeConverter_TimestampToTimeUnit)(nil),
		(*TypeAttributeConverter_DurationToTimeUnit)(nil),
		(*TypeAttributeConverter_EnumToString)(nil),
		(*TypeAttributeConverter_EnumToInt32)(nil),
		(*TypeAttributeConverter_RepeatedToString)(nil),
		(*TypeAttributeConverter_SemanticVersionToString)(nil),
		(*TypeAttributeConverter_OneofNameToString)(nil),
	}
	file_tinder_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*DevicePlatform_Android)(nil),
		(*DevicePlatform_Browser)(nil),
		(*DevicePlatform_Ios)(nil),
		(*DevicePlatform_AndroidLite)(nil),
		(*DevicePlatform_IosLite)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tinder_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tinder_proto_goTypes,
		DependencyIndexes: file_tinder_proto_depIdxs,
		EnumInfos:         file_tinder_proto_enumTypes,
		MessageInfos:      file_tinder_proto_msgTypes,
	}.Build()
	File_tinder_proto = out.File
	file_tinder_proto_rawDesc = nil
	file_tinder_proto_goTypes = nil
	file_tinder_proto_depIdxs = nil
}
